
testflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ce0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c4  08010e8c  08010e8c  00020e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014050  08014050  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014050  08014050  00024050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014058  08014058  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014058  08014058  00024058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801405c  0801405c  0002405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08014060  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00005f2c  200000a8  200000a8  000300a8  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  20005fd4  20005fd4  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036362  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006727  00000000  00000000  0006643a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  0006cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ba8  00000000  00000000  0006e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b678  00000000  00000000  00070498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bf3f  00000000  00000000  0009bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5641  00000000  00000000  000c7a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ad090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e2c  00000000  00000000  001ad0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000a8 	.word	0x200000a8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08010e74 	.word	0x08010e74

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000ac 	.word	0x200000ac
 80001e8:	08010e74 	.word	0x08010e74

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fe75 	bl	80001ec <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <Send_Uart+0x28>)
 800050e:	f006 ffce 	bl	80074ae <HAL_UART_Transmit>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200016b4 	.word	0x200016b4

08000520 <Mount_USB>:

BYTE work[_MAX_SS];

void Mount_USB (void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
//	fresult = f_mkfs("", FM_ANY, 0, work, sizeof work);
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <Mount_USB+0x30>)
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <Mount_USB+0x34>)
 800052a:	f00e fee9 	bl	800f300 <f_mount>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <Mount_USB+0x38>)
 8000534:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <Mount_USB+0x38>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <Mount_USB+0x26>
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <Mount_USB+0x3c>)
 8000540:	f7ff ffd8 	bl	80004f4 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000544:	e002      	b.n	800054c <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <Mount_USB+0x40>)
 8000548:	f7ff ffd4 	bl	80004f4 <Send_Uart>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20003848 	.word	0x20003848
 8000554:	200048a8 	.word	0x200048a8
 8000558:	2000052c 	.word	0x2000052c
 800055c:	08010e8c 	.word	0x08010e8c
 8000560:	08010eac 	.word	0x08010eac

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PlayState = State_Next ;
 800056a:	4b72      	ldr	r3, [pc, #456]	; (8000734 <main+0x1d0>)
 800056c:	2203      	movs	r2, #3
 800056e:	701a      	strb	r2, [r3, #0]
	I2SDMAState = I2SDMA_Running ;
 8000570:	4b71      	ldr	r3, [pc, #452]	; (8000738 <main+0x1d4>)
 8000572:	2202      	movs	r2, #2
 8000574:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentIndex = 0 ;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint32_t CurrentByte =0 ;
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 fab1 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8f5 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa17 	bl	80009b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f9cb 	bl	8000924 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800058e:	f008 f99f 	bl	80088d0 <MX_FATFS_Init>
  MX_DMA_Init();
 8000592:	f000 f9f1 	bl	8000978 <MX_DMA_Init>
  MX_I2S2_Init(8000);
 8000596:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800059a:	f000 f993 	bl	80008c4 <MX_I2S2_Init>
  MX_USB_HOST_Init();
 800059e:	f00f ffe9 	bl	8010574 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 80005a2:	f000 f94f 	bl	8000844 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  SSD1306_Init();  // initialise
 80005a6:	f000 fd39 	bl	800101c <SSD1306_Init>


  SSD1306_GotoXY (0,0);
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fe9f 	bl	80012f0 <SSD1306_GotoXY>
  SSD1306_Puts ("Welcome :)", &Font_16x26, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	4961      	ldr	r1, [pc, #388]	; (800073c <main+0x1d8>)
 80005b6:	4862      	ldr	r0, [pc, #392]	; (8000740 <main+0x1dc>)
 80005b8:	f000 ff30 	bl	800141c <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80005bc:	f000 fdf2 	bl	80011a4 <SSD1306_UpdateScreen>
  SSD1306_ScrollRight(0,26);
 80005c0:	211a      	movs	r1, #26
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fceb 	bl	8000f9e <SSD1306_ScrollRight>
  HAL_Delay (2000);
 80005c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005cc:	f001 facc 	bl	8001b68 <HAL_Delay>
  SSD1306_Stopscroll();
 80005d0:	f000 fd1b 	bl	800100a <SSD1306_Stopscroll>
  SSD1306_UpdateScreen(); //display
 80005d4:	f000 fde6 	bl	80011a4 <SSD1306_UpdateScreen>

  while(Appli_state != APPLICATION_READY)
 80005d8:	e009      	b.n	80005ee <main+0x8a>
  {
	    MX_USB_HOST_Process();
 80005da:	f00f fff1 	bl	80105c0 <MX_USB_HOST_Process>
	    if(Appli_state == APPLICATION_READY)
 80005de:	4b59      	ldr	r3, [pc, #356]	; (8000744 <main+0x1e0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d103      	bne.n	80005ee <main+0x8a>
	    {

	    	ReadDIRWavFiles(USBHPath ,&file ); /* collect all file in give path */
 80005e6:	4958      	ldr	r1, [pc, #352]	; (8000748 <main+0x1e4>)
 80005e8:	4858      	ldr	r0, [pc, #352]	; (800074c <main+0x1e8>)
 80005ea:	f000 fab5 	bl	8000b58 <ReadDIRWavFiles>
  while(Appli_state != APPLICATION_READY)
 80005ee:	4b55      	ldr	r3, [pc, #340]	; (8000744 <main+0x1e0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d1f1      	bne.n	80005da <main+0x76>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005f6:	f00f ffe3 	bl	80105c0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


    if(Appli_state == APPLICATION_READY)
 80005fa:	4b52      	ldr	r3, [pc, #328]	; (8000744 <main+0x1e0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	f040 8094 	bne.w	800072c <main+0x1c8>
    {

        MX_USB_HOST_Process();
 8000604:	f00f ffdc 	bl	80105c0 <MX_USB_HOST_Process>


    	switch(PlayState)
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <main+0x1d0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b05      	cmp	r3, #5
 8000610:	d8f1      	bhi.n	80005f6 <main+0x92>
 8000612:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <main+0xb4>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	080006a7 	.word	0x080006a7
 800061c:	0800067d 	.word	0x0800067d
 8000620:	080005f7 	.word	0x080005f7
 8000624:	08000631 	.word	0x08000631
 8000628:	08000655 	.word	0x08000655
 800062c:	080006cb 	.word	0x080006cb
    	{

    	case State_Next:
        		StartRunningWavFile(CurrentIndex);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fc2c 	bl	8000e90 <StartRunningWavFile>

          		CurrentIndex ++;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	3301      	adds	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
            	if((CurrentIndex >  IndexFile)||(CurrentIndex == 0))
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4b43      	ldr	r3, [pc, #268]	; (8000750 <main+0x1ec>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	dc02      	bgt.n	800064e <main+0xea>
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d170      	bne.n	8000730 <main+0x1cc>
            		CurrentIndex=0;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]

    	break ;
 8000652:	e06d      	b.n	8000730 <main+0x1cc>
    	case State_Previous:
    		CurrentIndex --;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	3b01      	subs	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
    		if((CurrentIndex >  IndexFile)||(CurrentIndex == 0))
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <main+0x1ec>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	dc02      	bgt.n	800066a <main+0x106>
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <main+0x10a>
    			CurrentIndex=1;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]

    		StartRunningWavFile(CurrentIndex-1);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	3b01      	subs	r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc0b 	bl	8000e90 <StartRunningWavFile>


    	break ;
 800067a:	e05a      	b.n	8000732 <main+0x1ce>
    	case State_Puse:

    		SSD1306_GotoXY (0,26);
 800067c:	211a      	movs	r1, #26
 800067e:	2000      	movs	r0, #0
 8000680:	f000 fe36 	bl	80012f0 <SSD1306_GotoXY>
    		SSD1306_Puts ("Pause", &Font_11x18, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	4933      	ldr	r1, [pc, #204]	; (8000754 <main+0x1f0>)
 8000688:	4833      	ldr	r0, [pc, #204]	; (8000758 <main+0x1f4>)
 800068a:	f000 fec7 	bl	800141c <SSD1306_Puts>
    		SSD1306_UpdateScreen(); //display
 800068e:	f000 fd89 	bl	80011a4 <SSD1306_UpdateScreen>
    		HAL_I2S_DMAPause(&hi2s2);
 8000692:	4832      	ldr	r0, [pc, #200]	; (800075c <main+0x1f8>)
 8000694:	f004 fe84 	bl	80053a0 <HAL_I2S_DMAPause>
    		while(PlayState == State_Puse);
 8000698:	bf00      	nop
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <main+0x1d0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d0fa      	beq.n	800069a <main+0x136>

        break ;
 80006a4:	e045      	b.n	8000732 <main+0x1ce>
    	case State_Play:

    		SSD1306_GotoXY (0,26);
 80006a6:	211a      	movs	r1, #26
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fe21 	bl	80012f0 <SSD1306_GotoXY>
    		SSD1306_Puts ("Run  ", &Font_11x18, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	4928      	ldr	r1, [pc, #160]	; (8000754 <main+0x1f0>)
 80006b2:	482b      	ldr	r0, [pc, #172]	; (8000760 <main+0x1fc>)
 80006b4:	f000 feb2 	bl	800141c <SSD1306_Puts>
    		SSD1306_UpdateScreen(); //display
 80006b8:	f000 fd74 	bl	80011a4 <SSD1306_UpdateScreen>
    		HAL_I2S_DMAResume(&hi2s2);
 80006bc:	4827      	ldr	r0, [pc, #156]	; (800075c <main+0x1f8>)
 80006be:	f004 fed1 	bl	8005464 <HAL_I2S_DMAResume>
    	 	PlayState = State_Idel;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <main+0x1d0>)
 80006c4:	2205      	movs	r2, #5
 80006c6:	701a      	strb	r2, [r3, #0]

    	break ;
 80006c8:	e033      	b.n	8000732 <main+0x1ce>
    	case State_Idel:
    		i =0 ;
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0x200>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    		while(PlayState == State_Idel)
 80006d0:	e026      	b.n	8000720 <main+0x1bc>
    		{

    			if(I2SDMAState == I2SDMA_Running)
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x1d4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d113      	bne.n	8000704 <main+0x1a0>
    			{
    			f_read(&USBHFile, Buffer , sizeof(Buffer), &i);
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <main+0x200>)
 80006de:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
 80006e2:	4921      	ldr	r1, [pc, #132]	; (8000768 <main+0x204>)
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <main+0x208>)
 80006e6:	f00f f9cb 	bl	800fa80 <f_read>
    			if(i <=0 )
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x200>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d104      	bne.n	80006fc <main+0x198>
    			{
    				PlayState = State_Next ;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <main+0x1d0>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	701a      	strb	r2, [r3, #0]
    				break  ;
 80006f8:	bf00      	nop

    			}
    	}


    	break ;
 80006fa:	e01a      	b.n	8000732 <main+0x1ce>
    				I2SDMAState = 0 ;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <main+0x1d4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e00d      	b.n	8000720 <main+0x1bc>
    			else if(I2SDMAState == I2SDMA_Ready)
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <main+0x1d4>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b01      	cmp	r3, #1
 800070c:	d108      	bne.n	8000720 <main+0x1bc>
        		HAL_I2S_Transmit_DMA(&hi2s2, Buffer, sizeof(Buffer)/2);
 800070e:	f44f 627d 	mov.w	r2, #4048	; 0xfd0
 8000712:	4915      	ldr	r1, [pc, #84]	; (8000768 <main+0x204>)
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0x1f8>)
 8000716:	f004 fd9b 	bl	8005250 <HAL_I2S_Transmit_DMA>
        		I2SDMAState = I2SDMA_Running ;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <main+0x1d4>)
 800071c:	2202      	movs	r2, #2
 800071e:	701a      	strb	r2, [r3, #0]
    		while(PlayState == State_Idel)
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <main+0x1d0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b05      	cmp	r3, #5
 8000728:	d0d3      	beq.n	80006d2 <main+0x16e>
    	break ;
 800072a:	e002      	b.n	8000732 <main+0x1ce>

    	}

    }
 800072c:	bf00      	nop
 800072e:	e762      	b.n	80005f6 <main+0x92>
    	break ;
 8000730:	bf00      	nop
    MX_USB_HOST_Process();
 8000732:	e760      	b.n	80005f6 <main+0x92>
 8000734:	20001658 	.word	0x20001658
 8000738:	2000175c 	.word	0x2000175c
 800073c:	20000010 	.word	0x20000010
 8000740:	0801133c 	.word	0x0801133c
 8000744:	2000050c 	.word	0x2000050c
 8000748:	200000c8 	.word	0x200000c8
 800074c:	20003848 	.word	0x20003848
 8000750:	200000c4 	.word	0x200000c4
 8000754:	20000008 	.word	0x20000008
 8000758:	08011348 	.word	0x08011348
 800075c:	200037b4 	.word	0x200037b4
 8000760:	08011350 	.word	0x08011350
 8000764:	200016b0 	.word	0x200016b0
 8000768:	200017b4 	.word	0x200017b4
 800076c:	20003850 	.word	0x20003850

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f010 fa6a 	bl	8010c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <SystemClock_Config+0xcc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xd0>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e4:	23a8      	movs	r3, #168	; 0xa8
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ec:	2307      	movs	r3, #7
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fc9d 	bl	8006134 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 fbc8 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000810:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2105      	movs	r1, #5
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fefe 	bl	8006624 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082e:	f000 fbb1 	bl	8000f94 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C1_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C1_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000882:	f003 fdb1 	bl	80043e8 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 fb82 	bl	8000f94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000894:	f004 fb21 	bl	8004eda <HAL_I2CEx_ConfigAnalogFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800089e:	f000 fb79 	bl	8000f94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_I2C1_Init+0x74>)
 80008a6:	f004 fb54 	bl	8004f52 <HAL_I2CEx_ConfigDigitalFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 fb70 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000165c 	.word	0x2000165c
 80008bc:	40005400 	.word	0x40005400
 80008c0:	00061a80 	.word	0x00061a80

080008c4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(unsigned int SampleRate)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2S2_Init+0x58>)
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <MX_I2S2_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2S2_Init+0x58>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2S2_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_I2S2_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_I2S2_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = SampleRate;
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_I2S2_Init+0x58>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6153      	str	r3, [r2, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_I2S2_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_I2S2_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_I2S2_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2S2_Init+0x58>)
 8000906:	f004 fb63 	bl	8004fd0 <HAL_I2S_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000910:	f000 fb40 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200037b4 	.word	0x200037b4
 8000920:	40003800 	.word	0x40003800

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f006 fd5a 	bl	8007414 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 fb15 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200016b4 	.word	0x200016b4
 8000974:	40011000 	.word	0x40011000

08000978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_DMA_Init+0x3c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200f      	movs	r0, #15
 80009a0:	f001 f9be 	bl	8001d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009a4:	200f      	movs	r0, #15
 80009a6:	f001 f9d7 	bl	8001d58 <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	4b54      	ldr	r3, [pc, #336]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a53      	ldr	r2, [pc, #332]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b51      	ldr	r3, [pc, #324]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <MX_GPIO_Init+0x16c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x16c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2102      	movs	r1, #2
 8000a7a:	482b      	ldr	r0, [pc, #172]	; (8000b28 <MX_GPIO_Init+0x170>)
 8000a7c:	f001 ff1e 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Mute_GPIO_Port, Mute_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2110      	movs	r1, #16
 8000a84:	4829      	ldr	r0, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x174>)
 8000a86:	f001 ff19 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Next_Pin Previous_Pin Pause_Pin MuteExt_Pin */
  GPIO_InitStruct.Pin = Next_Pin|Previous_Pin|Pause_Pin|MuteExt_Pin;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_GPIO_Init+0x178>)
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a92:	2302      	movs	r3, #2
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4825      	ldr	r0, [pc, #148]	; (8000b34 <MX_GPIO_Init+0x17c>)
 8000a9e:	f001 fd49 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481b      	ldr	r0, [pc, #108]	; (8000b28 <MX_GPIO_Init+0x170>)
 8000aba:	f001 fd3b 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mute_Pin */
  GPIO_InitStruct.Pin = Mute_Pin;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Mute_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4815      	ldr	r0, [pc, #84]	; (8000b2c <MX_GPIO_Init+0x174>)
 8000ad6:	f001 fd2d 	bl	8002534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f001 f91e 	bl	8001d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae4:	2006      	movs	r0, #6
 8000ae6:	f001 f937 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	2007      	movs	r0, #7
 8000af0:	f001 f916 	bl	8001d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000af4:	2007      	movs	r0, #7
 8000af6:	f001 f92f 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2101      	movs	r1, #1
 8000afe:	2008      	movs	r0, #8
 8000b00:	f001 f90e 	bl	8001d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b04:	2008      	movs	r0, #8
 8000b06:	f001 f927 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f001 f906 	bl	8001d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f001 f91f 	bl	8001d58 <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	10110000 	.word	0x10110000
 8000b34:	40021400 	.word	0x40021400

08000b38 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(hi2s);
	I2SDMAState = I2SDMA_Ready ;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_I2S_TxCpltCallback+0x1c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000175c 	.word	0x2000175c

08000b58 <ReadDIRWavFiles>:
 * pDIR input parameter pointer to  director
 * Files output parameter hold the files
 * return 1 if true or -1 on failed
 */
int ReadDIRWavFiles(char * pPath, WAV_Formate ** AllDirFiles)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b0dd      	sub	sp, #372	; 0x174
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	6018      	str	r0, [r3, #0]
 8000b62:	463b      	mov	r3, r7
 8000b64:	6019      	str	r1, [r3, #0]
	FRESULT res ;
	FILINFO fileinfo;
	char Buffer[50] = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	3304      	adds	r3, #4
 8000b70:	222e      	movs	r2, #46	; 0x2e
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f010 f86f 	bl	8010c58 <memset>
	uint32_t ReadNumOfButes = 0 ;
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	/*
	 * _MAX_LFN maximum file length define by file system
	 * first we only allocate space for 10 files
	 */
	uint16_t Len = 60 ,FileNameLen=0;
 8000b82:	233c      	movs	r3, #60	; 0x3c
 8000b84:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
	WAV_Formate * FileStruct =(WAV_Formate *)malloc(sizeof(WAV_Formate) * Len); /* first create 10 elements */
 8000b8e:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	4618      	mov	r0, r3
 8000b96:	f010 f841 	bl	8010c1c <malloc>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168




	/* dir is defined as global var for all file */
	res = f_opendir(&dir, pPath);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	4889      	ldr	r0, [pc, #548]	; (8000dcc <ReadDIRWavFiles+0x274>)
 8000ba6:	f00f fa7d 	bl	80100a4 <f_opendir>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if(res != FR_OK)
 8000bb0:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <ReadDIRWavFiles+0x66>
		return -1 ;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	e100      	b.n	8000dc0 <ReadDIRWavFiles+0x268>



	do{

		if(IndexFile+1 == Len )
 8000bbe:	4b84      	ldr	r3, [pc, #528]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d112      	bne.n	8000bf2 <ReadDIRWavFiles+0x9a>
		{
			Len *= 2 ;
 8000bcc:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
			if(realloc(FileStruct ,sizeof(WAV_Formate) * Len) == NULL)
 8000bd6:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8000be2:	f010 f8eb 	bl	8010dbc <realloc>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <ReadDIRWavFiles+0x9a>
				return -1 ;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	e0e6      	b.n	8000dc0 <ReadDIRWavFiles+0x268>
		}
		res = f_readdir(&dir, &fileinfo);
 8000bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4874      	ldr	r0, [pc, #464]	; (8000dcc <ReadDIRWavFiles+0x274>)
 8000bfa:	f00f fb3b 	bl	8010274 <f_readdir>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		FileNameLen = strlen(fileinfo.fname);
 8000c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c08:	331a      	adds	r3, #26
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff faee 	bl	80001ec <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c

		if((strlen(fileinfo.fname) == 0))
 8000c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1a:	331a      	adds	r3, #26
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <ReadDIRWavFiles+0xd2>
		{
    	  	f_close(&USBHFile);
 8000c22:	486c      	ldr	r0, [pc, #432]	; (8000dd4 <ReadDIRWavFiles+0x27c>)
 8000c24:	f00f fa14 	bl	8010050 <f_close>

			break;  /* break condition */
 8000c28:	e0c4      	b.n	8000db4 <ReadDIRWavFiles+0x25c>

		}

		if((fileinfo.fname[FileNameLen-1] == 'v')&&
 8000c2a:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c34:	4413      	add	r3, r2
 8000c36:	7e9b      	ldrb	r3, [r3, #26]
 8000c38:	2b76      	cmp	r3, #118	; 0x76
 8000c3a:	f040 80b6 	bne.w	8000daa <ReadDIRWavFiles+0x252>
			(fileinfo.fname[FileNameLen-2] == 'a')&&
 8000c3e:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000c42:	3b02      	subs	r3, #2
 8000c44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c48:	4413      	add	r3, r2
 8000c4a:	7e9b      	ldrb	r3, [r3, #26]
		if((fileinfo.fname[FileNameLen-1] == 'v')&&
 8000c4c:	2b61      	cmp	r3, #97	; 0x61
 8000c4e:	f040 80ac 	bne.w	8000daa <ReadDIRWavFiles+0x252>
			(fileinfo.fname[FileNameLen-3] == 'w'))        /* only we interested with WAV extension files */
 8000c52:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000c56:	3b03      	subs	r3, #3
 8000c58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c5c:	4413      	add	r3, r2
 8000c5e:	7e9b      	ldrb	r3, [r3, #26]
			(fileinfo.fname[FileNameLen-2] == 'a')&&
 8000c60:	2b77      	cmp	r3, #119	; 0x77
 8000c62:	f040 80a2 	bne.w	8000daa <ReadDIRWavFiles+0x252>
		{
			if(f_open(&USBHFile, fileinfo.fname , FA_READ) != FR_OK)
 8000c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6a:	331a      	adds	r3, #26
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4858      	ldr	r0, [pc, #352]	; (8000dd4 <ReadDIRWavFiles+0x27c>)
 8000c72:	f00e fb8b 	bl	800f38c <f_open>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <ReadDIRWavFiles+0x12a>
				return -1 ;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	e09e      	b.n	8000dc0 <ReadDIRWavFiles+0x268>

			if(f_read(&USBHFile,Buffer ,50 ,&ReadNumOfButes) != FR_OK)
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	f107 010c 	add.w	r1, r7, #12
 8000c8a:	2232      	movs	r2, #50	; 0x32
 8000c8c:	4851      	ldr	r0, [pc, #324]	; (8000dd4 <ReadDIRWavFiles+0x27c>)
 8000c8e:	f00e fef7 	bl	800fa80 <f_read>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <ReadDIRWavFiles+0x146>
				return -1 ;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	e090      	b.n	8000dc0 <ReadDIRWavFiles+0x268>

    	  	memcpy( FileStruct[IndexFile].FileMark,Buffer , 4);
 8000c9e:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	015b      	lsls	r3, r3, #5
 8000ca4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000ca8:	4413      	add	r3, r2
 8000caa:	461a      	mov	r2, r3
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6013      	str	r3, [r2, #0]
    	  	FileStruct[IndexFile].FileMark[4] = 0;
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	711a      	strb	r2, [r3, #4]
    	  	memcpy(FileStruct[IndexFile].FileType,Buffer+8,3);
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000cce:	4413      	add	r3, r2
 8000cd0:	1d58      	adds	r0, r3, #5
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f00f ffae 	bl	8010c3c <memcpy>
    	  	FileStruct[IndexFile].FileType[3] = 0;
 8000ce0:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	721a      	strb	r2, [r3, #8]
    	  	FileStruct[IndexFile].SampleRate = *(uint32_t*)(Buffer+24);
 8000cf0:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	015b      	lsls	r3, r3, #5
 8000cf6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	6992      	ldr	r2, [r2, #24]
 8000d02:	619a      	str	r2, [r3, #24]
    	  	FileStruct[IndexFile].BitPerSample = *(uint16_t *)(Buffer+34);
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	015b      	lsls	r3, r3, #5
 8000d0a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d0e:	4413      	add	r3, r2
 8000d10:	f107 020c 	add.w	r2, r7, #12
 8000d14:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000d16:	839a      	strh	r2, [r3, #28]
    	  	FileStruct[IndexFile].NumOfChannels = *(uint16_t *)(Buffer+22);
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	015b      	lsls	r3, r3, #5
 8000d1e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d22:	4413      	add	r3, r2
 8000d24:	f107 020c 	add.w	r2, r7, #12
 8000d28:	8ad2      	ldrh	r2, [r2, #22]
 8000d2a:	829a      	strh	r2, [r3, #20]
    	  	FileStruct[IndexFile].FileLength = *(uint32_t *)(Buffer+4);
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	015b      	lsls	r3, r3, #5
 8000d32:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d36:	4413      	add	r3, r2
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	6852      	ldr	r2, [r2, #4]
 8000d3e:	611a      	str	r2, [r3, #16]

    	  	FileStruct[IndexFile].FileName =    (char *)malloc(FileNameLen); ;
 8000d40:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	015b      	lsls	r3, r3, #5
 8000d4a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d4e:	18d4      	adds	r4, r2, r3
 8000d50:	4608      	mov	r0, r1
 8000d52:	f00f ff63 	bl	8010c1c <malloc>
 8000d56:	4603      	mov	r3, r0
 8000d58:	60e3      	str	r3, [r4, #12]

    	  	strcpy(FileStruct[IndexFile].FileName, fileinfo.fname );
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	015b      	lsls	r3, r3, #5
 8000d60:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d64:	4413      	add	r3, r2
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6c:	331a      	adds	r3, #26
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4610      	mov	r0, r2
 8000d72:	f010 f83b 	bl	8010dec <strcpy>
    	  	FileStruct[IndexFile].FileName[FileNameLen]=0;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	015b      	lsls	r3, r3, #5
 8000d7c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000d80:	4413      	add	r3, r2
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000d88:	4413      	add	r3, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]

    	  	if(f_close(&USBHFile) != FR_OK)
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <ReadDIRWavFiles+0x27c>)
 8000d90:	f00f f95e 	bl	8010050 <f_close>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <ReadDIRWavFiles+0x248>
    	  		return -1 ;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e00f      	b.n	8000dc0 <ReadDIRWavFiles+0x268>

    	  	IndexFile++;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <ReadDIRWavFiles+0x278>)
 8000da8:	6013      	str	r3, [r2, #0]
		}


	}while( res == FR_OK);
 8000daa:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f43f af05 	beq.w	8000bbe <ReadDIRWavFiles+0x66>

	*AllDirFiles = FileStruct ;
 8000db4:	463b      	mov	r3, r7
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000dbc:	601a      	str	r2, [r3, #0]
	return 1 ;   /* after successful operation return 1 to caller */
 8000dbe:	2301      	movs	r3, #1

}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20001760 	.word	0x20001760
 8000dd0:	200000c4 	.word	0x200000c4
 8000dd4:	20003850 	.word	0x20003850

08000dd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == MuteExt_Pin)
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d127      	bne.n	8000e38 <HAL_GPIO_EXTI_Callback+0x60>
	{
		if(HAL_GPIO_ReadPin(GPIOG, Mute_Pin))
 8000de8:	2110      	movs	r1, #16
 8000dea:	4824      	ldr	r0, [pc, #144]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000dec:	f001 fd4e 	bl	800288c <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d010      	beq.n	8000e18 <HAL_GPIO_EXTI_Callback+0x40>
		{

			SSD1306_GotoXY (80,26);
 8000df6:	211a      	movs	r1, #26
 8000df8:	2050      	movs	r0, #80	; 0x50
 8000dfa:	f000 fa79 	bl	80012f0 <SSD1306_GotoXY>
			SSD1306_Puts ("      ", &Font_11x18, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	491f      	ldr	r1, [pc, #124]	; (8000e80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000e02:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_GPIO_EXTI_Callback+0xac>)
 8000e04:	f000 fb0a 	bl	800141c <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 8000e08:	f000 f9cc 	bl	80011a4 <SSD1306_UpdateScreen>
			HAL_GPIO_WritePin(GPIOG, Mute_Pin, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2110      	movs	r1, #16
 8000e10:	481a      	ldr	r0, [pc, #104]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e12:	f001 fd53 	bl	80028bc <HAL_GPIO_WritePin>
 8000e16:	e00f      	b.n	8000e38 <HAL_GPIO_EXTI_Callback+0x60>
		}else{

			SSD1306_GotoXY (80,26);
 8000e18:	211a      	movs	r1, #26
 8000e1a:	2050      	movs	r0, #80	; 0x50
 8000e1c:	f000 fa68 	bl	80012f0 <SSD1306_GotoXY>
			SSD1306_Puts ("Mute   ", &Font_11x18, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	4917      	ldr	r1, [pc, #92]	; (8000e80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000e26:	f000 faf9 	bl	800141c <SSD1306_Puts>
			SSD1306_UpdateScreen(); //display
 8000e2a:	f000 f9bb 	bl	80011a4 <SSD1306_UpdateScreen>
			HAL_GPIO_WritePin(GPIOG, Mute_Pin, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e34:	f001 fd42 	bl	80028bc <HAL_GPIO_WritePin>
		}


	}

	if(GPIO_Pin == Next_Pin)
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_EXTI_Callback+0x6c>
	{

		PlayState = State_Next ;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	701a      	strb	r2, [r3, #0]

	}

	if(GPIO_Pin == Previous_Pin)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d102      	bne.n	8000e50 <HAL_GPIO_EXTI_Callback+0x78>
	{

		PlayState = State_Previous ;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	701a      	strb	r2, [r3, #0]

	}

	if(GPIO_Pin == Pause_Pin)
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d10b      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x96>
	{



		if(PlayState == State_Puse )
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d103      	bne.n	8000e68 <HAL_GPIO_EXTI_Callback+0x90>
		PlayState = State_Play ;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_EXTI_Callback+0x96>
		else
		PlayState = State_Puse ;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]



	}

	HAL_Delay(4);
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f000 fe7a 	bl	8001b68 <HAL_Delay>
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	20000008 	.word	0x20000008
 8000e84:	08011358 	.word	0x08011358
 8000e88:	08011360 	.word	0x08011360
 8000e8c:	20001658 	.word	0x20001658

08000e90 <StartRunningWavFile>:


void StartRunningWavFile(uint8_t  fileIndex )
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	HAL_I2S_DMAStop(&hi2s2);
 8000e9a:	482c      	ldr	r0, [pc, #176]	; (8000f4c <StartRunningWavFile+0xbc>)
 8000e9c:	f004 fb76 	bl	800558c <HAL_I2S_DMAStop>
	f_close(&USBHFile);
 8000ea0:	482b      	ldr	r0, [pc, #172]	; (8000f50 <StartRunningWavFile+0xc0>)
 8000ea2:	f00f f8d5 	bl	8010050 <f_close>
	int i = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]

	if(fileIndex == IndexFile)
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <StartRunningWavFile+0xc4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d101      	bne.n	8000eb8 <StartRunningWavFile+0x28>
		fileIndex = 0 ;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]


  	if(f_open(&USBHFile, file[fileIndex].FileName, FA_READ) != FR_OK)
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <StartRunningWavFile+0xc8>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	015b      	lsls	r3, r3, #5
 8000ec0:	4413      	add	r3, r2
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4821      	ldr	r0, [pc, #132]	; (8000f50 <StartRunningWavFile+0xc0>)
 8000eca:	f00e fa5f 	bl	800f38c <f_open>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <StartRunningWavFile+0x48>
  		Error_Handler();
 8000ed4:	f000 f85e 	bl	8000f94 <Error_Handler>


    MX_I2S2_Init(file[fileIndex].SampleRate);
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <StartRunningWavFile+0xc8>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	4413      	add	r3, r2
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fced 	bl	80008c4 <MX_I2S2_Init>

	SSD1306_Clear();
 8000eea:	f000 fabc 	bl	8001466 <SSD1306_Clear>
	SSD1306_GotoXY (0,0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f9fd 	bl	80012f0 <SSD1306_GotoXY>
	SSD1306_Puts (file[fileIndex].FileName, &Font_7x10, 1);
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <StartRunningWavFile+0xc8>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	015b      	lsls	r3, r3, #5
 8000efe:	4413      	add	r3, r2
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4915      	ldr	r1, [pc, #84]	; (8000f5c <StartRunningWavFile+0xcc>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa88 	bl	800141c <SSD1306_Puts>

	SSD1306_GotoXY (0,26);
 8000f0c:	211a      	movs	r1, #26
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f9ee 	bl	80012f0 <SSD1306_GotoXY>
	SSD1306_Puts ("Run   ", &Font_11x18, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	4912      	ldr	r1, [pc, #72]	; (8000f60 <StartRunningWavFile+0xd0>)
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <StartRunningWavFile+0xd4>)
 8000f1a:	f000 fa7f 	bl	800141c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8000f1e:	f000 f941 	bl	80011a4 <SSD1306_UpdateScreen>
  	PlayState = State_Idel;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <StartRunningWavFile+0xd8>)
 8000f24:	2205      	movs	r2, #5
 8000f26:	701a      	strb	r2, [r3, #0]

	f_read(&USBHFile, Buffer , sizeof(Buffer), &i);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
 8000f30:	490e      	ldr	r1, [pc, #56]	; (8000f6c <StartRunningWavFile+0xdc>)
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <StartRunningWavFile+0xc0>)
 8000f34:	f00e fda4 	bl	800fa80 <f_read>
	HAL_I2S_Transmit_DMA(&hi2s2, Buffer, sizeof(Buffer)/2);
 8000f38:	f44f 627d 	mov.w	r2, #4048	; 0xfd0
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <StartRunningWavFile+0xdc>)
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <StartRunningWavFile+0xbc>)
 8000f40:	f004 f986 	bl	8005250 <HAL_I2S_Transmit_DMA>

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200037b4 	.word	0x200037b4
 8000f50:	20003850 	.word	0x20003850
 8000f54:	200000c4 	.word	0x200000c4
 8000f58:	200000c8 	.word	0x200000c8
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	08011368 	.word	0x08011368
 8000f68:	20001658 	.word	0x20001658
 8000f6c:	200017b4 	.word	0x200017b4

08000f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f82:	f000 fdd1 	bl	8001b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40010000 	.word	0x40010000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>

08000f9e <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000fae:	2226      	movs	r2, #38	; 0x26
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f000 fabe 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2078      	movs	r0, #120	; 0x78
 8000fbe:	f000 fab9 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2078      	movs	r0, #120	; 0x78
 8000fca:	f000 fab3 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f000 faae 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	; 0x78
 8000fe0:	f000 faa8 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	; 0x78
 8000fea:	f000 faa3 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f000 fa9e 	bl	8001534 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000ff8:	222f      	movs	r2, #47	; 0x2f
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	; 0x78
 8000ffe:	f000 fa99 	bl	8001534 <ssd1306_I2C_Write>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800100e:	222e      	movs	r2, #46	; 0x2e
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa8e 	bl	8001534 <ssd1306_I2C_Write>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001022:	f000 fa29 	bl	8001478 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001026:	f644 6320 	movw	r3, #20000	; 0x4e20
 800102a:	2201      	movs	r2, #1
 800102c:	2178      	movs	r1, #120	; 0x78
 800102e:	485b      	ldr	r0, [pc, #364]	; (800119c <SSD1306_Init+0x180>)
 8001030:	f003 fc1c 	bl	800486c <HAL_I2C_IsDeviceReady>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e0a9      	b.n	8001192 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800103e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001042:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001044:	e002      	b.n	800104c <SSD1306_Init+0x30>
		p--;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3b01      	subs	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001052:	22ae      	movs	r2, #174	; 0xae
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fa6c 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 fa67 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001066:	2210      	movs	r2, #16
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 fa62 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001070:	22b0      	movs	r2, #176	; 0xb0
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	; 0x78
 8001076:	f000 fa5d 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800107a:	22c8      	movs	r2, #200	; 0xc8
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f000 fa58 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa53 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800108e:	2210      	movs	r2, #16
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 fa4e 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 fa49 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010a2:	2281      	movs	r2, #129	; 0x81
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 fa44 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 fa3f 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010b6:	22a1      	movs	r2, #161	; 0xa1
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fa3a 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010c0:	22a6      	movs	r2, #166	; 0xa6
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 fa35 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010ca:	22a8      	movs	r2, #168	; 0xa8
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 fa30 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010d4:	223f      	movs	r2, #63	; 0x3f
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	; 0x78
 80010da:	f000 fa2b 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010de:	22a4      	movs	r2, #164	; 0xa4
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	; 0x78
 80010e4:	f000 fa26 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010e8:	22d3      	movs	r2, #211	; 0xd3
 80010ea:	2100      	movs	r1, #0
 80010ec:	2078      	movs	r0, #120	; 0x78
 80010ee:	f000 fa21 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	; 0x78
 80010f8:	f000 fa1c 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010fc:	22d5      	movs	r2, #213	; 0xd5
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	; 0x78
 8001102:	f000 fa17 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001106:	22f0      	movs	r2, #240	; 0xf0
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	; 0x78
 800110c:	f000 fa12 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001110:	22d9      	movs	r2, #217	; 0xd9
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	; 0x78
 8001116:	f000 fa0d 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800111a:	2222      	movs	r2, #34	; 0x22
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	; 0x78
 8001120:	f000 fa08 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001124:	22da      	movs	r2, #218	; 0xda
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f000 fa03 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800112e:	2212      	movs	r2, #18
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	; 0x78
 8001134:	f000 f9fe 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001138:	22db      	movs	r2, #219	; 0xdb
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 f9f9 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001142:	2220      	movs	r2, #32
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 f9f4 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800114c:	228d      	movs	r2, #141	; 0x8d
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	; 0x78
 8001152:	f000 f9ef 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001156:	2214      	movs	r2, #20
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	; 0x78
 800115c:	f000 f9ea 	bl	8001534 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001160:	22af      	movs	r2, #175	; 0xaf
 8001162:	2100      	movs	r1, #0
 8001164:	2078      	movs	r0, #120	; 0x78
 8001166:	f000 f9e5 	bl	8001534 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800116a:	222e      	movs	r2, #46	; 0x2e
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	; 0x78
 8001170:	f000 f9e0 	bl	8001534 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f843 	bl	8001200 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800117a:	f000 f813 	bl	80011a4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SSD1306_Init+0x184>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SSD1306_Init+0x184>)
 8001186:	2200      	movs	r2, #0
 8001188:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SSD1306_Init+0x184>)
 800118c:	2201      	movs	r2, #1
 800118e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001190:	2301      	movs	r3, #1
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000165c 	.word	0x2000165c
 80011a0:	200004cc 	.word	0x200004cc

080011a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e01d      	b.n	80011ec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	3b50      	subs	r3, #80	; 0x50
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 f9ba 	bl	8001534 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	; 0x78
 80011c6:	f000 f9b5 	bl	8001534 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011ca:	2210      	movs	r2, #16
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	; 0x78
 80011d0:	f000 f9b0 	bl	8001534 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	01db      	lsls	r3, r3, #7
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <SSD1306_UpdateScreen+0x58>)
 80011da:	441a      	add	r2, r3
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	2078      	movs	r0, #120	; 0x78
 80011e2:	f000 f95f 	bl	80014a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3301      	adds	r3, #1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d9de      	bls.n	80011b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000cc 	.word	0x200000cc

08001200 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <SSD1306_Fill+0x14>
 8001210:	2300      	movs	r3, #0
 8001212:	e000      	b.n	8001216 <SSD1306_Fill+0x16>
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121a:	4619      	mov	r1, r3
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <SSD1306_Fill+0x2c>)
 800121e:	f00f fd1b 	bl	8010c58 <memset>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000cc 	.word	0x200000cc

08001230 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	460b      	mov	r3, r1
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	70fb      	strb	r3, [r7, #3]
	if (
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d848      	bhi.n	80012da <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001248:	88bb      	ldrh	r3, [r7, #4]
 800124a:	2b3f      	cmp	r3, #63	; 0x3f
 800124c:	d845      	bhi.n	80012da <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <SSD1306_DrawPixel+0xb8>)
 8001250:	791b      	ldrb	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11a      	bne.n	80012a0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	b298      	uxth	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	01db      	lsls	r3, r3, #7
 8001276:	4413      	add	r3, r2
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <SSD1306_DrawPixel+0xbc>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	b25a      	sxtb	r2, r3
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	b25b      	sxtb	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b259      	sxtb	r1, r3
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	4603      	mov	r3, r0
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	4413      	add	r3, r2
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <SSD1306_DrawPixel+0xbc>)
 800129c:	54d1      	strb	r1, [r2, r3]
 800129e:	e01d      	b.n	80012dc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4603      	mov	r3, r0
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	4413      	add	r3, r2
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <SSD1306_DrawPixel+0xbc>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	4013      	ands	r3, r2
 80012c8:	b259      	sxtb	r1, r3
 80012ca:	88fa      	ldrh	r2, [r7, #6]
 80012cc:	4603      	mov	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	4413      	add	r3, r2
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SSD1306_DrawPixel+0xbc>)
 80012d6:	54d1      	strb	r1, [r2, r3]
 80012d8:	e000      	b.n	80012dc <SSD1306_DrawPixel+0xac>
		return;
 80012da:	bf00      	nop
	}
}
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200004cc 	.word	0x200004cc
 80012ec:	200000cc 	.word	0x200000cc

080012f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <SSD1306_GotoXY+0x28>)
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <SSD1306_GotoXY+0x28>)
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	8053      	strh	r3, [r2, #2]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200004cc 	.word	0x200004cc

0800131c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <SSD1306_Putc+0xfc>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
	if (
 8001338:	2b7f      	cmp	r3, #127	; 0x7f
 800133a:	dc07      	bgt.n	800134c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <SSD1306_Putc+0xfc>)
 800133e:	885b      	ldrh	r3, [r3, #2]
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001348:	2b3f      	cmp	r3, #63	; 0x3f
 800134a:	dd01      	ble.n	8001350 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e05e      	b.n	800140e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e04b      	b.n	80013ee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	3b20      	subs	r3, #32
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	7849      	ldrb	r1, [r1, #1]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4619      	mov	r1, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	440b      	add	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e030      	b.n	80013dc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SSD1306_Putc+0xfc>)
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	b298      	uxth	r0, r3
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <SSD1306_Putc+0xfc>)
 8001398:	885a      	ldrh	r2, [r3, #2]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	79ba      	ldrb	r2, [r7, #6]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff ff43 	bl	8001230 <SSD1306_DrawPixel>
 80013aa:	e014      	b.n	80013d6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <SSD1306_Putc+0xfc>)
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	b298      	uxth	r0, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <SSD1306_Putc+0xfc>)
 80013ba:	885a      	ldrh	r2, [r3, #2]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b299      	uxth	r1, r3
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf0c      	ite	eq
 80013ca:	2301      	moveq	r3, #1
 80013cc:	2300      	movne	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	f7ff ff2d 	bl	8001230 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	3301      	adds	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d3c8      	bcc.n	800137a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	461a      	mov	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d3ad      	bcc.n	8001356 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <SSD1306_Putc+0xfc>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <SSD1306_Putc+0xfc>)
 800140a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800140c:	79fb      	ldrb	r3, [r7, #7]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200004cc 	.word	0x200004cc

0800141c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800142a:	e012      	b.n	8001452 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff71 	bl	800131c <SSD1306_Putc>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d002      	beq.n	800144c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	e008      	b.n	800145e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1e8      	bne.n	800142c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	781b      	ldrb	r3, [r3, #0]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fec8 	bl	8001200 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001470:	f7ff fe98 	bl	80011a4 <SSD1306_UpdateScreen>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <ssd1306_I2C_Init+0x28>)
 8001480:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001482:	e002      	b.n	800148a <ssd1306_I2C_Init+0x12>
		p--;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
	while(p>0)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f9      	bne.n	8001484 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	0003d090 	.word	0x0003d090

080014a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0c7      	sub	sp, #284	; 0x11c
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4639      	mov	r1, r7
 80014b0:	600a      	str	r2, [r1, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	4622      	mov	r2, r4
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	4602      	mov	r2, r0
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	460a      	mov	r2, r1
 80014c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	1dba      	adds	r2, r7, #6
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014d6:	e010      	b.n	80014fa <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80014d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014dc:	463a      	mov	r2, r7
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	441a      	add	r2, r3
 80014e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014e6:	3301      	adds	r3, #1
 80014e8:	7811      	ldrb	r1, [r2, #0]
 80014ea:	f107 020c 	add.w	r2, r7, #12
 80014ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80014f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014f4:	3301      	adds	r3, #1
 80014f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014fe:	b29b      	uxth	r3, r3
 8001500:	1d3a      	adds	r2, r7, #4
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8e7      	bhi.n	80014d8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1,10);
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b299      	uxth	r1, r3
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	200a      	movs	r0, #10
 800151c:	9000      	str	r0, [sp, #0]
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <ssd1306_I2C_WriteMulti+0x8c>)
 8001520:	f003 f8a6 	bl	8004670 <HAL_I2C_Master_Transmit>
}
 8001524:	bf00      	nop
 8001526:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	2000165c 	.word	0x2000165c

08001534 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	460b      	mov	r3, r1
 8001540:	71bb      	strb	r3, [r7, #6]
 8001542:	4613      	mov	r3, r2
 8001544:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800154a:	797b      	ldrb	r3, [r7, #5]
 800154c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2,10);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	b299      	uxth	r1, r3
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	230a      	movs	r3, #10
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2302      	movs	r3, #2
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <ssd1306_I2C_Write+0x38>)
 800155e:	f003 f887 	bl	8004670 <HAL_I2C_Master_Transmit>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000165c 	.word	0x2000165c

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_I2C_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_I2C_MspInit+0x8c>)
 800161a:	f000 ff8b 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2230      	movs	r2, #48	; 0x30
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f00f faf1 	bl	8010c58 <memset>
  if(hi2s->Instance==SPI2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 809c 	bne.w	80017ba <HAL_I2S_MspInit+0x16a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800168a:	2306      	movs	r3, #6
 800168c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f9f4 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800169e:	f7ff fc79 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f6:	2308      	movs	r3, #8
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001706:	2305      	movs	r3, #5
 8001708:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800170e:	4619      	mov	r1, r3
 8001710:	482e      	ldr	r0, [pc, #184]	; (80017cc <HAL_I2S_MspInit+0x17c>)
 8001712:	f000 ff0f 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001728:	2305      	movs	r3, #5
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001730:	4619      	mov	r1, r3
 8001732:	4827      	ldr	r0, [pc, #156]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001734:	f000 fefe 	bl	8002534 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_I2S_MspInit+0x188>)
 800173c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001756:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800175a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800175e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001766:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001774:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001778:	2204      	movs	r2, #4
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800177e:	2203      	movs	r2, #3
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001784:	2200      	movs	r2, #0
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 8001790:	f000 faf0 	bl	8001d74 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800179a:	f7ff fbfb 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2024      	movs	r0, #36	; 0x24
 80017b0:	f000 fab6 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017b4:	2024      	movs	r0, #36	; 0x24
 80017b6:	f000 facf 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3758      	adds	r7, #88	; 0x58
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40003800 	.word	0x40003800
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020400 	.word	0x40020400
 80017d4:	20003754 	.word	0x20003754
 80017d8:	40026070 	.word	0x40026070

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12c      	bne.n	8001858 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001836:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001848:	2307      	movs	r3, #7
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x8c>)
 8001854:	f000 fe6e 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40011000 	.word	0x40011000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	2019      	movs	r0, #25
 8001882:	f000 fa4d 	bl	8001d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001886:	2019      	movs	r0, #25
 8001888:	f000 fa66 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_InitTick+0xa4>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_InitTick+0xa4>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6453      	str	r3, [r2, #68]	; 0x44
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_InitTick+0xa4>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a8:	f107 0210 	add.w	r2, r7, #16
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 f8b2 	bl	8006a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018b8:	f005 f89c 	bl	80069f4 <HAL_RCC_GetPCLK2Freq>
 80018bc:	4603      	mov	r3, r0
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_InitTick+0xa8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	3b01      	subs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_InitTick+0xac>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_InitTick+0xb0>)
 80018d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_InitTick+0xac>)
 80018d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_InitTick+0xac>)
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_InitTick+0xac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_InitTick+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_InitTick+0xac>)
 80018f2:	f005 fae1 	bl	8006eb8 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_InitTick+0xac>)
 80018fe:	f005 fb35 	bl	8006f6c <HAL_TIM_Base_Start_IT>
 8001902:	4603      	mov	r3, r0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	431bde83 	.word	0x431bde83
 8001918:	200037fc 	.word	0x200037fc
 800191c:	40010000 	.word	0x40010000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800197a:	2001      	movs	r0, #1
 800197c:	f000 ffb8 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001988:	2002      	movs	r0, #2
 800198a:	f000 ffb1 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}

08001992 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001996:	2004      	movs	r0, #4
 8001998:	f000 ffaa 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019a4:	2008      	movs	r0, #8
 80019a6:	f000 ffa3 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Stream4_IRQHandler+0x10>)
 80019b6:	f000 fb53 	bl	8002060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20003754 	.word	0x20003754

080019c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019ca:	f005 fb3f 	bl	800704c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200037fc 	.word	0x200037fc

080019d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <SPI2_IRQHandler+0x10>)
 80019de:	f003 ffaf 	bl	8005940 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200037b4 	.word	0x200037b4

080019ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <OTG_FS_IRQHandler+0x10>)
 80019f2:	f001 f9ff 	bl	8002df4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20005cc0 	.word	0x20005cc0

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f00f f8ca 	bl	8010bc8 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20030000 	.word	0x20030000
 8001a60:	00004000 	.word	0x00004000
 8001a64:	200004d4 	.word	0x200004d4
 8001a68:	20005fd8 	.word	0x20005fd8

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aba:	f7ff ffd7 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f00f f889 	bl	8010bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7fe fd4f 	bl	8000564 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ac8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001ad4:	08014060 	.word	0x08014060
  ldr r2, =_sbss
 8001ad8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001adc:	20005fd4 	.word	0x20005fd4

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f8fc 	bl	8001d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff feaa 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fd2a 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000020 	.word	0x20000020
 8001b4c:	20003844 	.word	0x20003844

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20003844 	.word	0x20003844

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000020 	.word	0x20000020

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff4c 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d32:	f7ff ff61 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7ff ffb1 	bl	8001ca4 <NVIC_EncodePriority>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff80 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff54 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fee6 	bl	8001b50 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e099      	b.n	8001ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	e00f      	b.n	8001dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff fecd 	bl	8001b50 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d908      	bls.n	8001dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e078      	b.n	8001ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_DMA_Init+0x158>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4313      	orrs	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f023 0307 	bic.w	r3, r3, #7
 8001e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d117      	bne.n	8001e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fadf 	bl	800243c <DMA_CheckFifoParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e92:	2301      	movs	r3, #1
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa96 	bl	80023d0 <DMA_CalcBaseAndBitshift>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	f010803f 	.word	0xf010803f

08001ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Start_IT+0x26>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e040      	b.n	8001f78 <HAL_DMA_Start_IT+0xa8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d12f      	bne.n	8001f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa28 	bl	8002374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0216 	orr.w	r2, r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e005      	b.n	8001f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8e:	f7ff fddf 	bl	8001b50 <HAL_GetTick>
 8001f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e052      	b.n	8002058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0216 	bic.w	r2, r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_DMA_Abort+0x62>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	e013      	b.n	800202c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002004:	f7ff fda4 	bl	8001b50 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b05      	cmp	r3, #5
 8002010:	d90c      	bls.n	800202c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e015      	b.n	8002058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e4      	bne.n	8002004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_DMA_IRQHandler+0x258>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a92      	ldr	r2, [pc, #584]	; (80022bc <HAL_DMA_IRQHandler+0x25c>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2208      	movs	r2, #8
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01a      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2208      	movs	r2, #8
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2201      	movs	r2, #1
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d012      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0202 	orr.w	r2, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2204      	movs	r2, #4
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2204      	movs	r2, #4
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f043 0204 	orr.w	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2210      	movs	r2, #16
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d043      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03c      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2210      	movs	r2, #16
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d024      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
 800218e:	e01f      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e016      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2220      	movs	r2, #32
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808e 	beq.w	80022fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8086 	beq.w	80022fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2220      	movs	r2, #32
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d136      	bne.n	8002278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0216 	bic.w	r2, r2, #22
 8002218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <HAL_DMA_IRQHandler+0x1da>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0208 	bic.w	r2, r2, #8
 8002248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	223f      	movs	r2, #63	; 0x3f
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07d      	beq.n	800236a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
        }
        return;
 8002276:	e078      	b.n	800236a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01c      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	2b00      	cmp	r3, #0
 800229a:	d030      	beq.n	80022fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e02b      	b.n	80022fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d027      	beq.n	80022fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e022      	b.n	80022fe <HAL_DMA_IRQHandler+0x29e>
 80022b8:	20000018 	.word	0x20000018
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0210 	bic.w	r2, r2, #16
 80022dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	2b00      	cmp	r3, #0
 8002304:	d032      	beq.n	800236c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d022      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	429a      	cmp	r2, r3
 8002334:	d307      	bcc.n	8002346 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f2      	bne.n	800232a <HAL_DMA_IRQHandler+0x2ca>
 8002344:	e000      	b.n	8002348 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002346:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
 8002368:	e000      	b.n	800236c <HAL_DMA_IRQHandler+0x30c>
        return;
 800236a:	bf00      	nop
    }
  }
}
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop

08002374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d108      	bne.n	80023b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023b2:	e007      	b.n	80023c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b10      	subs	r3, #16
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <DMA_CalcBaseAndBitshift+0x64>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d909      	bls.n	8002412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	1d1a      	adds	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
 8002410:	e007      	b.n	8002422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	aaaaaaab 	.word	0xaaaaaaab
 8002438:	08013bf4 	.word	0x08013bf4

0800243c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0x5a>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d856      	bhi.n	800250a <DMA_CheckFifoParam+0xce>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <DMA_CheckFifoParam+0x28>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002487 	.word	0x08002487
 800246c:	08002475 	.word	0x08002475
 8002470:	0800250b 	.word	0x0800250b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d046      	beq.n	800250e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e043      	b.n	800250e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248e:	d140      	bne.n	8002512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e03d      	b.n	8002512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d121      	bne.n	80024e4 <DMA_CheckFifoParam+0xa8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d837      	bhi.n	8002516 <DMA_CheckFifoParam+0xda>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <DMA_CheckFifoParam+0x70>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024bd 	.word	0x080024bd
 80024b8:	080024d5 	.word	0x080024d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e030      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d025      	beq.n	800251a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e022      	b.n	800251a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024dc:	d11f      	bne.n	800251e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024e2:	e01c      	b.n	800251e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d903      	bls.n	80024f2 <DMA_CheckFifoParam+0xb6>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d003      	beq.n	80024f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f0:	e018      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      break;
 80024f6:	e015      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e00b      	b.n	8002522 <DMA_CheckFifoParam+0xe6>
      break;
 800250a:	bf00      	nop
 800250c:	e00a      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e008      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e006      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e004      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;   
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
    }
  } 
  
  return status; 
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e177      	b.n	8002840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 8166 	bne.w	800283a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002582:	2b02      	cmp	r3, #2
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80c0 	beq.w	800283a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_GPIO_Init+0x328>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_GPIO_Init+0x32c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d037      	beq.n	8002772 <HAL_GPIO_Init+0x23e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x330>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d031      	beq.n	800276e <HAL_GPIO_Init+0x23a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x334>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x236>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x338>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x232>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x33c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x22e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x340>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x22a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x344>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x350>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x21a>
 800274a:	2309      	movs	r3, #9
 800274c:	e012      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800274e:	230a      	movs	r3, #10
 8002750:	e010      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002752:	2308      	movs	r3, #8
 8002754:	e00e      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002756:	2307      	movs	r3, #7
 8002758:	e00c      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275a:	2306      	movs	r3, #6
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800275e:	2305      	movs	r3, #5
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x240>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	; (800285c <HAL_GPIO_Init+0x328>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_GPIO_Init+0x354>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_GPIO_Init+0x354>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_GPIO_Init+0x354>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f ae84 	bls.w	8002550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40021400 	.word	0x40021400
 8002878:	40021800 	.word	0x40021800
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40022000 	.word	0x40022000
 8002884:	40022400 	.word	0x40022400
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fa62 	bl	8000dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b08f      	sub	sp, #60	; 0x3c
 8002924:	af0a      	add	r7, sp, #40	; 0x28
 8002926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e054      	b.n	80029dc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f00d fe6f 	bl	8010630 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f005 f8b3 	bl	8007adc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	687e      	ldr	r6, [r7, #4]
 800297e:	466d      	mov	r5, sp
 8002980:	f106 0410 	add.w	r4, r6, #16
 8002984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002990:	e885 0003 	stmia.w	r5, {r0, r1}
 8002994:	1d33      	adds	r3, r6, #4
 8002996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f005 f82d 	bl	80079f8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f005 f8aa 	bl	8007afe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	687e      	ldr	r6, [r7, #4]
 80029b2:	466d      	mov	r5, sp
 80029b4:	f106 0410 	add.w	r4, r6, #16
 80029b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c8:	1d33      	adds	r3, r6, #4
 80029ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f005 f9bd 	bl	8007d4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	70fb      	strb	r3, [r7, #3]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70bb      	strb	r3, [r7, #2]
 80029fa:	4613      	mov	r3, r2
 80029fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_HCD_HC_Init+0x28>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e076      	b.n	8002afa <HAL_HCD_HC_Init+0x116>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	333d      	adds	r3, #61	; 0x3d
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3338      	adds	r3, #56	; 0x38
 8002a34:	787a      	ldrb	r2, [r7, #1]
 8002a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3340      	adds	r3, #64	; 0x40
 8002a46:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a48:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3339      	adds	r3, #57	; 0x39
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	333f      	adds	r3, #63	; 0x3f
 8002a6a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	78ba      	ldrb	r2, [r7, #2]
 8002a74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a78:	b2d0      	uxtb	r0, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	333a      	adds	r3, #58	; 0x3a
 8002a86:	4602      	mov	r2, r0
 8002a88:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da09      	bge.n	8002aa6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	333b      	adds	r3, #59	; 0x3b
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e008      	b.n	8002ab8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	333b      	adds	r3, #59	; 0x3b
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	333c      	adds	r3, #60	; 0x3c
 8002ac6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	787c      	ldrb	r4, [r7, #1]
 8002ad2:	78ba      	ldrb	r2, [r7, #2]
 8002ad4:	78f9      	ldrb	r1, [r7, #3]
 8002ad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	f005 fab2 	bl	8008050 <USB_HC_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}

08002b02 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_HCD_HC_Halt+0x1e>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e00f      	b.n	8002b40 <HAL_HCD_HC_Halt+0x3e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 fcee 	bl	8008512 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	70fb      	strb	r3, [r7, #3]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70bb      	strb	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333b      	adds	r3, #59	; 0x3b
 8002b70:	78ba      	ldrb	r2, [r7, #2]
 8002b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	333f      	adds	r3, #63	; 0x3f
 8002b82:	787a      	ldrb	r2, [r7, #1]
 8002b84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b86:	7c3b      	ldrb	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3342      	adds	r3, #66	; 0x42
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333d      	adds	r3, #61	; 0x3d
 8002bac:	7f3a      	ldrb	r2, [r7, #28]
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e008      	b.n	8002bc4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3342      	adds	r3, #66	; 0x42
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	f200 80c6 	bhi.w	8002d58 <HAL_HCD_HC_SubmitRequest+0x210>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002d45 	.word	0x08002d45
 8002bdc:	08002c49 	.word	0x08002c49
 8002be0:	08002cc7 	.word	0x08002cc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002be4:	7c3b      	ldrb	r3, [r7, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 80b8 	bne.w	8002d5c <HAL_HCD_HC_SubmitRequest+0x214>
 8002bec:	78bb      	ldrb	r3, [r7, #2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 80b4 	bne.w	8002d5c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002bf4:	8b3b      	ldrh	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3355      	adds	r3, #85	; 0x55
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3355      	adds	r3, #85	; 0x55
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3342      	adds	r3, #66	; 0x42
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c32:	e093      	b.n	8002d5c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3342      	adds	r3, #66	; 0x42
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
      break;
 8002c46:	e089      	b.n	8002d5c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c48:	78bb      	ldrb	r3, [r7, #2]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11d      	bne.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3355      	adds	r3, #85	; 0x55
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3342      	adds	r3, #66	; 0x42
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c74:	e073      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3342      	adds	r3, #66	; 0x42
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
      break;
 8002c88:	e069      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3342      	adds	r3, #66	; 0x42
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
      break;
 8002cb0:	e055      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3342      	adds	r3, #66	; 0x42
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      break;
 8002cc4:	e04b      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cc6:	78bb      	ldrb	r3, [r7, #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11d      	bne.n	8002d08 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3355      	adds	r3, #85	; 0x55
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3342      	adds	r3, #66	; 0x42
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cf2:	e034      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3342      	adds	r3, #66	; 0x42
 8002d02:	2202      	movs	r2, #2
 8002d04:	701a      	strb	r2, [r3, #0]
      break;
 8002d06:	e02a      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3354      	adds	r3, #84	; 0x54
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3342      	adds	r3, #66	; 0x42
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
      break;
 8002d2e:	e016      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3342      	adds	r3, #66	; 0x42
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
      break;
 8002d42:	e00c      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3342      	adds	r3, #66	; 0x42
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d5c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3344      	adds	r3, #68	; 0x44
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	8b3a      	ldrh	r2, [r7, #24]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	202c      	movs	r0, #44	; 0x2c
 8002d78:	fb00 f303 	mul.w	r3, r0, r3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334c      	adds	r3, #76	; 0x4c
 8002d80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3350      	adds	r3, #80	; 0x50
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3339      	adds	r3, #57	; 0x39
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3361      	adds	r3, #97	; 0x61
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	222c      	movs	r2, #44	; 0x2c
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	18d1      	adds	r1, r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	f005 fa42 	bl	800826c <USB_HC_StartXfer>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 ff5b 	bl	8007cc6 <USB_GetMode>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 80ef 	bne.w	8002ff6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 ff3f 	bl	8007ca0 <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80e5 	beq.w	8002ff4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 ff36 	bl	8007ca0 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3e:	d104      	bne.n	8002e4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 ff26 	bl	8007ca0 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5e:	d104      	bne.n	8002e6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 ff16 	bl	8007ca0 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7e:	d104      	bne.n	8002e8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 ff06 	bl	8007ca0 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d103      	bne.n	8002ea6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fef8 	bl	8007ca0 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eba:	d115      	bne.n	8002ee8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ec4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f00d fc1a 	bl	8010710 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 ffee 	bl	8007ec4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f004 fed7 	bl	8007ca0 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d102      	bne.n	8002f04 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 f9ff 	bl	8004302 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f004 fec9 	bl	8007ca0 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d106      	bne.n	8002f26 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f00d fbdd 	bl	80106d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 feb8 	bl	8007ca0 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d101      	bne.n	8002f3e <HAL_HCD_IRQHandler+0x14a>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_HCD_IRQHandler+0x14c>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0210 	bic.w	r2, r2, #16
 8002f52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f001 f902 	bl	800415e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0210 	orr.w	r2, r2, #16
 8002f68:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fe96 	bl	8007ca0 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f7e:	d13a      	bne.n	8002ff6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f005 fab3 	bl	80084f0 <USB_HC_ReadInterrupt>
 8002f8a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e025      	b.n	8002fde <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbc:	d106      	bne.n	8002fcc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8ab 	bl	8003120 <HCD_HC_IN_IRQHandler>
 8002fca:	e005      	b.n	8002fd8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fcc6 	bl	8003964 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3d4      	bcc.n	8002f92 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	e000      	b.n	8002ff6 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ff4:	bf00      	nop
    }
  }
}
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_HCD_Start+0x16>
 800300e:	2302      	movs	r3, #2
 8003010:	e013      	b.n	800303a <HAL_HCD_Start+0x3e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fd4b 	bl	8007aba <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f004 ffae 	bl	8007f8c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_HCD_Stop+0x16>
 8003054:	2302      	movs	r3, #2
 8003056:	e00d      	b.n	8003074 <HAL_HCD_Stop+0x32>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fbad 	bl	80087c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 ff55 	bl	8007f38 <USB_ResetPort>
 800308e:	4603      	mov	r3, r0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3360      	adds	r3, #96	; 0x60
 80030b2:	781b      	ldrb	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3350      	adds	r3, #80	; 0x50
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 ff99 	bl	800802c <USB_GetCurrentFrame>
 80030fa:	4603      	mov	r3, r0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f004 ff74 	bl	8007ffe <USB_GetHostSpeed>
 8003116:	4603      	mov	r3, r0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d119      	bne.n	8003184 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2304      	movs	r3, #4
 8003160:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	0151      	lsls	r1, r2, #5
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	440a      	add	r2, r1
 8003178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	60d3      	str	r3, [r2, #12]
 8003182:	e101      	b.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d12b      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3361      	adds	r3, #97	; 0x61
 80031be:	2207      	movs	r2, #7
 80031c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f005 f990 	bl	8008512 <USB_HC_Halt>
 80031f2:	e0c9      	b.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b20      	cmp	r3, #32
 8003208:	d109      	bne.n	800321e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	461a      	mov	r2, r3
 8003218:	2320      	movs	r3, #32
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	e0b4      	b.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d133      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	0151      	lsls	r1, r2, #5
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	440a      	add	r2, r1
 800324a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800324e:	f043 0302 	orr.w	r3, r3, #2
 8003252:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3361      	adds	r3, #97	; 0x61
 8003262:	2205      	movs	r2, #5
 8003264:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	461a      	mov	r2, r3
 8003274:	2310      	movs	r3, #16
 8003276:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	461a      	mov	r2, r3
 8003286:	2308      	movs	r3, #8
 8003288:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f005 f93c 	bl	8008512 <USB_HC_Halt>
 800329a:	e075      	b.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d134      	bne.n	800331e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	0151      	lsls	r1, r2, #5
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	440a      	add	r2, r1
 80032ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3361      	adds	r3, #97	; 0x61
 80032e2:	2208      	movs	r2, #8
 80032e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2310      	movs	r3, #16
 80032f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f005 f8fb 	bl	8008512 <USB_HC_Halt>
 800331c:	e034      	b.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d129      	bne.n	8003388 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	440a      	add	r2, r1
 800334a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	2206      	movs	r2, #6
 8003364:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f005 f8ce 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	461a      	mov	r2, r3
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d122      	bne.n	80033e6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	0151      	lsls	r1, r2, #5
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	440a      	add	r2, r1
 80033b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 f8a1 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033e4:	e2ba      	b.n	800395c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 811b 	bne.w	8003634 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d019      	beq.n	800343a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3348      	adds	r3, #72	; 0x48
 8003414:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0159      	lsls	r1, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	440b      	add	r3, r1
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003428:	1ad2      	subs	r2, r2, r3
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	202c      	movs	r0, #44	; 0x2c
 8003430:	fb00 f303 	mul.w	r3, r0, r3
 8003434:	440b      	add	r3, r1
 8003436:	3350      	adds	r3, #80	; 0x50
 8003438:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3361      	adds	r3, #97	; 0x61
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	335c      	adds	r3, #92	; 0x5c
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	2301      	movs	r3, #1
 800346e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	333f      	adds	r3, #63	; 0x3f
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	333f      	adds	r3, #63	; 0x3f
 8003492:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003494:	2b02      	cmp	r3, #2
 8003496:	d121      	bne.n	80034dc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 f825 	bl	8008512 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	2310      	movs	r3, #16
 80034d8:	6093      	str	r3, [r2, #8]
 80034da:	e066      	b.n	80035aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	333f      	adds	r3, #63	; 0x3f
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d127      	bne.n	8003540 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	440a      	add	r2, r1
 8003506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800350e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b2d9      	uxtb	r1, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	202c      	movs	r0, #44	; 0x2c
 800352c:	fb00 f303 	mul.w	r3, r0, r3
 8003530:	4413      	add	r3, r2
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f00d f8f7 	bl	801072c <HAL_HCD_HC_NotifyURBChange_Callback>
 800353e:	e034      	b.n	80035aa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	333f      	adds	r3, #63	; 0x3f
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d12a      	bne.n	80035aa <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3354      	adds	r3, #84	; 0x54
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	f083 0301 	eor.w	r3, r3, #1
 800357a:	b2d8      	uxtb	r0, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3354      	adds	r3, #84	; 0x54
 800358a:	4602      	mov	r2, r0
 800358c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	202c      	movs	r0, #44	; 0x2c
 8003598:	fb00 f303 	mul.w	r3, r0, r3
 800359c:	4413      	add	r3, r2
 800359e:	3360      	adds	r3, #96	; 0x60
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f00d f8c1 	bl	801072c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d12b      	bne.n	800360a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3348      	adds	r3, #72	; 0x48
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	202c      	movs	r0, #44	; 0x2c
 80035c8:	fb00 f202 	mul.w	r2, r0, r2
 80035cc:	440a      	add	r2, r1
 80035ce:	3240      	adds	r2, #64	; 0x40
 80035d0:	8812      	ldrh	r2, [r2, #0]
 80035d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 81be 	beq.w	800395c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3354      	adds	r3, #84	; 0x54
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	b2d8      	uxtb	r0, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3354      	adds	r3, #84	; 0x54
 8003604:	4602      	mov	r2, r0
 8003606:	701a      	strb	r2, [r3, #0]
}
 8003608:	e1a8      	b.n	800395c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3354      	adds	r3, #84	; 0x54
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f083 0301 	eor.w	r3, r3, #1
 800361e:	b2d8      	uxtb	r0, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3354      	adds	r3, #84	; 0x54
 800362e:	4602      	mov	r2, r0
 8003630:	701a      	strb	r2, [r3, #0]
}
 8003632:	e193      	b.n	800395c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	f040 8106 	bne.w	8003858 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	440a      	add	r2, r1
 8003662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003666:	f023 0302 	bic.w	r3, r3, #2
 800366a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3361      	adds	r3, #97	; 0x61
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d109      	bne.n	8003694 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e0c9      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3361      	adds	r3, #97	; 0x61
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d109      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3360      	adds	r3, #96	; 0x60
 80036b6:	2205      	movs	r2, #5
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e0b5      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3361      	adds	r3, #97	; 0x61
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d009      	beq.n	80036e4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3361      	adds	r3, #97	; 0x61
 80036de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d150      	bne.n	8003786 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	335c      	adds	r3, #92	; 0x5c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	202c      	movs	r0, #44	; 0x2c
 80036fc:	fb00 f303 	mul.w	r3, r0, r3
 8003700:	440b      	add	r3, r1
 8003702:	335c      	adds	r3, #92	; 0x5c
 8003704:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	335c      	adds	r3, #92	; 0x5c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d912      	bls.n	8003740 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	335c      	adds	r3, #92	; 0x5c
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3360      	adds	r3, #96	; 0x60
 800373a:	2204      	movs	r2, #4
 800373c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800373e:	e073      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3360      	adds	r3, #96	; 0x60
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003768:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003770:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003784:	e050      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	3361      	adds	r3, #97	; 0x61
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d122      	bne.n	80037e0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3360      	adds	r3, #96	; 0x60
 80037a8:	2202      	movs	r2, #2
 80037aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e023      	b.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3361      	adds	r3, #97	; 0x61
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b07      	cmp	r3, #7
 80037f2:	d119      	bne.n	8003828 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	335c      	adds	r3, #92	; 0x5c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	202c      	movs	r0, #44	; 0x2c
 800380c:	fb00 f303 	mul.w	r3, r0, r3
 8003810:	440b      	add	r3, r1
 8003812:	335c      	adds	r3, #92	; 0x5c
 8003814:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3360      	adds	r3, #96	; 0x60
 8003824:	2204      	movs	r2, #4
 8003826:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2302      	movs	r3, #2
 8003838:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	202c      	movs	r0, #44	; 0x2c
 8003844:	fb00 f303 	mul.w	r3, r0, r3
 8003848:	4413      	add	r3, r2
 800384a:	3360      	adds	r3, #96	; 0x60
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00c ff6b 	bl	801072c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003856:	e081      	b.n	800395c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b10      	cmp	r3, #16
 800386c:	d176      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	333f      	adds	r3, #63	; 0x3f
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d121      	bne.n	80038c6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	335c      	adds	r3, #92	; 0x5c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fe27 	bl	8008512 <USB_HC_Halt>
 80038c4:	e041      	b.n	800394a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	333f      	adds	r3, #63	; 0x3f
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	333f      	adds	r3, #63	; 0x3f
 80038e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d12d      	bne.n	800394a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	335c      	adds	r3, #92	; 0x5c
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d120      	bne.n	800394a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3361      	adds	r3, #97	; 0x61
 8003916:	2203      	movs	r2, #3
 8003918:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4413      	add	r3, r2
 8003922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	440a      	add	r2, r1
 8003930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f004 fde4 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	2310      	movs	r3, #16
 800395a:	6093      	str	r3, [r2, #8]
}
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d119      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	2304      	movs	r3, #4
 80039a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	0151      	lsls	r1, r2, #5
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	440a      	add	r2, r1
 80039bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80039c6:	e3c6      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d13e      	bne.n	8003a5c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2320      	movs	r3, #32
 80039ee:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	333d      	adds	r3, #61	; 0x3d
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f040 83a8 	bne.w	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3360      	adds	r3, #96	; 0x60
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	0151      	lsls	r1, r2, #5
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	440a      	add	r2, r1
 8003a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 fd5c 	bl	8008512 <USB_HC_Halt>
}
 8003a5a:	e37c      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d122      	bne.n	8003aba <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 fd37 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab6:	6093      	str	r3, [r2, #8]
}
 8003ab8:	e34d      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d150      	bne.n	8003b72 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d111      	bne.n	8003b1c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	333d      	adds	r3, #61	; 0x3d
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	2340      	movs	r3, #64	; 0x40
 8003b1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fce3 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3361      	adds	r3, #97	; 0x61
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
}
 8003b70:	e2f1      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d13c      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3361      	adds	r3, #97	; 0x61
 8003b96:	2204      	movs	r2, #4
 8003b98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	333d      	adds	r3, #61	; 0x3d
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	335c      	adds	r3, #92	; 0x5c
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f004 fc92 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2340      	movs	r3, #64	; 0x40
 8003bfe:	6093      	str	r3, [r2, #8]
}
 8003c00:	e2a9      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d12a      	bne.n	8003c6e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	2308      	movs	r3, #8
 8003c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 fc5c 	bl	8008512 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3361      	adds	r3, #97	; 0x61
 8003c68:	2205      	movs	r2, #5
 8003c6a:	701a      	strb	r2, [r3, #0]
}
 8003c6c:	e273      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d150      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	335c      	adds	r3, #92	; 0x5c
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3361      	adds	r3, #97	; 0x61
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	333d      	adds	r3, #61	; 0x3d
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d112      	bne.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	333c      	adds	r3, #60	; 0x3c
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	333d      	adds	r3, #61	; 0x3d
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 fc00 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2310      	movs	r3, #16
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	e217      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d174      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d121      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	212c      	movs	r1, #44	; 0x2c
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	3361      	adds	r3, #97	; 0x61
 8003d52:	2206      	movs	r2, #6
 8003d54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 fbc6 	bl	8008512 <USB_HC_Halt>
 8003d86:	e044      	b.n	8003e12 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	335c      	adds	r3, #92	; 0x5c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	202c      	movs	r0, #44	; 0x2c
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	440b      	add	r3, r1
 8003da6:	335c      	adds	r3, #92	; 0x5c
 8003da8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	335c      	adds	r3, #92	; 0x5c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d920      	bls.n	8003e00 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	335c      	adds	r3, #92	; 0x5c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	2204      	movs	r2, #4
 8003de0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	202c      	movs	r0, #44	; 0x2c
 8003dec:	fb00 f303 	mul.w	r3, r0, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3360      	adds	r3, #96	; 0x60
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f00c fc97 	bl	801072c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dfe:	e008      	b.n	8003e12 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3360      	adds	r3, #96	; 0x60
 8003e0e:	2202      	movs	r2, #2
 8003e10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	6093      	str	r3, [r2, #8]
}
 8003e24:	e197      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d134      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fb52 	bl	8008512 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3361      	adds	r3, #97	; 0x61
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	701a      	strb	r2, [r3, #0]
}
 8003ea6:	e156      	b.n	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 814b 	bne.w	8004156 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eda:	f023 0302 	bic.w	r3, r3, #2
 8003ede:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	3361      	adds	r3, #97	; 0x61
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d179      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3360      	adds	r3, #96	; 0x60
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	333f      	adds	r3, #63	; 0x3f
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d00a      	beq.n	8003f30 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	333f      	adds	r3, #63	; 0x3f
 8003f28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	f040 80fc 	bne.w	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d142      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	334c      	adds	r3, #76	; 0x4c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80ed 	beq.w	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	334c      	adds	r3, #76	; 0x4c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	202c      	movs	r0, #44	; 0x2c
 8003f64:	fb00 f202 	mul.w	r2, r0, r2
 8003f68:	440a      	add	r2, r1
 8003f6a:	3240      	adds	r2, #64	; 0x40
 8003f6c:	8812      	ldrh	r2, [r2, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3b01      	subs	r3, #1
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	202c      	movs	r0, #44	; 0x2c
 8003f78:	fb00 f202 	mul.w	r2, r0, r2
 8003f7c:	440a      	add	r2, r1
 8003f7e:	3240      	adds	r2, #64	; 0x40
 8003f80:	8812      	ldrh	r2, [r2, #0]
 8003f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80ca 	beq.w	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3355      	adds	r3, #85	; 0x55
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2d8      	uxtb	r0, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3355      	adds	r3, #85	; 0x55
 8003fb8:	4602      	mov	r2, r0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e0b4      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3355      	adds	r3, #85	; 0x55
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2d8      	uxtb	r0, r3
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3355      	adds	r3, #85	; 0x55
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e09f      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3361      	adds	r3, #97	; 0x61
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d109      	bne.n	8004010 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3360      	adds	r3, #96	; 0x60
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e08b      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d109      	bne.n	8004038 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3360      	adds	r3, #96	; 0x60
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e077      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3361      	adds	r3, #97	; 0x61
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b05      	cmp	r3, #5
 800404a:	d109      	bne.n	8004060 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3360      	adds	r3, #96	; 0x60
 800405a:	2205      	movs	r2, #5
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e063      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3361      	adds	r3, #97	; 0x61
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d009      	beq.n	8004088 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3361      	adds	r3, #97	; 0x61
 8004082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004084:	2b08      	cmp	r3, #8
 8004086:	d14f      	bne.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	335c      	adds	r3, #92	; 0x5c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	202c      	movs	r0, #44	; 0x2c
 80040a0:	fb00 f303 	mul.w	r3, r0, r3
 80040a4:	440b      	add	r3, r1
 80040a6:	335c      	adds	r3, #92	; 0x5c
 80040a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	335c      	adds	r3, #92	; 0x5c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d912      	bls.n	80040e4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3360      	adds	r3, #96	; 0x60
 80040de:	2204      	movs	r2, #4
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e021      	b.n	8004128 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3360      	adds	r3, #96	; 0x60
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800410c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004114:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	461a      	mov	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	461a      	mov	r2, r3
 8004136:	2302      	movs	r3, #2
 8004138:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	b2d9      	uxtb	r1, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	202c      	movs	r0, #44	; 0x2c
 8004144:	fb00 f303 	mul.w	r3, r0, r3
 8004148:	4413      	add	r3, r2
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f00c faeb 	bl	801072c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	; 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	0c5b      	lsrs	r3, r3, #17
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004192:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d004      	beq.n	80041a4 <HCD_RXQLVL_IRQHandler+0x46>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b05      	cmp	r3, #5
 800419e:	f000 80a9 	beq.w	80042f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041a2:	e0aa      	b.n	80042fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80a6 	beq.w	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3344      	adds	r3, #68	; 0x44
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 809b 	beq.w	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3350      	adds	r3, #80	; 0x50
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	441a      	add	r2, r3
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	202c      	movs	r0, #44	; 0x2c
 80041dc:	fb00 f303 	mul.w	r3, r0, r3
 80041e0:	440b      	add	r3, r1
 80041e2:	334c      	adds	r3, #76	; 0x4c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d87a      	bhi.n	80042e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	3344      	adds	r3, #68	; 0x44
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	b292      	uxth	r2, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f003 fd23 	bl	8007c4e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3344      	adds	r3, #68	; 0x44
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	441a      	add	r2, r3
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	202c      	movs	r0, #44	; 0x2c
 8004222:	fb00 f303 	mul.w	r3, r0, r3
 8004226:	440b      	add	r3, r1
 8004228:	3344      	adds	r3, #68	; 0x44
 800422a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3350      	adds	r3, #80	; 0x50
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	441a      	add	r2, r3
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	202c      	movs	r0, #44	; 0x2c
 8004246:	fb00 f303 	mul.w	r3, r0, r3
 800424a:	440b      	add	r3, r1
 800424c:	3350      	adds	r3, #80	; 0x50
 800424e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004264:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3340      	adds	r3, #64	; 0x40
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4293      	cmp	r3, r2
 800427c:	d13c      	bne.n	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d039      	beq.n	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800429a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	3354      	adds	r3, #84	; 0x54
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2d8      	uxtb	r0, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3354      	adds	r3, #84	; 0x54
 80042da:	4602      	mov	r2, r0
 80042dc:	701a      	strb	r2, [r3, #0]
      break;
 80042de:	e00b      	b.n	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3360      	adds	r3, #96	; 0x60
 80042ee:	2204      	movs	r2, #4
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e001      	b.n	80042f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80042f8:	bf00      	nop
  }
}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800432e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d10b      	bne.n	8004352 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f00c f9d5 	bl	80106f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f043 0302 	orr.w	r3, r3, #2
 8004350:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d132      	bne.n	80043c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d126      	bne.n	80043bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d113      	bne.n	800439e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800437c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004380:	d106      	bne.n	8004390 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f003 fd9b 	bl	8007ec4 <USB_InitFSLSPClkSel>
 800438e:	e011      	b.n	80043b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f003 fd94 	bl	8007ec4 <USB_InitFSLSPClkSel>
 800439c:	e00a      	b.n	80043b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d106      	bne.n	80043b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ac:	461a      	mov	r2, r3
 80043ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f00c f9c7 	bl	8010748 <HAL_HCD_PortEnabled_Callback>
 80043ba:	e002      	b.n	80043c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f00c f9d1 	bl	8010764 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d103      	bne.n	80043d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e12b      	b.n	8004652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f8d6 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800443a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800444c:	f002 fabe 	bl	80069cc <HAL_RCC_GetPCLK1Freq>
 8004450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4a81      	ldr	r2, [pc, #516]	; (800465c <HAL_I2C_Init+0x274>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d807      	bhi.n	800446c <HAL_I2C_Init+0x84>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a80      	ldr	r2, [pc, #512]	; (8004660 <HAL_I2C_Init+0x278>)
 8004460:	4293      	cmp	r3, r2
 8004462:	bf94      	ite	ls
 8004464:	2301      	movls	r3, #1
 8004466:	2300      	movhi	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e006      	b.n	800447a <HAL_I2C_Init+0x92>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a7d      	ldr	r2, [pc, #500]	; (8004664 <HAL_I2C_Init+0x27c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	bf94      	ite	ls
 8004474:	2301      	movls	r3, #1
 8004476:	2300      	movhi	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e0e7      	b.n	8004652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a78      	ldr	r2, [pc, #480]	; (8004668 <HAL_I2C_Init+0x280>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9b      	lsrs	r3, r3, #18
 800448c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a6a      	ldr	r2, [pc, #424]	; (800465c <HAL_I2C_Init+0x274>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d802      	bhi.n	80044bc <HAL_I2C_Init+0xd4>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3301      	adds	r3, #1
 80044ba:	e009      	b.n	80044d0 <HAL_I2C_Init+0xe8>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	4a69      	ldr	r2, [pc, #420]	; (800466c <HAL_I2C_Init+0x284>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	3301      	adds	r3, #1
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	495c      	ldr	r1, [pc, #368]	; (800465c <HAL_I2C_Init+0x274>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d819      	bhi.n	8004524 <HAL_I2C_Init+0x13c>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e59      	subs	r1, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80044fe:	1c59      	adds	r1, r3, #1
 8004500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004504:	400b      	ands	r3, r1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_I2C_Init+0x138>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1e59      	subs	r1, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fbb1 f3f3 	udiv	r3, r1, r3
 8004518:	3301      	adds	r3, #1
 800451a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451e:	e051      	b.n	80045c4 <HAL_I2C_Init+0x1dc>
 8004520:	2304      	movs	r3, #4
 8004522:	e04f      	b.n	80045c4 <HAL_I2C_Init+0x1dc>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d111      	bne.n	8004550 <HAL_I2C_Init+0x168>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e58      	subs	r0, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	440b      	add	r3, r1
 800453a:	fbb0 f3f3 	udiv	r3, r0, r3
 800453e:	3301      	adds	r3, #1
 8004540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e012      	b.n	8004576 <HAL_I2C_Init+0x18e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1e58      	subs	r0, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	0099      	lsls	r1, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	fbb0 f3f3 	udiv	r3, r0, r3
 8004566:	3301      	adds	r3, #1
 8004568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf0c      	ite	eq
 8004570:	2301      	moveq	r3, #1
 8004572:	2300      	movne	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_I2C_Init+0x196>
 800457a:	2301      	movs	r3, #1
 800457c:	e022      	b.n	80045c4 <HAL_I2C_Init+0x1dc>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10e      	bne.n	80045a4 <HAL_I2C_Init+0x1bc>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1e58      	subs	r0, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	440b      	add	r3, r1
 8004594:	fbb0 f3f3 	udiv	r3, r0, r3
 8004598:	3301      	adds	r3, #1
 800459a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a2:	e00f      	b.n	80045c4 <HAL_I2C_Init+0x1dc>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1e58      	subs	r0, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	0099      	lsls	r1, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	6809      	ldr	r1, [r1, #0]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6911      	ldr	r1, [r2, #16]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	4311      	orrs	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	430b      	orrs	r3, r1
 8004606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	000186a0 	.word	0x000186a0
 8004660:	001e847f 	.word	0x001e847f
 8004664:	003d08ff 	.word	0x003d08ff
 8004668:	431bde83 	.word	0x431bde83
 800466c:	10624dd3 	.word	0x10624dd3

08004670 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	461a      	mov	r2, r3
 800467c:	460b      	mov	r3, r1
 800467e:	817b      	strh	r3, [r7, #10]
 8004680:	4613      	mov	r3, r2
 8004682:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7fd fa64 	bl	8001b50 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	f040 80e0 	bne.w	8004858 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2319      	movs	r3, #25
 800469e:	2201      	movs	r2, #1
 80046a0:	4970      	ldr	r1, [pc, #448]	; (8004864 <HAL_I2C_Master_Transmit+0x1f4>)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fa92 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0d3      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2C_Master_Transmit+0x50>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0cc      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d007      	beq.n	80046e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2210      	movs	r2, #16
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	893a      	ldrh	r2, [r7, #8]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a50      	ldr	r2, [pc, #320]	; (8004868 <HAL_I2C_Master_Transmit+0x1f8>)
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004728:	8979      	ldrh	r1, [r7, #10]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f9ca 	bl	8004ac8 <I2C_MasterRequestWrite>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e08d      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004754:	e066      	b.n	8004824 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fb0c 	bl	8004d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b04      	cmp	r3, #4
 800476c:	d107      	bne.n	800477e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06b      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11b      	bne.n	80047f8 <HAL_I2C_Master_Transmit+0x188>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d017      	beq.n	80047f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	6a39      	ldr	r1, [r7, #32]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fafc 	bl	8004dfa <I2C_WaitOnBTFFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2b04      	cmp	r3, #4
 800480e:	d107      	bne.n	8004820 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e01a      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d194      	bne.n	8004756 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	00100002 	.word	0x00100002
 8004868:	ffff0000 	.word	0xffff0000

0800486c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7fd f968 	bl	8001b50 <HAL_GetTick>
 8004880:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004882:	2301      	movs	r3, #1
 8004884:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	f040 8111 	bne.w	8004ab6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2319      	movs	r3, #25
 800489a:	2201      	movs	r2, #1
 800489c:	4988      	ldr	r1, [pc, #544]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f994 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e104      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_I2C_IsDeviceReady+0x50>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0fd      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d007      	beq.n	80048e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2224      	movs	r2, #36	; 0x24
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a70      	ldr	r2, [pc, #448]	; (8004ac4 <HAL_I2C_IsDeviceReady+0x258>)
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f952 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493c:	d103      	bne.n	8004946 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0b6      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004958:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800495a:	f7fd f8f9 	bl	8001b50 <HAL_GetTick>
 800495e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800498e:	e025      	b.n	80049dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fd f8de 	bl	8001b50 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <HAL_I2C_IsDeviceReady+0x13a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	22a0      	movs	r2, #160	; 0xa0
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2ba0      	cmp	r3, #160	; 0xa0
 80049e6:	d005      	beq.n	80049f4 <HAL_I2C_IsDeviceReady+0x188>
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_I2C_IsDeviceReady+0x188>
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0cd      	beq.n	8004990 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d129      	bne.n	8004a5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2319      	movs	r3, #25
 8004a36:	2201      	movs	r2, #1
 8004a38:	4921      	ldr	r1, [pc, #132]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8c6 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e036      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e02c      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2319      	movs	r3, #25
 8004a7e:	2201      	movs	r2, #1
 8004a80:	490f      	ldr	r1, [pc, #60]	; (8004ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8a2 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e012      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f4ff af32 	bcc.w	8004906 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00100002 	.word	0x00100002
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d006      	beq.n	8004af2 <I2C_MasterRequestWrite+0x2a>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d003      	beq.n	8004af2 <I2C_MasterRequestWrite+0x2a>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af0:	d108      	bne.n	8004b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e00b      	b.n	8004b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b12      	cmp	r3, #18
 8004b0a:	d107      	bne.n	8004b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f84f 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d103      	bne.n	8004b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e035      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b58:	d108      	bne.n	8004b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e01b      	b.n	8004ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	11db      	asrs	r3, r3, #7
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f063 030f 	orn	r3, r3, #15
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <I2C_MasterRequestWrite+0xfc>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f875 	bl	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e010      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <I2C_MasterRequestWrite+0x100>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f865 	bl	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	00010008 	.word	0x00010008
 8004bc8:	00010002 	.word	0x00010002

08004bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	e025      	b.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d021      	beq.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fc ffb3 	bl	8001b50 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d116      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e023      	b.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10d      	bne.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	e00c      	b.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d0b6      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c88:	e051      	b.n	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c98:	d123      	bne.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e046      	b.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d021      	beq.n	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fc ff31 	bl	8001b50 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d116      	bne.n	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e020      	b.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10c      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	e00b      	b.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d18d      	bne.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d84:	e02d      	b.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f878 	bl	8004e7c <I2C_IsAcknowledgeFailed>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e02d      	b.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d021      	beq.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fc fed7 	bl	8001b50 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d116      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e007      	b.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d1ca      	bne.n	8004d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e06:	e02d      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f837 	bl	8004e7c <I2C_IsAcknowledgeFailed>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e02d      	b.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d021      	beq.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e20:	f7fc fe96 	bl	8001b50 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d116      	bne.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e007      	b.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d1ca      	bne.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e92:	d11b      	bne.n	8004ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0204 	orr.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d129      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	; 0x24
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d12a      	bne.n	8004fc2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	f023 030f 	bic.w	r3, r3, #15
 8004f92:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	89fb      	ldrh	r3, [r7, #14]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	89fa      	ldrh	r2, [r7, #14]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e128      	b.n	8005234 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a90      	ldr	r2, [pc, #576]	; (800523c <HAL_I2S_Init+0x26c>)
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fc fb27 	bl	8001650 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005018:	f023 030f 	bic.w	r3, r3, #15
 800501c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2202      	movs	r2, #2
 8005024:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d060      	beq.n	80050f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005036:	2310      	movs	r3, #16
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e001      	b.n	8005040 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800503c:	2320      	movs	r3, #32
 800503e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b20      	cmp	r3, #32
 8005046:	d802      	bhi.n	800504e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800504e:	2001      	movs	r0, #1
 8005050:	f001 fed4 	bl	8006dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8005054:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505e:	d125      	bne.n	80050ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	3305      	adds	r3, #5
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e01f      	b.n	80050ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	fbb2 f2f3 	udiv	r2, r2, r3
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	3305      	adds	r3, #5
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e00e      	b.n	80050ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	3305      	adds	r3, #5
 80050c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4a5c      	ldr	r2, [pc, #368]	; (8005240 <HAL_I2S_Init+0x270>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	08db      	lsrs	r3, r3, #3
 80050d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e003      	b.n	80050f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80050f0:	2302      	movs	r3, #2
 80050f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d902      	bls.n	8005104 <HAL_I2S_Init+0x134>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2bff      	cmp	r3, #255	; 0xff
 8005102:	d907      	bls.n	8005114 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	f043 0210 	orr.w	r2, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e08f      	b.n	8005234 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	ea42 0103 	orr.w	r1, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	430a      	orrs	r2, r1
 8005126:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005132:	f023 030f 	bic.w	r3, r3, #15
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6851      	ldr	r1, [r2, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	4311      	orrs	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	4311      	orrs	r1, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6992      	ldr	r2, [r2, #24]
 800514a:	430a      	orrs	r2, r1
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005156:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d161      	bne.n	8005224 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a38      	ldr	r2, [pc, #224]	; (8005244 <HAL_I2S_Init+0x274>)
 8005164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a37      	ldr	r2, [pc, #220]	; (8005248 <HAL_I2S_Init+0x278>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_I2S_Init+0x1a4>
 8005170:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_I2S_Init+0x27c>)
 8005172:	e001      	b.n	8005178 <HAL_I2S_Init+0x1a8>
 8005174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4932      	ldr	r1, [pc, #200]	; (8005248 <HAL_I2S_Init+0x278>)
 8005180:	428a      	cmp	r2, r1
 8005182:	d101      	bne.n	8005188 <HAL_I2S_Init+0x1b8>
 8005184:	4a31      	ldr	r2, [pc, #196]	; (800524c <HAL_I2S_Init+0x27c>)
 8005186:	e001      	b.n	800518c <HAL_I2S_Init+0x1bc>
 8005188:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800518c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005190:	f023 030f 	bic.w	r3, r3, #15
 8005194:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2b      	ldr	r2, [pc, #172]	; (8005248 <HAL_I2S_Init+0x278>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <HAL_I2S_Init+0x1d4>
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_I2S_Init+0x27c>)
 80051a2:	e001      	b.n	80051a8 <HAL_I2S_Init+0x1d8>
 80051a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a8:	2202      	movs	r2, #2
 80051aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a25      	ldr	r2, [pc, #148]	; (8005248 <HAL_I2S_Init+0x278>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <HAL_I2S_Init+0x1ea>
 80051b6:	4b25      	ldr	r3, [pc, #148]	; (800524c <HAL_I2S_Init+0x27c>)
 80051b8:	e001      	b.n	80051be <HAL_I2S_Init+0x1ee>
 80051ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ca:	d003      	beq.n	80051d4 <HAL_I2S_Init+0x204>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	e001      	b.n	80051e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051fe:	4313      	orrs	r3, r2
 8005200:	b29a      	uxth	r2, r3
 8005202:	897b      	ldrh	r3, [r7, #10]
 8005204:	4313      	orrs	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800520c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <HAL_I2S_Init+0x278>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_I2S_Init+0x24c>
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_I2S_Init+0x27c>)
 800521a:	e001      	b.n	8005220 <HAL_I2S_Init+0x250>
 800521c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005220:	897a      	ldrh	r2, [r7, #10]
 8005222:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	08005af9 	.word	0x08005af9
 8005240:	cccccccd 	.word	0xcccccccd
 8005244:	08005c81 	.word	0x08005c81
 8005248:	40003800 	.word	0x40003800
 800524c:	40003400 	.word	0x40003400

08005250 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_I2S_Transmit_DMA+0x1a>
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e08e      	b.n	800538c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_I2S_Transmit_DMA+0x2e>
 800527a:	2302      	movs	r3, #2
 800527c:	e086      	b.n	800538c <HAL_I2S_Transmit_DMA+0x13c>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d005      	beq.n	800529e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	e076      	b.n	800538c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d002      	beq.n	80052ca <HAL_I2S_Transmit_DMA+0x7a>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10a      	bne.n	80052e0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052de:	e005      	b.n	80052ec <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	4a28      	ldr	r2, [pc, #160]	; (8005394 <HAL_I2S_Transmit_DMA+0x144>)
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	4a27      	ldr	r2, [pc, #156]	; (8005398 <HAL_I2S_Transmit_DMA+0x148>)
 80052fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	4a26      	ldr	r2, [pc, #152]	; (800539c <HAL_I2S_Transmit_DMA+0x14c>)
 8005302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800530c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005314:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800531c:	f7fc fdd8 	bl	8001ed0 <HAL_DMA_Start_IT>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00f      	beq.n	8005346 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e022      	b.n	800538c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005362:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0202 	orr.w	r2, r2, #2
 8005380:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	080059d7 	.word	0x080059d7
 8005398:	08005995 	.word	0x08005995
 800539c:	080059f3 	.word	0x080059f3

080053a0 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_I2S_DMAPause+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e04a      	b.n	800544e <HAL_I2S_DMAPause+0xae>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d108      	bne.n	80053de <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0202 	bic.w	r2, r2, #2
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	e032      	b.n	8005444 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d108      	bne.n	80053fc <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	e023      	b.n	8005444 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b05      	cmp	r3, #5
 8005406:	d11d      	bne.n	8005444 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0203 	bic.w	r2, r2, #3
 8005416:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0f      	ldr	r2, [pc, #60]	; (800545c <HAL_I2S_DMAPause+0xbc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_I2S_DMAPause+0x86>
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <HAL_I2S_DMAPause+0xc0>)
 8005424:	e001      	b.n	800542a <HAL_I2S_DMAPause+0x8a>
 8005426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	490a      	ldr	r1, [pc, #40]	; (800545c <HAL_I2S_DMAPause+0xbc>)
 8005432:	428b      	cmp	r3, r1
 8005434:	d101      	bne.n	800543a <HAL_I2S_DMAPause+0x9a>
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_I2S_DMAPause+0xc0>)
 8005438:	e001      	b.n	800543e <HAL_I2S_DMAPause+0x9e>
 800543a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543e:	f022 0203 	bic.w	r2, r2, #3
 8005442:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40003800 	.word	0x40003800
 8005460:	40003400 	.word	0x40003400

08005464 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_I2S_DMAResume+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e07d      	b.n	8005578 <HAL_I2S_DMAResume+0x114>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b03      	cmp	r3, #3
 800548e:	d108      	bne.n	80054a2 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0202 	orr.w	r2, r2, #2
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	e056      	b.n	8005550 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d108      	bne.n	80054c0 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	e047      	b.n	8005550 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d141      	bne.n	8005550 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0203 	orr.w	r2, r2, #3
 80054da:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a28      	ldr	r2, [pc, #160]	; (8005584 <HAL_I2S_DMAResume+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_I2S_DMAResume+0x86>
 80054e6:	4b28      	ldr	r3, [pc, #160]	; (8005588 <HAL_I2S_DMAResume+0x124>)
 80054e8:	e001      	b.n	80054ee <HAL_I2S_DMAResume+0x8a>
 80054ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4923      	ldr	r1, [pc, #140]	; (8005584 <HAL_I2S_DMAResume+0x120>)
 80054f6:	428b      	cmp	r3, r1
 80054f8:	d101      	bne.n	80054fe <HAL_I2S_DMAResume+0x9a>
 80054fa:	4b23      	ldr	r3, [pc, #140]	; (8005588 <HAL_I2S_DMAResume+0x124>)
 80054fc:	e001      	b.n	8005502 <HAL_I2S_DMAResume+0x9e>
 80054fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005502:	f042 0203 	orr.w	r2, r2, #3
 8005506:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <HAL_I2S_DMAResume+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_I2S_DMAResume+0xb2>
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <HAL_I2S_DMAResume+0x124>)
 8005514:	e001      	b.n	800551a <HAL_I2S_DMAResume+0xb6>
 8005516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	2b00      	cmp	r3, #0
 8005522:	d115      	bne.n	8005550 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_I2S_DMAResume+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d101      	bne.n	8005532 <HAL_I2S_DMAResume+0xce>
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <HAL_I2S_DMAResume+0x124>)
 8005530:	e001      	b.n	8005536 <HAL_I2S_DMAResume+0xd2>
 8005532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4911      	ldr	r1, [pc, #68]	; (8005584 <HAL_I2S_DMAResume+0x120>)
 800553e:	428b      	cmp	r3, r1
 8005540:	d101      	bne.n	8005546 <HAL_I2S_DMAResume+0xe2>
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_I2S_DMAResume+0x124>)
 8005544:	e001      	b.n	800554a <HAL_I2S_DMAResume+0xe6>
 8005546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800554e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800556c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40003800 	.word	0x40003800
 8005588:	40003400 	.word	0x40003400

0800558c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a0:	d004      	beq.n	80055ac <HAL_I2S_DMAStop+0x20>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f040 80d1 	bne.w	800574e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00f      	beq.n	80055d4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fc fce1 	bl	8001f80 <HAL_DMA_Abort>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f043 0208 	orr.w	r2, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80055d4:	2364      	movs	r3, #100	; 0x64
 80055d6:	2201      	movs	r2, #1
 80055d8:	2102      	movs	r1, #2
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb16 	bl	8005c0c <I2S_WaitFlagStateUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80055fe:	2364      	movs	r3, #100	; 0x64
 8005600:	2200      	movs	r2, #0
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fb01 	bl	8005c0c <I2S_WaitFlagStateUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0202 	bic.w	r2, r2, #2
 8005654:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	f040 8165 	bne.w	800592e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00f      	beq.n	800568c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc fc85 	bl	8001f80 <HAL_DMA_Abort>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	f043 0208 	orr.w	r2, r3, #8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_I2S_DMAStop+0x10e>
 8005696:	4b8a      	ldr	r3, [pc, #552]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 8005698:	e001      	b.n	800569e <HAL_I2S_DMAStop+0x112>
 800569a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4985      	ldr	r1, [pc, #532]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80056a6:	428b      	cmp	r3, r1
 80056a8:	d101      	bne.n	80056ae <HAL_I2S_DMAStop+0x122>
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80056ac:	e001      	b.n	80056b2 <HAL_I2S_DMAStop+0x126>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a7e      	ldr	r2, [pc, #504]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_I2S_DMAStop+0x13e>
 80056c6:	4b7e      	ldr	r3, [pc, #504]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80056c8:	e001      	b.n	80056ce <HAL_I2S_DMAStop+0x142>
 80056ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a79      	ldr	r2, [pc, #484]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <HAL_I2S_DMAStop+0x154>
 80056dc:	4b78      	ldr	r3, [pc, #480]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80056de:	e001      	b.n	80056e4 <HAL_I2S_DMAStop+0x158>
 80056e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a73      	ldr	r2, [pc, #460]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_I2S_DMAStop+0x16c>
 80056f4:	4b72      	ldr	r3, [pc, #456]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80056f6:	e001      	b.n	80056fc <HAL_I2S_DMAStop+0x170>
 80056f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	496e      	ldr	r1, [pc, #440]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 8005704:	428b      	cmp	r3, r1
 8005706:	d101      	bne.n	800570c <HAL_I2S_DMAStop+0x180>
 8005708:	4b6d      	ldr	r3, [pc, #436]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 800570a:	e001      	b.n	8005710 <HAL_I2S_DMAStop+0x184>
 800570c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005736:	e0fa      	b.n	800592e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5f      	ldr	r2, [pc, #380]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_I2S_DMAStop+0x1ba>
 8005742:	4b5f      	ldr	r3, [pc, #380]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 8005744:	e001      	b.n	800574a <HAL_I2S_DMAStop+0x1be>
 8005746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800574a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800574c:	e0ef      	b.n	800592e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005756:	d005      	beq.n	8005764 <HAL_I2S_DMAStop+0x1d8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	f040 80e5 	bne.w	800592e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00f      	beq.n	800578c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	4618      	mov	r0, r3
 8005772:	f7fc fc05 	bl	8001f80 <HAL_DMA_Abort>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	f043 0208 	orr.w	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b05      	cmp	r3, #5
 8005796:	f040 809a 	bne.w	80058ce <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fbea 	bl	8001f80 <HAL_DMA_Abort>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f043 0208 	orr.w	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80057c2:	f7fc f9c5 	bl	8001b50 <HAL_GetTick>
 80057c6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80057c8:	e012      	b.n	80057f0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80057ca:	f7fc f9c1 	bl	8001b50 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b64      	cmp	r3, #100	; 0x64
 80057d6:	d90b      	bls.n	80057f0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a31      	ldr	r2, [pc, #196]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <HAL_I2S_DMAStop+0x272>
 80057fa:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80057fc:	e001      	b.n	8005802 <HAL_I2S_DMAStop+0x276>
 80057fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d1de      	bne.n	80057ca <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800580c:	e012      	b.n	8005834 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800580e:	f7fc f99f 	bl	8001b50 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	; 0x64
 800581a:	d90b      	bls.n	8005834 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	f043 0201 	orr.w	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a20      	ldr	r2, [pc, #128]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_I2S_DMAStop+0x2b6>
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 8005840:	e001      	b.n	8005846 <HAL_I2S_DMAStop+0x2ba>
 8005842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d0de      	beq.n	800580e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d101      	bne.n	800585e <HAL_I2S_DMAStop+0x2d2>
 800585a:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 800585c:	e001      	b.n	8005862 <HAL_I2S_DMAStop+0x2d6>
 800585e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4914      	ldr	r1, [pc, #80]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 800586a:	428b      	cmp	r3, r1
 800586c:	d101      	bne.n	8005872 <HAL_I2S_DMAStop+0x2e6>
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 8005870:	e001      	b.n	8005876 <HAL_I2S_DMAStop+0x2ea>
 8005872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_I2S_DMAStop+0x302>
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 800588c:	e001      	b.n	8005892 <HAL_I2S_DMAStop+0x306>
 800588e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a07      	ldr	r2, [pc, #28]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <HAL_I2S_DMAStop+0x31a>
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80058a4:	e001      	b.n	80058aa <HAL_I2S_DMAStop+0x31e>
 80058a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4902      	ldr	r1, [pc, #8]	; (80058bc <HAL_I2S_DMAStop+0x330>)
 80058b2:	428b      	cmp	r3, r1
 80058b4:	d106      	bne.n	80058c4 <HAL_I2S_DMAStop+0x338>
 80058b6:	4b02      	ldr	r3, [pc, #8]	; (80058c0 <HAL_I2S_DMAStop+0x334>)
 80058b8:	e006      	b.n	80058c8 <HAL_I2S_DMAStop+0x33c>
 80058ba:	bf00      	nop
 80058bc:	40003800 	.word	0x40003800
 80058c0:	40003400 	.word	0x40003400
 80058c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058c8:	f022 0202 	bic.w	r2, r2, #2
 80058cc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590c:	d10c      	bne.n	8005928 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	77fb      	strb	r3, [r7, #31]
 8005926:	e002      	b.n	800592e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005936:	7ffb      	ldrb	r3, [r7, #31]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10e      	bne.n	80059c8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0202 	bic.w	r2, r2, #2
 80059b8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7fb f8b5 	bl	8000b38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ffb7 	bl	8005958 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0203 	bic.w	r2, r2, #3
 8005a0e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f043 0208 	orr.w	r2, r3, #8
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff ffa5 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	1c9a      	adds	r2, r3, #2
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10e      	bne.n	8005a92 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fb f853 	bl	8000b38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	b292      	uxth	r2, r2
 8005aae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10e      	bne.n	8005af0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ae0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ff3e 	bl	800596c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d13a      	bne.n	8005b8a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d109      	bne.n	8005b32 <I2S_IRQHandler+0x3a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d102      	bne.n	8005b32 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ffb4 	bl	8005a9a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d126      	bne.n	8005b8a <I2S_IRQHandler+0x92>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d11f      	bne.n	8005b8a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b58:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f043 0202 	orr.w	r2, r3, #2
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fefb 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d136      	bne.n	8005c04 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d109      	bne.n	8005bb4 <I2S_IRQHandler+0xbc>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d102      	bne.n	8005bb4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ff45 	bl	8005a3e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d122      	bne.n	8005c04 <I2S_IRQHandler+0x10c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d11b      	bne.n	8005c04 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bda:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff febe 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1c:	f7fb ff98 	bl	8001b50 <HAL_GetTick>
 8005c20:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005c22:	e018      	b.n	8005c56 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d014      	beq.n	8005c56 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005c2c:	f7fb ff90 	bl	8001b50 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d902      	bls.n	8005c42 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00f      	b.n	8005c76 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1d7      	bne.n	8005c24 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4aa2      	ldr	r2, [pc, #648]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005c9a:	4ba2      	ldr	r3, [pc, #648]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c9c:	e001      	b.n	8005ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a9b      	ldr	r2, [pc, #620]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005cb8:	4b9a      	ldr	r3, [pc, #616]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005cba:	e001      	b.n	8005cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ccc:	d004      	beq.n	8005cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 8099 	bne.w	8005e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d107      	bne.n	8005cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f925 	bl	8005f3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d107      	bne.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9c8 	bl	800609c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d13a      	bne.n	8005d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d035      	beq.n	8005d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a7e      	ldr	r2, [pc, #504]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d2a:	4b7e      	ldr	r3, [pc, #504]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d2c:	e001      	b.n	8005d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4979      	ldr	r1, [pc, #484]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d3a:	428b      	cmp	r3, r1
 8005d3c:	d101      	bne.n	8005d42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d3e:	4b79      	ldr	r3, [pc, #484]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d40:	e001      	b.n	8005d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fdfa 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	f040 80be 	bne.w	8005f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80b8 	beq.w	8005f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005db2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a59      	ldr	r2, [pc, #356]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005dbe:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dc0:	e001      	b.n	8005dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4954      	ldr	r1, [pc, #336]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dce:	428b      	cmp	r3, r1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005dd2:	4b54      	ldr	r3, [pc, #336]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dd4:	e001      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fdbc 	bl	8005980 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e08:	e084      	b.n	8005f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d107      	bne.n	8005e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8be 	bl	8005fa0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8fd 	bl	8006038 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d12f      	bne.n	8005ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02a      	beq.n	8005ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2e      	ldr	r2, [pc, #184]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005e6c:	4b2d      	ldr	r3, [pc, #180]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e6e:	e001      	b.n	8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4929      	ldr	r1, [pc, #164]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	d101      	bne.n	8005e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e82:	e001      	b.n	8005e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	f043 0202 	orr.w	r2, r3, #2
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fd6c 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d131      	bne.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02c      	beq.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d101      	bne.n	8005eca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ec6:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ec8:	e001      	b.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4912      	ldr	r1, [pc, #72]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ed6:	428b      	cmp	r3, r1
 8005ed8:	d101      	bne.n	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005edc:	e001      	b.n	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ef6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f043 0204 	orr.w	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fd37 	bl	8005980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f12:	e000      	b.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f14:	bf00      	nop
}
 8005f16:	bf00      	nop
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40003800 	.word	0x40003800
 8005f24:	40003400 	.word	0x40003400

08005f28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	1c99      	adds	r1, r3, #2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6251      	str	r1, [r2, #36]	; 0x24
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d113      	bne.n	8005f96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ffc9 	bl	8005f28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	1c99      	adds	r1, r3, #2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6251      	str	r1, [r2, #36]	; 0x24
 8005fb2:	8819      	ldrh	r1, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <I2SEx_TxISR_I2SExt+0x90>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <I2SEx_TxISR_I2SExt+0x22>
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <I2SEx_TxISR_I2SExt+0x94>)
 8005fc0:	e001      	b.n	8005fc6 <I2SEx_TxISR_I2SExt+0x26>
 8005fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d121      	bne.n	8006026 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <I2SEx_TxISR_I2SExt+0x90>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <I2SEx_TxISR_I2SExt+0x50>
 8005fec:	4b11      	ldr	r3, [pc, #68]	; (8006034 <I2SEx_TxISR_I2SExt+0x94>)
 8005fee:	e001      	b.n	8005ff4 <I2SEx_TxISR_I2SExt+0x54>
 8005ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	490d      	ldr	r1, [pc, #52]	; (8006030 <I2SEx_TxISR_I2SExt+0x90>)
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	d101      	bne.n	8006004 <I2SEx_TxISR_I2SExt+0x64>
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <I2SEx_TxISR_I2SExt+0x94>)
 8006002:	e001      	b.n	8006008 <I2SEx_TxISR_I2SExt+0x68>
 8006004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800600c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff81 	bl	8005f28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40003800 	.word	0x40003800
 8006034:	40003400 	.word	0x40003400

08006038 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68d8      	ldr	r0, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	1c99      	adds	r1, r3, #2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006050:	b282      	uxth	r2, r0
 8006052:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d113      	bne.n	8006094 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800607a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff4a 	bl	8005f28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <I2SEx_RxISR_I2SExt+0x90>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <I2SEx_RxISR_I2SExt+0x16>
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <I2SEx_RxISR_I2SExt+0x94>)
 80060b0:	e001      	b.n	80060b6 <I2SEx_RxISR_I2SExt+0x1a>
 80060b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b6:	68d8      	ldr	r0, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	1c99      	adds	r1, r3, #2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060c2:	b282      	uxth	r2, r0
 80060c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d121      	bne.n	8006122 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <I2SEx_RxISR_I2SExt+0x90>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <I2SEx_RxISR_I2SExt+0x50>
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <I2SEx_RxISR_I2SExt+0x94>)
 80060ea:	e001      	b.n	80060f0 <I2SEx_RxISR_I2SExt+0x54>
 80060ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	490d      	ldr	r1, [pc, #52]	; (800612c <I2SEx_RxISR_I2SExt+0x90>)
 80060f8:	428b      	cmp	r3, r1
 80060fa:	d101      	bne.n	8006100 <I2SEx_RxISR_I2SExt+0x64>
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <I2SEx_RxISR_I2SExt+0x94>)
 80060fe:	e001      	b.n	8006104 <I2SEx_RxISR_I2SExt+0x68>
 8006100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006104:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006108:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff03 	bl	8005f28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40003800 	.word	0x40003800
 8006130:	40003400 	.word	0x40003400

08006134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e264      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d075      	beq.n	800623e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006152:	4ba3      	ldr	r3, [pc, #652]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b04      	cmp	r3, #4
 800615c:	d00c      	beq.n	8006178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800615e:	4ba0      	ldr	r3, [pc, #640]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006166:	2b08      	cmp	r3, #8
 8006168:	d112      	bne.n	8006190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800616a:	4b9d      	ldr	r3, [pc, #628]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006176:	d10b      	bne.n	8006190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006178:	4b99      	ldr	r3, [pc, #612]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05b      	beq.n	800623c <HAL_RCC_OscConfig+0x108>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d157      	bne.n	800623c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e23f      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d106      	bne.n	80061a8 <HAL_RCC_OscConfig+0x74>
 800619a:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a90      	ldr	r2, [pc, #576]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0x98>
 80061b2:	4b8b      	ldr	r3, [pc, #556]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a8a      	ldr	r2, [pc, #552]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a87      	ldr	r2, [pc, #540]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061cc:	4b84      	ldr	r3, [pc, #528]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a83      	ldr	r2, [pc, #524]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a80      	ldr	r2, [pc, #512]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fb fcb0 	bl	8001b50 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fb fcac 	bl	8001b50 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e204      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xc0>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fb fc9c 	bl	8001b50 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800621c:	f7fb fc98 	bl	8001b50 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e1f0      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	4b6c      	ldr	r3, [pc, #432]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0xe8>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d063      	beq.n	8006312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800624a:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006256:	4b62      	ldr	r3, [pc, #392]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800625e:	2b08      	cmp	r3, #8
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x152>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1c4      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b56      	ldr	r3, [pc, #344]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4952      	ldr	r1, [pc, #328]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e03a      	b.n	8006312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b4f      	ldr	r3, [pc, #316]	; (80063e4 <HAL_RCC_OscConfig+0x2b0>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fb fc51 	bl	8001b50 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b2:	f7fb fc4d 	bl	8001b50 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1a5      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b43      	ldr	r3, [pc, #268]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4940      	ldr	r1, [pc, #256]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e6:	4b3f      	ldr	r3, [pc, #252]	; (80063e4 <HAL_RCC_OscConfig+0x2b0>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fb fc30 	bl	8001b50 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f4:	f7fb fc2c 	bl	8001b50 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e184      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d030      	beq.n	8006380 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006326:	4b30      	ldr	r3, [pc, #192]	; (80063e8 <HAL_RCC_OscConfig+0x2b4>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fb fc10 	bl	8001b50 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006334:	f7fb fc0c 	bl	8001b50 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e164      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	4b26      	ldr	r3, [pc, #152]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x200>
 8006352:	e015      	b.n	8006380 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <HAL_RCC_OscConfig+0x2b4>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800635a:	f7fb fbf9 	bl	8001b50 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006362:	f7fb fbf5 	bl	8001b50 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e14d      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006374:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1f0      	bne.n	8006362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a0 	beq.w	80064ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800638e:	2300      	movs	r3, #0
 8006390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006392:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10f      	bne.n	80063be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	6413      	str	r3, [r2, #64]	; 0x40
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_OscConfig+0x2b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d121      	bne.n	800640e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <HAL_RCC_OscConfig+0x2b8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a07      	ldr	r2, [pc, #28]	; (80063ec <HAL_RCC_OscConfig+0x2b8>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d6:	f7fb fbbb 	bl	8001b50 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063dc:	e011      	b.n	8006402 <HAL_RCC_OscConfig+0x2ce>
 80063de:	bf00      	nop
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470000 	.word	0x42470000
 80063e8:	42470e80 	.word	0x42470e80
 80063ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f0:	f7fb fbae 	bl	8001b50 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e106      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006402:	4b85      	ldr	r3, [pc, #532]	; (8006618 <HAL_RCC_OscConfig+0x4e4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d106      	bne.n	8006424 <HAL_RCC_OscConfig+0x2f0>
 8006416:	4b81      	ldr	r3, [pc, #516]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a80      	ldr	r2, [pc, #512]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	e01c      	b.n	800645e <HAL_RCC_OscConfig+0x32a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d10c      	bne.n	8006446 <HAL_RCC_OscConfig+0x312>
 800642c:	4b7b      	ldr	r3, [pc, #492]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	4a7a      	ldr	r2, [pc, #488]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6713      	str	r3, [r2, #112]	; 0x70
 8006438:	4b78      	ldr	r3, [pc, #480]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4a77      	ldr	r2, [pc, #476]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	e00b      	b.n	800645e <HAL_RCC_OscConfig+0x32a>
 8006446:	4b75      	ldr	r3, [pc, #468]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4a74      	ldr	r2, [pc, #464]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	; 0x70
 8006452:	4b72      	ldr	r3, [pc, #456]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4a71      	ldr	r2, [pc, #452]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d015      	beq.n	8006492 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006466:	f7fb fb73 	bl	8001b50 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fb fb6f 	bl	8001b50 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	; 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0c5      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006484:	4b65      	ldr	r3, [pc, #404]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ee      	beq.n	800646e <HAL_RCC_OscConfig+0x33a>
 8006490:	e014      	b.n	80064bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006492:	f7fb fb5d 	bl	8001b50 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fb fb59 	bl	8001b50 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e0af      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b0:	4b5a      	ldr	r3, [pc, #360]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ee      	bne.n	800649a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d105      	bne.n	80064ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c2:	4b56      	ldr	r3, [pc, #344]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	4a55      	ldr	r2, [pc, #340]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 809b 	beq.w	800660e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d05c      	beq.n	800659e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d141      	bne.n	8006570 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ec:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <HAL_RCC_OscConfig+0x4ec>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fb fb2d 	bl	8001b50 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fb fb29 	bl	8001b50 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e081      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	019b      	lsls	r3, r3, #6
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	3b01      	subs	r3, #1
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	4937      	ldr	r1, [pc, #220]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCC_OscConfig+0x4ec>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fb fb02 	bl	8001b50 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006550:	f7fb fafe 	bl	8001b50 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e056      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x41c>
 800656e:	e04e      	b.n	800660e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HAL_RCC_OscConfig+0x4ec>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006576:	f7fb faeb 	bl	8001b50 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800657e:	f7fb fae7 	bl	8001b50 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e03f      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006590:	4b22      	ldr	r3, [pc, #136]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f0      	bne.n	800657e <HAL_RCC_OscConfig+0x44a>
 800659c:	e037      	b.n	800660e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e032      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065aa:	4b1c      	ldr	r3, [pc, #112]	; (800661c <HAL_RCC_OscConfig+0x4e8>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d028      	beq.n	800660a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d121      	bne.n	800660a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d11a      	bne.n	800660a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d111      	bne.n	800660a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d107      	bne.n	800660a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40007000 	.word	0x40007000
 800661c:	40023800 	.word	0x40023800
 8006620:	42470060 	.word	0x42470060

08006624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0cc      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006638:	4b68      	ldr	r3, [pc, #416]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d90c      	bls.n	8006660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b65      	ldr	r3, [pc, #404]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b63      	ldr	r3, [pc, #396]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0b8      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006678:	4b59      	ldr	r3, [pc, #356]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a58      	ldr	r2, [pc, #352]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006690:	4b53      	ldr	r3, [pc, #332]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4a52      	ldr	r2, [pc, #328]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800669a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800669c:	4b50      	ldr	r3, [pc, #320]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	494d      	ldr	r1, [pc, #308]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d044      	beq.n	8006744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d107      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c2:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e07f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d003      	beq.n	80066e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d107      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e2:	4b3f      	ldr	r3, [pc, #252]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e06f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e067      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006702:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f023 0203 	bic.w	r2, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4934      	ldr	r1, [pc, #208]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006714:	f7fb fa1c 	bl	8001b50 <HAL_GetTick>
 8006718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	e00a      	b.n	8006732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800671c:	f7fb fa18 	bl	8001b50 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	f241 3288 	movw	r2, #5000	; 0x1388
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e04f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006732:	4b2b      	ldr	r3, [pc, #172]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 020c 	and.w	r2, r3, #12
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	429a      	cmp	r2, r3
 8006742:	d1eb      	bne.n	800671c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006744:	4b25      	ldr	r3, [pc, #148]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d20c      	bcs.n	800676c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b22      	ldr	r3, [pc, #136]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800675a:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e032      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006778:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4916      	ldr	r1, [pc, #88]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	4313      	orrs	r3, r2
 8006788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	490e      	ldr	r1, [pc, #56]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067aa:	f000 f821 	bl	80067f0 <HAL_RCC_GetSysClockFreq>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	490a      	ldr	r1, [pc, #40]	; (80067e4 <HAL_RCC_ClockConfig+0x1c0>)
 80067bc:	5ccb      	ldrb	r3, [r1, r3]
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	4a09      	ldr	r2, [pc, #36]	; (80067e8 <HAL_RCC_ClockConfig+0x1c4>)
 80067c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <HAL_RCC_ClockConfig+0x1c8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fb f84e 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023c00 	.word	0x40023c00
 80067e0:	40023800 	.word	0x40023800
 80067e4:	08013bdc 	.word	0x08013bdc
 80067e8:	20000018 	.word	0x20000018
 80067ec:	2000001c 	.word	0x2000001c

080067f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	2300      	movs	r3, #0
 8006802:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006808:	4b67      	ldr	r3, [pc, #412]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b08      	cmp	r3, #8
 8006812:	d00d      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0x40>
 8006814:	2b08      	cmp	r3, #8
 8006816:	f200 80bd 	bhi.w	8006994 <HAL_RCC_GetSysClockFreq+0x1a4>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0x34>
 800681e:	2b04      	cmp	r3, #4
 8006820:	d003      	beq.n	800682a <HAL_RCC_GetSysClockFreq+0x3a>
 8006822:	e0b7      	b.n	8006994 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006824:	4b61      	ldr	r3, [pc, #388]	; (80069ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006826:	60bb      	str	r3, [r7, #8]
       break;
 8006828:	e0b7      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800682a:	4b61      	ldr	r3, [pc, #388]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800682c:	60bb      	str	r3, [r7, #8]
      break;
 800682e:	e0b4      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006830:	4b5d      	ldr	r3, [pc, #372]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006838:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800683a:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d04d      	beq.n	80068e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006846:	4b58      	ldr	r3, [pc, #352]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	099b      	lsrs	r3, r3, #6
 800684c:	461a      	mov	r2, r3
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006856:	f04f 0100 	mov.w	r1, #0
 800685a:	ea02 0800 	and.w	r8, r2, r0
 800685e:	ea03 0901 	and.w	r9, r3, r1
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	014b      	lsls	r3, r1, #5
 8006870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006874:	0142      	lsls	r2, r0, #5
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	ebb0 0008 	subs.w	r0, r0, r8
 800687e:	eb61 0109 	sbc.w	r1, r1, r9
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	018b      	lsls	r3, r1, #6
 800688c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006890:	0182      	lsls	r2, r0, #6
 8006892:	1a12      	subs	r2, r2, r0
 8006894:	eb63 0301 	sbc.w	r3, r3, r1
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	00d9      	lsls	r1, r3, #3
 80068a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068a6:	00d0      	lsls	r0, r2, #3
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	eb12 0208 	adds.w	r2, r2, r8
 80068b0:	eb43 0309 	adc.w	r3, r3, r9
 80068b4:	f04f 0000 	mov.w	r0, #0
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	0259      	lsls	r1, r3, #9
 80068be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80068c2:	0250      	lsls	r0, r2, #9
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	f7f9 fc92 	bl	80001fc <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4613      	mov	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e04a      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e2:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	461a      	mov	r2, r3
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068f2:	f04f 0100 	mov.w	r1, #0
 80068f6:	ea02 0400 	and.w	r4, r2, r0
 80068fa:	ea03 0501 	and.w	r5, r3, r1
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	014b      	lsls	r3, r1, #5
 800690c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006910:	0142      	lsls	r2, r0, #5
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	1b00      	subs	r0, r0, r4
 8006918:	eb61 0105 	sbc.w	r1, r1, r5
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	018b      	lsls	r3, r1, #6
 8006926:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800692a:	0182      	lsls	r2, r0, #6
 800692c:	1a12      	subs	r2, r2, r0
 800692e:	eb63 0301 	sbc.w	r3, r3, r1
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	00d9      	lsls	r1, r3, #3
 800693c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006940:	00d0      	lsls	r0, r2, #3
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	1912      	adds	r2, r2, r4
 8006948:	eb45 0303 	adc.w	r3, r5, r3
 800694c:	f04f 0000 	mov.w	r0, #0
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	0299      	lsls	r1, r3, #10
 8006956:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800695a:	0290      	lsls	r0, r2, #10
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f7f9 fc46 	bl	80001fc <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4613      	mov	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	3301      	adds	r3, #1
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	60bb      	str	r3, [r7, #8]
      break;
 8006992:	e002      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006996:	60bb      	str	r3, [r7, #8]
      break;
 8006998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800699a:	68bb      	ldr	r3, [r7, #8]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80069a6:	bf00      	nop
 80069a8:	40023800 	.word	0x40023800
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	007a1200 	.word	0x007a1200

080069b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000018 	.word	0x20000018

080069cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069d0:	f7ff fff0 	bl	80069b4 <HAL_RCC_GetHCLKFreq>
 80069d4:	4602      	mov	r2, r0
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	0a9b      	lsrs	r3, r3, #10
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	4903      	ldr	r1, [pc, #12]	; (80069f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e2:	5ccb      	ldrb	r3, [r1, r3]
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	40023800 	.word	0x40023800
 80069f0:	08013bec 	.word	0x08013bec

080069f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069f8:	f7ff ffdc 	bl	80069b4 <HAL_RCC_GetHCLKFreq>
 80069fc:	4602      	mov	r2, r0
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	0b5b      	lsrs	r3, r3, #13
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	4903      	ldr	r1, [pc, #12]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a0a:	5ccb      	ldrb	r3, [r1, r3]
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40023800 	.word	0x40023800
 8006a18:	08013bec 	.word	0x08013bec

08006a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	220f      	movs	r2, #15
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a2c:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <HAL_RCC_GetClockConfig+0x5c>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0203 	and.w	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a38:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a44:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <HAL_RCC_GetClockConfig+0x5c>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <HAL_RCC_GetClockConfig+0x5c>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	08db      	lsrs	r3, r3, #3
 8006a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a5e:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <HAL_RCC_GetClockConfig+0x60>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	40023c00 	.word	0x40023c00

08006a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d075      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ab4:	4bad      	ldr	r3, [pc, #692]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aba:	f7fb f849 	bl	8001b50 <HAL_GetTick>
 8006abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ac2:	f7fb f845 	bl	8001b50 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e18b      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ad4:	4ba6      	ldr	r3, [pc, #664]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f0      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	019a      	lsls	r2, r3, #6
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	071b      	lsls	r3, r3, #28
 8006af8:	499d      	ldr	r1, [pc, #628]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01f      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b0c:	4b98      	ldr	r3, [pc, #608]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b12:	0f1b      	lsrs	r3, r3, #28
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	019a      	lsls	r2, r3, #6
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	061b      	lsls	r3, r3, #24
 8006b26:	431a      	orrs	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	071b      	lsls	r3, r3, #28
 8006b2c:	4990      	ldr	r1, [pc, #576]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b34:	4b8e      	ldr	r3, [pc, #568]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3a:	f023 021f 	bic.w	r2, r3, #31
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	498a      	ldr	r1, [pc, #552]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	019a      	lsls	r2, r3, #6
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	071b      	lsls	r3, r3, #28
 8006b6c:	4980      	ldr	r1, [pc, #512]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b74:	4b7d      	ldr	r3, [pc, #500]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b7a:	f7fa ffe9 	bl	8001b50 <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b80:	e008      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b82:	f7fa ffe5 	bl	8001b50 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e12b      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b94:	4b76      	ldr	r3, [pc, #472]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0f0      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d079      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bb8:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bbe:	f7fa ffc7 	bl	8001b50 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bc6:	f7fa ffc3 	bl	8001b50 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e109      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bd8:	4b65      	ldr	r3, [pc, #404]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be4:	d0ef      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bf2:	4b5f      	ldr	r3, [pc, #380]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	0f1b      	lsrs	r3, r3, #28
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	019a      	lsls	r2, r3, #6
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	061b      	lsls	r3, r3, #24
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	071b      	lsls	r3, r3, #28
 8006c12:	4957      	ldr	r1, [pc, #348]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c1a:	4b55      	ldr	r3, [pc, #340]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	4950      	ldr	r1, [pc, #320]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01e      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c40:	4b4b      	ldr	r3, [pc, #300]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	0e1b      	lsrs	r3, r3, #24
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	019a      	lsls	r2, r3, #6
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	071b      	lsls	r3, r3, #28
 8006c60:	4943      	ldr	r1, [pc, #268]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c68:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	493e      	ldr	r1, [pc, #248]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c7e:	4b3d      	ldr	r3, [pc, #244]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c84:	f7fa ff64 	bl	8001b50 <HAL_GetTick>
 8006c88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c8c:	f7fa ff60 	bl	8001b50 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e0a6      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c9e:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006caa:	d1ef      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 808d 	beq.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	4a2b      	ldr	r2, [pc, #172]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cca:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cd6:	4b28      	ldr	r3, [pc, #160]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce2:	f7fa ff35 	bl	8001b50 <HAL_GetTick>
 8006ce6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cea:	f7fa ff31 	bl	8001b50 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e077      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d08:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d039      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d032      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d11e      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d4e:	f7fa feff 	bl	8001b50 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d54:	e014      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fa fefb 	bl	8001b50 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d90b      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e03f      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006d6c:	42470068 	.word	0x42470068
 8006d70:	40023800 	.word	0x40023800
 8006d74:	42470070 	.word	0x42470070
 8006d78:	40007000 	.word	0x40007000
 8006d7c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d80:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0e4      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d98:	d10d      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dae:	4911      	ldr	r1, [pc, #68]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]
 8006db4:	e005      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dc0:	6093      	str	r3, [r2, #8]
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dce:	4909      	ldr	r1, [pc, #36]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006de8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40023800 	.word	0x40023800
 8006df8:	424711e0 	.word	0x424711e0

08006dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d13e      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d12f      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e30:	4b1e      	ldr	r3, [pc, #120]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e32:	617b      	str	r3, [r7, #20]
          break;
 8006e34:	e02f      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006e36:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e42:	d108      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e44:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	e007      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e56:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e5e:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6c:	099b      	lsrs	r3, r3, #6
 8006e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e80:	0f1b      	lsrs	r3, r3, #28
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]
          break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
          break;
 8006e94:	bf00      	nop
        }
      }
      break;
 8006e96:	bf00      	nop
    }
  }
  return frequency;
 8006e98:	697b      	ldr	r3, [r7, #20]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00bb8000 	.word	0x00bb8000
 8006eb0:	007a1200 	.word	0x007a1200
 8006eb4:	00f42400 	.word	0x00f42400

08006eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e041      	b.n	8006f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f839 	bl	8006f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f000 f9d8 	bl	80072ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d001      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e04e      	b.n	8007022 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a23      	ldr	r2, [pc, #140]	; (8007030 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d022      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fae:	d01d      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d013      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1c      	ldr	r2, [pc, #112]	; (800703c <HAL_TIM_Base_Start_IT+0xd0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a19      	ldr	r2, [pc, #100]	; (8007044 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x80>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d111      	bne.n	8007010 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b06      	cmp	r3, #6
 8006ffc:	d010      	beq.n	8007020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700e:	e007      	b.n	8007020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40010000 	.word	0x40010000
 8007034:	40000400 	.word	0x40000400
 8007038:	40000800 	.word	0x40000800
 800703c:	40000c00 	.word	0x40000c00
 8007040:	40010400 	.word	0x40010400
 8007044:	40014000 	.word	0x40014000
 8007048:	40001800 	.word	0x40001800

0800704c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d122      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b02      	cmp	r3, #2
 800706e:	d11b      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0202 	mvn.w	r2, #2
 8007078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8ee 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8e0 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8f1 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d122      	bne.n	80070fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d11b      	bne.n	80070fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0204 	mvn.w	r2, #4
 80070cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8c4 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8b6 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f8c7 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b08      	cmp	r3, #8
 8007108:	d122      	bne.n	8007150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b08      	cmp	r3, #8
 8007116:	d11b      	bne.n	8007150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0208 	mvn.w	r2, #8
 8007120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f89a 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 800713c:	e005      	b.n	800714a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f88c 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f89d 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0310 	and.w	r3, r3, #16
 800715a:	2b10      	cmp	r3, #16
 800715c:	d122      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b10      	cmp	r3, #16
 800716a:	d11b      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0210 	mvn.w	r2, #16
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2208      	movs	r2, #8
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f870 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8007190:	e005      	b.n	800719e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f862 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f873 	bl	8007284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10e      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d107      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0201 	mvn.w	r2, #1
 80071c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7f9 fed0 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	d10e      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d107      	bne.n	80071fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f902 	bl	8007400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f838 	bl	8007298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d10e      	bne.n	8007254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d107      	bne.n	8007254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0220 	mvn.w	r2, #32
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8cc 	bl	80073ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a40      	ldr	r2, [pc, #256]	; (80073c0 <TIM_Base_SetConfig+0x114>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ca:	d00f      	beq.n	80072ec <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a3d      	ldr	r2, [pc, #244]	; (80073c4 <TIM_Base_SetConfig+0x118>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00b      	beq.n	80072ec <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a3c      	ldr	r2, [pc, #240]	; (80073c8 <TIM_Base_SetConfig+0x11c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d007      	beq.n	80072ec <TIM_Base_SetConfig+0x40>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a3b      	ldr	r2, [pc, #236]	; (80073cc <TIM_Base_SetConfig+0x120>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_Base_SetConfig+0x40>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a3a      	ldr	r2, [pc, #232]	; (80073d0 <TIM_Base_SetConfig+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d108      	bne.n	80072fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a2f      	ldr	r2, [pc, #188]	; (80073c0 <TIM_Base_SetConfig+0x114>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d02b      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730c:	d027      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a2c      	ldr	r2, [pc, #176]	; (80073c4 <TIM_Base_SetConfig+0x118>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d023      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a2b      	ldr	r2, [pc, #172]	; (80073c8 <TIM_Base_SetConfig+0x11c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01f      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2a      	ldr	r2, [pc, #168]	; (80073cc <TIM_Base_SetConfig+0x120>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01b      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a29      	ldr	r2, [pc, #164]	; (80073d0 <TIM_Base_SetConfig+0x124>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d017      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a28      	ldr	r2, [pc, #160]	; (80073d4 <TIM_Base_SetConfig+0x128>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a27      	ldr	r2, [pc, #156]	; (80073d8 <TIM_Base_SetConfig+0x12c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00f      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a26      	ldr	r2, [pc, #152]	; (80073dc <TIM_Base_SetConfig+0x130>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00b      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a25      	ldr	r2, [pc, #148]	; (80073e0 <TIM_Base_SetConfig+0x134>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d007      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a24      	ldr	r2, [pc, #144]	; (80073e4 <TIM_Base_SetConfig+0x138>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d003      	beq.n	800735e <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a23      	ldr	r2, [pc, #140]	; (80073e8 <TIM_Base_SetConfig+0x13c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d108      	bne.n	8007370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <TIM_Base_SetConfig+0x114>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_Base_SetConfig+0xf8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <TIM_Base_SetConfig+0x124>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d103      	bne.n	80073ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	615a      	str	r2, [r3, #20]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010000 	.word	0x40010000
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	40010400 	.word	0x40010400
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800
 80073e0:	40001800 	.word	0x40001800
 80073e4:	40001c00 	.word	0x40001c00
 80073e8:	40002000 	.word	0x40002000

080073ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e03f      	b.n	80074a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fa f9ce 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f905 	bl	8007668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800746c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800747c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800748c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b08a      	sub	sp, #40	; 0x28
 80074b2:	af02      	add	r7, sp, #8
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d17c      	bne.n	80075c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_UART_Transmit+0x2c>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e075      	b.n	80075ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Transmit+0x3e>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e06e      	b.n	80075ca <HAL_UART_Transmit+0x11c>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2221      	movs	r2, #33	; 0x21
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007502:	f7fa fb25 	bl	8001b50 <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	88fa      	ldrh	r2, [r7, #6]
 800750c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751c:	d108      	bne.n	8007530 <HAL_UART_Transmit+0x82>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e003      	b.n	8007538 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007540:	e02a      	b.n	8007598 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f840 	bl	80075d2 <UART_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e036      	b.n	80075ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	3302      	adds	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e007      	b.n	800758a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	3301      	adds	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1cf      	bne.n	8007542 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2140      	movs	r1, #64	; 0x40
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f810 	bl	80075d2 <UART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e006      	b.n	80075ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2220      	movs	r2, #32
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	e000      	b.n	80075ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075c8:	2302      	movs	r3, #2
  }
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e2:	e02c      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d028      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0x30>
 80075f2:	f7fa faad 	bl	8001b50 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d21d      	bcs.n	800763e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007610:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695a      	ldr	r2, [r3, #20]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00f      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d0c3      	beq.n	80075e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	b09f      	sub	sp, #124	; 0x7c
 800766e:	af00      	add	r7, sp, #0
 8007670:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800767c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767e:	68d9      	ldr	r1, [r3, #12]
 8007680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	ea40 0301 	orr.w	r3, r0, r1
 8007688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	431a      	orrs	r2, r3
 8007694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	431a      	orrs	r2, r3
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	4313      	orrs	r3, r2
 80076a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80076a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076ac:	f021 010c 	bic.w	r1, r1, #12
 80076b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b6:	430b      	orrs	r3, r1
 80076b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	6999      	ldr	r1, [r3, #24]
 80076c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	ea40 0301 	orr.w	r3, r0, r1
 80076d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4bc5      	ldr	r3, [pc, #788]	; (80079ec <UART_SetConfig+0x384>)
 80076d8:	429a      	cmp	r2, r3
 80076da:	d004      	beq.n	80076e6 <UART_SetConfig+0x7e>
 80076dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	4bc3      	ldr	r3, [pc, #780]	; (80079f0 <UART_SetConfig+0x388>)
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d103      	bne.n	80076ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076e6:	f7ff f985 	bl	80069f4 <HAL_RCC_GetPCLK2Freq>
 80076ea:	6778      	str	r0, [r7, #116]	; 0x74
 80076ec:	e002      	b.n	80076f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076ee:	f7ff f96d 	bl	80069cc <HAL_RCC_GetPCLK1Freq>
 80076f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fc:	f040 80b6 	bne.w	800786c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007702:	461c      	mov	r4, r3
 8007704:	f04f 0500 	mov.w	r5, #0
 8007708:	4622      	mov	r2, r4
 800770a:	462b      	mov	r3, r5
 800770c:	1891      	adds	r1, r2, r2
 800770e:	6439      	str	r1, [r7, #64]	; 0x40
 8007710:	415b      	adcs	r3, r3
 8007712:	647b      	str	r3, [r7, #68]	; 0x44
 8007714:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007718:	1912      	adds	r2, r2, r4
 800771a:	eb45 0303 	adc.w	r3, r5, r3
 800771e:	f04f 0000 	mov.w	r0, #0
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	00d9      	lsls	r1, r3, #3
 8007728:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800772c:	00d0      	lsls	r0, r2, #3
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	1911      	adds	r1, r2, r4
 8007734:	6639      	str	r1, [r7, #96]	; 0x60
 8007736:	416b      	adcs	r3, r5
 8007738:	667b      	str	r3, [r7, #100]	; 0x64
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	461a      	mov	r2, r3
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	1891      	adds	r1, r2, r2
 8007746:	63b9      	str	r1, [r7, #56]	; 0x38
 8007748:	415b      	adcs	r3, r3
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800774c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007750:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007754:	f7f8 fd52 	bl	80001fc <__aeabi_uldivmod>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4ba5      	ldr	r3, [pc, #660]	; (80079f4 <UART_SetConfig+0x38c>)
 800775e:	fba3 2302 	umull	r2, r3, r3, r2
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	011e      	lsls	r6, r3, #4
 8007766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007768:	461c      	mov	r4, r3
 800776a:	f04f 0500 	mov.w	r5, #0
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	1891      	adds	r1, r2, r2
 8007774:	6339      	str	r1, [r7, #48]	; 0x30
 8007776:	415b      	adcs	r3, r3
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
 800777a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800777e:	1912      	adds	r2, r2, r4
 8007780:	eb45 0303 	adc.w	r3, r5, r3
 8007784:	f04f 0000 	mov.w	r0, #0
 8007788:	f04f 0100 	mov.w	r1, #0
 800778c:	00d9      	lsls	r1, r3, #3
 800778e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007792:	00d0      	lsls	r0, r2, #3
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	1911      	adds	r1, r2, r4
 800779a:	65b9      	str	r1, [r7, #88]	; 0x58
 800779c:	416b      	adcs	r3, r5
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	461a      	mov	r2, r3
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	1891      	adds	r1, r2, r2
 80077ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80077ae:	415b      	adcs	r3, r3
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077ba:	f7f8 fd1f 	bl	80001fc <__aeabi_uldivmod>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4b8c      	ldr	r3, [pc, #560]	; (80079f4 <UART_SetConfig+0x38c>)
 80077c4:	fba3 1302 	umull	r1, r3, r3, r2
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	2164      	movs	r1, #100	; 0x64
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	3332      	adds	r3, #50	; 0x32
 80077d6:	4a87      	ldr	r2, [pc, #540]	; (80079f4 <UART_SetConfig+0x38c>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077e4:	441e      	add	r6, r3
 80077e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e8:	4618      	mov	r0, r3
 80077ea:	f04f 0100 	mov.w	r1, #0
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	1894      	adds	r4, r2, r2
 80077f4:	623c      	str	r4, [r7, #32]
 80077f6:	415b      	adcs	r3, r3
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
 80077fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fe:	1812      	adds	r2, r2, r0
 8007800:	eb41 0303 	adc.w	r3, r1, r3
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	f04f 0500 	mov.w	r5, #0
 800780c:	00dd      	lsls	r5, r3, #3
 800780e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007812:	00d4      	lsls	r4, r2, #3
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	1814      	adds	r4, r2, r0
 800781a:	653c      	str	r4, [r7, #80]	; 0x50
 800781c:	414b      	adcs	r3, r1
 800781e:	657b      	str	r3, [r7, #84]	; 0x54
 8007820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	461a      	mov	r2, r3
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	1891      	adds	r1, r2, r2
 800782c:	61b9      	str	r1, [r7, #24]
 800782e:	415b      	adcs	r3, r3
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007836:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800783a:	f7f8 fcdf 	bl	80001fc <__aeabi_uldivmod>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4b6c      	ldr	r3, [pc, #432]	; (80079f4 <UART_SetConfig+0x38c>)
 8007844:	fba3 1302 	umull	r1, r3, r3, r2
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	3332      	adds	r3, #50	; 0x32
 8007856:	4a67      	ldr	r2, [pc, #412]	; (80079f4 <UART_SetConfig+0x38c>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f003 0207 	and.w	r2, r3, #7
 8007862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4432      	add	r2, r6
 8007868:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800786a:	e0b9      	b.n	80079e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800786c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786e:	461c      	mov	r4, r3
 8007870:	f04f 0500 	mov.w	r5, #0
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	1891      	adds	r1, r2, r2
 800787a:	6139      	str	r1, [r7, #16]
 800787c:	415b      	adcs	r3, r3
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007884:	1912      	adds	r2, r2, r4
 8007886:	eb45 0303 	adc.w	r3, r5, r3
 800788a:	f04f 0000 	mov.w	r0, #0
 800788e:	f04f 0100 	mov.w	r1, #0
 8007892:	00d9      	lsls	r1, r3, #3
 8007894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007898:	00d0      	lsls	r0, r2, #3
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	eb12 0804 	adds.w	r8, r2, r4
 80078a2:	eb43 0905 	adc.w	r9, r3, r5
 80078a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	008b      	lsls	r3, r1, #2
 80078ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078be:	0082      	lsls	r2, r0, #2
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f8 fc9a 	bl	80001fc <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4b49      	ldr	r3, [pc, #292]	; (80079f4 <UART_SetConfig+0x38c>)
 80078ce:	fba3 2302 	umull	r2, r3, r3, r2
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	011e      	lsls	r6, r3, #4
 80078d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d8:	4618      	mov	r0, r3
 80078da:	f04f 0100 	mov.w	r1, #0
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	1894      	adds	r4, r2, r2
 80078e4:	60bc      	str	r4, [r7, #8]
 80078e6:	415b      	adcs	r3, r3
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ee:	1812      	adds	r2, r2, r0
 80078f0:	eb41 0303 	adc.w	r3, r1, r3
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	f04f 0500 	mov.w	r5, #0
 80078fc:	00dd      	lsls	r5, r3, #3
 80078fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007902:	00d4      	lsls	r4, r2, #3
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	1814      	adds	r4, r2, r0
 800790a:	64bc      	str	r4, [r7, #72]	; 0x48
 800790c:	414b      	adcs	r3, r1
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4618      	mov	r0, r3
 8007916:	f04f 0100 	mov.w	r1, #0
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	008b      	lsls	r3, r1, #2
 8007924:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007928:	0082      	lsls	r2, r0, #2
 800792a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800792e:	f7f8 fc65 	bl	80001fc <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b2f      	ldr	r3, [pc, #188]	; (80079f4 <UART_SetConfig+0x38c>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	; 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	3332      	adds	r3, #50	; 0x32
 800794a:	4a2a      	ldr	r2, [pc, #168]	; (80079f4 <UART_SetConfig+0x38c>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007956:	441e      	add	r6, r3
 8007958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795a:	4618      	mov	r0, r3
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	1894      	adds	r4, r2, r2
 8007966:	603c      	str	r4, [r7, #0]
 8007968:	415b      	adcs	r3, r3
 800796a:	607b      	str	r3, [r7, #4]
 800796c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007970:	1812      	adds	r2, r2, r0
 8007972:	eb41 0303 	adc.w	r3, r1, r3
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	f04f 0500 	mov.w	r5, #0
 800797e:	00dd      	lsls	r5, r3, #3
 8007980:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007984:	00d4      	lsls	r4, r2, #3
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	eb12 0a00 	adds.w	sl, r2, r0
 800798e:	eb43 0b01 	adc.w	fp, r3, r1
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4618      	mov	r0, r3
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	008b      	lsls	r3, r1, #2
 80079a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079aa:	0082      	lsls	r2, r0, #2
 80079ac:	4650      	mov	r0, sl
 80079ae:	4659      	mov	r1, fp
 80079b0:	f7f8 fc24 	bl	80001fc <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <UART_SetConfig+0x38c>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <UART_SetConfig+0x38c>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4432      	add	r2, r6
 80079de:	609a      	str	r2, [r3, #8]
}
 80079e0:	bf00      	nop
 80079e2:	377c      	adds	r7, #124	; 0x7c
 80079e4:	46bd      	mov	sp, r7
 80079e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ea:	bf00      	nop
 80079ec:	40011000 	.word	0x40011000
 80079f0:	40011400 	.word	0x40011400
 80079f4:	51eb851f 	.word	0x51eb851f

080079f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079f8:	b084      	sub	sp, #16
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	f107 001c 	add.w	r0, r7, #28
 8007a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d122      	bne.n	8007a56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d105      	bne.n	8007a4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f94a 	bl	8007ce4 <USB_CoreReset>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
 8007a54:	e01a      	b.n	8007a8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f93e 	bl	8007ce4 <USB_CoreReset>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a7e:	e005      	b.n	8007a8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10b      	bne.n	8007aaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f043 0206 	orr.w	r2, r3, #6
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ab6:	b004      	add	sp, #16
 8007ab8:	4770      	bx	lr

08007aba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f043 0201 	orr.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f023 0201 	bic.w	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d106      	bne.n	8007b2a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e00b      	b.n	8007b42 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	60da      	str	r2, [r3, #12]
 8007b3c:	e001      	b.n	8007b42 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e003      	b.n	8007b4a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b42:	2032      	movs	r0, #50	; 0x32
 8007b44:	f7fa f810 	bl	8001b68 <HAL_Delay>

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	019b      	lsls	r3, r3, #6
 8007b66:	f043 0220 	orr.w	r2, r3, #32
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a09      	ldr	r2, [pc, #36]	; (8007b9c <USB_FlushTxFifo+0x48>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e006      	b.n	8007b8e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d0f0      	beq.n	8007b6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	00030d40 	.word	0x00030d40

08007ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <USB_FlushRxFifo+0x40>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d901      	bls.n	8007bc4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e006      	b.n	8007bd2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d0f0      	beq.n	8007bb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	00030d40 	.word	0x00030d40

08007be4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	71fb      	strb	r3, [r7, #7]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d11a      	bne.n	8007c40 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c0a:	88bb      	ldrh	r3, [r7, #4]
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e00f      	b.n	8007c38 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	031a      	lsls	r2, r3, #12
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c24:	461a      	mov	r2, r3
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	3301      	adds	r3, #1
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d3eb      	bcc.n	8007c18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3724      	adds	r7, #36	; 0x24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b089      	sub	sp, #36	; 0x24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	3303      	adds	r3, #3
 8007c68:	089b      	lsrs	r3, r3, #2
 8007c6a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	e00b      	b.n	8007c8a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	3304      	adds	r3, #4
 8007c82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	3301      	adds	r3, #1
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d3ef      	bcc.n	8007c72 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007c92:	69fb      	ldr	r3, [r7, #28]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3724      	adds	r7, #36	; 0x24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <USB_CoreReset+0x64>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d901      	bls.n	8007d02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e01b      	b.n	8007d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	daf2      	bge.n	8007cf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f043 0201 	orr.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a09      	ldr	r2, [pc, #36]	; (8007d48 <USB_CoreReset+0x64>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d901      	bls.n	8007d2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d0f0      	beq.n	8007d1a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	00030d40 	.word	0x00030d40

08007d4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	f107 001c 	add.w	r0, r7, #28
 8007d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d018      	beq.n	8007dd0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d10a      	bne.n	8007dba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007db2:	f043 0304 	orr.w	r3, r3, #4
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e014      	b.n	8007de4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dc8:	f023 0304 	bic.w	r3, r3, #4
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e009      	b.n	8007de4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dde:	f023 0304 	bic.w	r3, r3, #4
 8007de2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007de4:	2110      	movs	r1, #16
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff feb4 	bl	8007b54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fed7 	bl	8007ba0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	e015      	b.n	8007e24 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e04:	461a      	mov	r2, r3
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d3e5      	bcc.n	8007df8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8ac 	bl	8007f8c <USB_DriveVbus>

  HAL_Delay(200U);
 8007e34:	20c8      	movs	r0, #200	; 0xc8
 8007e36:	f7f9 fe97 	bl	8001b68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <USB_HostInit+0x164>)
 8007e60:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a13      	ldr	r2, [pc, #76]	; (8007eb4 <USB_HostInit+0x168>)
 8007e66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e6a:	e009      	b.n	8007e80 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2280      	movs	r2, #128	; 0x80
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a10      	ldr	r2, [pc, #64]	; (8007eb8 <USB_HostInit+0x16c>)
 8007e76:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a10      	ldr	r2, [pc, #64]	; (8007ebc <USB_HostInit+0x170>)
 8007e7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d105      	bne.n	8007e92 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f043 0210 	orr.w	r2, r3, #16
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <USB_HostInit+0x174>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eaa:	b004      	add	sp, #16
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	01000200 	.word	0x01000200
 8007eb4:	00e00300 	.word	0x00e00300
 8007eb8:	00600080 	.word	0x00600080
 8007ebc:	004000e0 	.word	0x004000e0
 8007ec0:	a3200008 	.word	0xa3200008

08007ec4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007efc:	4313      	orrs	r3, r2
 8007efe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d107      	bne.n	8007f16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f12:	6053      	str	r3, [r2, #4]
 8007f14:	e009      	b.n	8007f2a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d106      	bne.n	8007f2a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f22:	461a      	mov	r2, r3
 8007f24:	f241 7370 	movw	r3, #6000	; 0x1770
 8007f28:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f66:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f68:	2064      	movs	r0, #100	; 0x64
 8007f6a:	f7f9 fdfd 	bl	8001b68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f7c:	200a      	movs	r0, #10
 8007f7e:	f7f9 fdf3 	bl	8001b68 <HAL_Delay>

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007fb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d109      	bne.n	8007fd0 <USB_DriveVbus+0x44>
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d106      	bne.n	8007fd0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fda:	d109      	bne.n	8007ff0 <USB_DriveVbus+0x64>
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b085      	sub	sp, #20
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	0c5b      	lsrs	r3, r3, #17
 800801c:	f003 0303 	and.w	r3, r3, #3
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	b29b      	uxth	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	4608      	mov	r0, r1
 800805a:	4611      	mov	r1, r2
 800805c:	461a      	mov	r2, r3
 800805e:	4603      	mov	r3, r0
 8008060:	70fb      	strb	r3, [r7, #3]
 8008062:	460b      	mov	r3, r1
 8008064:	70bb      	strb	r3, [r7, #2]
 8008066:	4613      	mov	r3, r2
 8008068:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807e:	461a      	mov	r2, r3
 8008080:	f04f 33ff 	mov.w	r3, #4294967295
 8008084:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800808a:	2b03      	cmp	r3, #3
 800808c:	d87e      	bhi.n	800818c <USB_HC_Init+0x13c>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USB_HC_Init+0x44>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080a5 	.word	0x080080a5
 8008098:	0800814f 	.word	0x0800814f
 800809c:	080080a5 	.word	0x080080a5
 80080a0:	08008111 	.word	0x08008111
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b0:	461a      	mov	r2, r3
 80080b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80080b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80080b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da10      	bge.n	80080e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80080e0:	e057      	b.n	8008192 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d051      	beq.n	8008192 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	440a      	add	r2, r1
 8008104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800810c:	60d3      	str	r3, [r2, #12]
      break;
 800810e:	e040      	b.n	8008192 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811c:	461a      	mov	r2, r3
 800811e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008122:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008124:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008128:	2b00      	cmp	r3, #0
 800812a:	da34      	bge.n	8008196 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	440a      	add	r2, r1
 8008142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800814c:	e023      	b.n	8008196 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815a:	461a      	mov	r2, r3
 800815c:	f240 2325 	movw	r3, #549	; 0x225
 8008160:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008162:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008166:	2b00      	cmp	r3, #0
 8008168:	da17      	bge.n	800819a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	440a      	add	r2, r1
 8008180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008184:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008188:	60d3      	str	r3, [r2, #12]
      }
      break;
 800818a:	e006      	b.n	800819a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	77fb      	strb	r3, [r7, #31]
      break;
 8008190:	e004      	b.n	800819c <USB_HC_Init+0x14c>
      break;
 8008192:	bf00      	nop
 8008194:	e002      	b.n	800819c <USB_HC_Init+0x14c>
      break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <USB_HC_Init+0x14c>
      break;
 800819a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	2101      	movs	r1, #1
 80081ac:	fa01 f303 	lsl.w	r3, r1, r3
 80081b0:	6939      	ldr	r1, [r7, #16]
 80081b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081b6:	4313      	orrs	r3, r2
 80081b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80081c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da03      	bge.n	80081d6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80081ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	e001      	b.n	80081da <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ff0f 	bl	8007ffe <USB_GetHostSpeed>
 80081e0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d106      	bne.n	80081f8 <USB_HC_Init+0x1a8>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d003      	beq.n	80081f8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e001      	b.n	80081fc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081fc:	787b      	ldrb	r3, [r7, #1]
 80081fe:	059b      	lsls	r3, r3, #22
 8008200:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008204:	78bb      	ldrb	r3, [r7, #2]
 8008206:	02db      	lsls	r3, r3, #11
 8008208:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800820c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800820e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008212:	049b      	lsls	r3, r3, #18
 8008214:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008218:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800821a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800821c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008220:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	0159      	lsls	r1, r3, #5
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	440b      	add	r3, r1
 800822e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008232:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008238:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800823a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800823e:	2b03      	cmp	r3, #3
 8008240:	d10f      	bne.n	8008262 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	440a      	add	r2, r1
 8008258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008260:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008262:	7ffb      	ldrb	r3, [r7, #31]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008288:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d02d      	beq.n	80082f2 <USB_HC_StartXfer+0x86>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d129      	bne.n	80082f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d117      	bne.n	80082d4 <USB_HC_StartXfer+0x68>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	79db      	ldrb	r3, [r3, #7]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <USB_HC_StartXfer+0x48>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	79db      	ldrb	r3, [r3, #7]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d10f      	bne.n	80082d4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <USB_HC_StartXfer+0x86>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d107      	bne.n	80082f2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	4619      	mov	r1, r3
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fa2f 	bl	800874c <USB_DoPing>
      return HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e0f8      	b.n	80084e4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d018      	beq.n	800832c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	8912      	ldrh	r2, [r2, #8]
 8008302:	4413      	add	r3, r2
 8008304:	3b01      	subs	r3, #1
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	8912      	ldrh	r2, [r2, #8]
 800830a:	fbb3 f3f2 	udiv	r3, r3, r2
 800830e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008310:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008312:	8b7b      	ldrh	r3, [r7, #26]
 8008314:	429a      	cmp	r2, r3
 8008316:	d90b      	bls.n	8008330 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008318:	8b7b      	ldrh	r3, [r7, #26]
 800831a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800831c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	8912      	ldrh	r2, [r2, #8]
 8008322:	fb02 f203 	mul.w	r2, r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	611a      	str	r2, [r3, #16]
 800832a:	e001      	b.n	8008330 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800832c:	2301      	movs	r3, #1
 800832e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	8912      	ldrh	r2, [r2, #8]
 800833e:	fb02 f203 	mul.w	r2, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	611a      	str	r2, [r3, #16]
 8008346:	e003      	b.n	8008350 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800835a:	04d9      	lsls	r1, r3, #19
 800835c:	4b63      	ldr	r3, [pc, #396]	; (80084ec <USB_HC_StartXfer+0x280>)
 800835e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008360:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	7a9b      	ldrb	r3, [r3, #10]
 8008366:	075b      	lsls	r3, r3, #29
 8008368:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800836c:	69f9      	ldr	r1, [r7, #28]
 800836e:	0148      	lsls	r0, r1, #5
 8008370:	6a39      	ldr	r1, [r7, #32]
 8008372:	4401      	add	r1, r0
 8008374:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008378:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800837a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	68d9      	ldr	r1, [r3, #12]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	460a      	mov	r2, r1
 8008394:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf0c      	ite	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	2300      	movne	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	6a3a      	ldr	r2, [r7, #32]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	7e7b      	ldrb	r3, [r7, #25]
 80083de:	075b      	lsls	r3, r3, #29
 80083e0:	69f9      	ldr	r1, [r7, #28]
 80083e2:	0148      	lsls	r0, r1, #5
 80083e4:	6a39      	ldr	r1, [r7, #32]
 80083e6:	4401      	add	r1, r0
 80083e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008406:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	e003      	b.n	8008422 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008420:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008428:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	4413      	add	r3, r2
 8008432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008436:	461a      	mov	r2, r3
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e04e      	b.n	80084e4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	78db      	ldrb	r3, [r3, #3]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d149      	bne.n	80084e2 <USB_HC_StartXfer+0x276>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d045      	beq.n	80084e2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	79db      	ldrb	r3, [r3, #7]
 800845a:	2b03      	cmp	r3, #3
 800845c:	d830      	bhi.n	80084c0 <USB_HC_StartXfer+0x254>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <USB_HC_StartXfer+0x1f8>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008475 	.word	0x08008475
 8008468:	08008499 	.word	0x08008499
 800846c:	08008475 	.word	0x08008475
 8008470:	08008499 	.word	0x08008499
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	3303      	adds	r3, #3
 800847a:	089b      	lsrs	r3, r3, #2
 800847c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800847e:	8afa      	ldrh	r2, [r7, #22]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	b29b      	uxth	r3, r3
 8008486:	429a      	cmp	r2, r3
 8008488:	d91c      	bls.n	80084c4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f043 0220 	orr.w	r2, r3, #32
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	619a      	str	r2, [r3, #24]
        }
        break;
 8008496:	e015      	b.n	80084c4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	3303      	adds	r3, #3
 800849e:	089b      	lsrs	r3, r3, #2
 80084a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084a2:	8afa      	ldrh	r2, [r7, #22]
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d90a      	bls.n	80084c8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80084be:	e003      	b.n	80084c8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <USB_HC_StartXfer+0x25e>
        break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <USB_HC_StartXfer+0x25e>
        break;
 80084c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	68d9      	ldr	r1, [r3, #12]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2000      	movs	r0, #0
 80084da:	9000      	str	r0, [sp, #0]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fb81 	bl	8007be4 <USB_WritePacket>
  }

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3728      	adds	r7, #40	; 0x28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	1ff80000 	.word	0x1ff80000

080084f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	b29b      	uxth	r3, r3
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008512:	b480      	push	{r7}
 8008514:	b089      	sub	sp, #36	; 0x24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	0c9b      	lsrs	r3, r3, #18
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	0fdb      	lsrs	r3, r3, #31
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b20      	cmp	r3, #32
 8008560:	d104      	bne.n	800856c <USB_HC_Halt+0x5a>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	e0e8      	b.n	800873e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <USB_HC_Halt+0x66>
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d173      	bne.n	8008660 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	440a      	add	r2, r1
 800858e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008596:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f040 80cb 	bne.w	800873c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d143      	bne.n	800863a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	440a      	add	r2, r1
 8008608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008610:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3301      	adds	r3, #1
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800861e:	d81d      	bhi.n	800865c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	4413      	add	r3, r2
 8008628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008636:	d0ec      	beq.n	8008612 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008638:	e080      	b.n	800873c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	4413      	add	r3, r2
 8008642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	0151      	lsls	r1, r2, #5
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	440a      	add	r2, r1
 8008650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008658:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800865a:	e06f      	b.n	800873c <USB_HC_Halt+0x22a>
            break;
 800865c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800865e:	e06d      	b.n	800873c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800867e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d143      	bne.n	8008718 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	4413      	add	r3, r2
 8008698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086ee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	3301      	adds	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086fc:	d81d      	bhi.n	800873a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008714:	d0ec      	beq.n	80086f0 <USB_HC_Halt+0x1de>
 8008716:	e011      	b.n	800873c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	e000      	b.n	800873c <USB_HC_Halt+0x22a>
          break;
 800873a:	bf00      	nop
    }
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3724      	adds	r7, #36	; 0x24
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008760:	2301      	movs	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	04da      	lsls	r2, r3, #19
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <USB_DoPing+0x74>)
 800876a:	4013      	ands	r3, r2
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	440a      	add	r2, r1
 8008774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008794:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800879c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087aa:	461a      	mov	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	1ff80000 	.word	0x1ff80000

080087c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff f981 	bl	8007adc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80087da:	2110      	movs	r1, #16
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f9b9 	bl	8007b54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff f9dc 	bl	8007ba0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	e01f      	b.n	800882e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008804:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800880c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008814:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008822:	461a      	mov	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	3301      	adds	r3, #1
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b0f      	cmp	r3, #15
 8008832:	d9dc      	bls.n	80087ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	e034      	b.n	80088a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008850:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008858:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008860:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886e:	461a      	mov	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3301      	adds	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008880:	d80c      	bhi.n	800889c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008898:	d0ec      	beq.n	8008874 <USB_StopHost+0xb0>
 800889a:	e000      	b.n	800889e <USB_StopHost+0xda>
        break;
 800889c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3301      	adds	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d9c7      	bls.n	800883a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b0:	461a      	mov	r2, r3
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295
 80088b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f04f 32ff 	mov.w	r2, #4294967295
 80088be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f8fa 	bl	8007aba <USB_EnableGlobalInt>

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80088d4:	4904      	ldr	r1, [pc, #16]	; (80088e8 <MX_FATFS_Init+0x18>)
 80088d6:	4805      	ldr	r0, [pc, #20]	; (80088ec <MX_FATFS_Init+0x1c>)
 80088d8:	f007 fd76 	bl	80103c8 <FATFS_LinkDriver>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <MX_FATFS_Init+0x20>)
 80088e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088e4:	bf00      	nop
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20003848 	.word	0x20003848
 80088ec:	08013bfc 	.word	0x08013bfc
 80088f0:	200058e4 	.word	0x200058e4

080088f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	4619      	mov	r1, r3
 800892e:	4808      	ldr	r0, [pc, #32]	; (8008950 <USBH_status+0x34>)
 8008930:	f000 fe1a 	bl	8009568 <USBH_MSC_UnitIsReady>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <USBH_status+0x24>
  {
    res = RES_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e001      	b.n	8008944 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200058e8 	.word	0x200058e8

08008954 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b094      	sub	sp, #80	; 0x50
 8008958:	af02      	add	r7, sp, #8
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800896a:	7bf9      	ldrb	r1, [r7, #15]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4813      	ldr	r0, [pc, #76]	; (80089c4 <USBH_read+0x70>)
 8008976:	f000 fe41 	bl	80095fc <USBH_MSC_Read>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <USBH_read+0x34>
  {
    res = RES_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008986:	e017      	b.n	80089b8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008988:	f107 0210 	add.w	r2, r7, #16
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4619      	mov	r1, r3
 8008990:	480c      	ldr	r0, [pc, #48]	; (80089c4 <USBH_read+0x70>)
 8008992:	f000 fe0f 	bl	80095b4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008996:	7f7b      	ldrb	r3, [r7, #29]
 8008998:	2b3a      	cmp	r3, #58	; 0x3a
 800899a:	d005      	beq.n	80089a8 <USBH_read+0x54>
 800899c:	2b3a      	cmp	r3, #58	; 0x3a
 800899e:	dc07      	bgt.n	80089b0 <USBH_read+0x5c>
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d001      	beq.n	80089a8 <USBH_read+0x54>
 80089a4:	2b28      	cmp	r3, #40	; 0x28
 80089a6:	d103      	bne.n	80089b0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80089a8:	2303      	movs	r3, #3
 80089aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089ae:	e003      	b.n	80089b8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089b6:	bf00      	nop
    }
  }

  return res;
 80089b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3748      	adds	r7, #72	; 0x48
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200058e8 	.word	0x200058e8

080089c8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b094      	sub	sp, #80	; 0x50
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80089de:	7bf9      	ldrb	r1, [r7, #15]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4817      	ldr	r0, [pc, #92]	; (8008a48 <USBH_write+0x80>)
 80089ea:	f000 fe70 	bl	80096ce <USBH_MSC_Write>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <USBH_write+0x34>
  {
    res = RES_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089fa:	e01f      	b.n	8008a3c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089fc:	f107 0210 	add.w	r2, r7, #16
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4810      	ldr	r0, [pc, #64]	; (8008a48 <USBH_write+0x80>)
 8008a06:	f000 fdd5 	bl	80095b4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008a0a:	7f7b      	ldrb	r3, [r7, #29]
 8008a0c:	2b3a      	cmp	r3, #58	; 0x3a
 8008a0e:	d00d      	beq.n	8008a2c <USBH_write+0x64>
 8008a10:	2b3a      	cmp	r3, #58	; 0x3a
 8008a12:	dc0f      	bgt.n	8008a34 <USBH_write+0x6c>
 8008a14:	2b28      	cmp	r3, #40	; 0x28
 8008a16:	d009      	beq.n	8008a2c <USBH_write+0x64>
 8008a18:	2b28      	cmp	r3, #40	; 0x28
 8008a1a:	dc0b      	bgt.n	8008a34 <USBH_write+0x6c>
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d005      	beq.n	8008a2c <USBH_write+0x64>
 8008a20:	2b27      	cmp	r3, #39	; 0x27
 8008a22:	d107      	bne.n	8008a34 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008a24:	2302      	movs	r3, #2
 8008a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a2a:	e007      	b.n	8008a3c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a32:	e003      	b.n	8008a3c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a3a:	bf00      	nop
    }
  }

  return res;
 8008a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3748      	adds	r7, #72	; 0x48
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	200058e8 	.word	0x200058e8

08008a4c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b090      	sub	sp, #64	; 0x40
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	603a      	str	r2, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008a62:	79bb      	ldrb	r3, [r7, #6]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d852      	bhi.n	8008b0e <USBH_ioctl+0xc2>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBH_ioctl+0x24>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008ab3 	.word	0x08008ab3
 8008a7c:	08008adf 	.word	0x08008adf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a86:	e045      	b.n	8008b14 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a88:	f107 0208 	add.w	r2, r7, #8
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4823      	ldr	r0, [pc, #140]	; (8008b20 <USBH_ioctl+0xd4>)
 8008a92:	f000 fd8f 	bl	80095b4 <USBH_MSC_GetLUNInfo>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008aa8:	e034      	b.n	8008b14 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ab0:	e030      	b.n	8008b14 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ab2:	f107 0208 	add.w	r2, r7, #8
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4819      	ldr	r0, [pc, #100]	; (8008b20 <USBH_ioctl+0xd4>)
 8008abc:	f000 fd7a 	bl	80095b4 <USBH_MSC_GetLUNInfo>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d107      	bne.n	8008ad6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008ac6:	8a3b      	ldrh	r3, [r7, #16]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ad4:	e01e      	b.n	8008b14 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008adc:	e01a      	b.n	8008b14 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	480e      	ldr	r0, [pc, #56]	; (8008b20 <USBH_ioctl+0xd4>)
 8008ae8:	f000 fd64 	bl	80095b4 <USBH_MSC_GetLUNInfo>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008af2:	8a3b      	ldrh	r3, [r7, #16]
 8008af4:	0a5b      	lsrs	r3, r3, #9
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008b04:	e006      	b.n	8008b14 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b0c:	e002      	b.n	8008b14 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008b0e:	2304      	movs	r3, #4
 8008b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008b14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3740      	adds	r7, #64	; 0x40
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	200058e8 	.word	0x200058e8

08008b24 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b089      	sub	sp, #36	; 0x24
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b32:	7919      	ldrb	r1, [r3, #4]
 8008b34:	2350      	movs	r3, #80	; 0x50
 8008b36:	2206      	movs	r2, #6
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fc53 	bl	800a3e4 <USBH_FindInterface>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2bff      	cmp	r3, #255	; 0xff
 8008b46:	d002      	beq.n	8008b4e <USBH_MSC_InterfaceInit+0x2a>
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d901      	bls.n	8008b52 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e0ef      	b.n	8008d32 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 fc28 	bl	800a3ac <USBH_SelectInterface>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0e3      	b.n	8008d32 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008b70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b74:	f008 f852 	bl	8010c1c <malloc>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e0d0      	b.n	8008d32 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b94:	2100      	movs	r1, #0
 8008b96:	68b8      	ldr	r0, [r7, #8]
 8008b98:	f008 f85e 	bl	8010c58 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	211a      	movs	r1, #26
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da16      	bge.n	8008be2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	211a      	movs	r1, #26
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	211a      	movs	r1, #26
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bda:	881a      	ldrh	r2, [r3, #0]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	815a      	strh	r2, [r3, #10]
 8008be0:	e015      	b.n	8008c0e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	211a      	movs	r1, #26
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	211a      	movs	r1, #26
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c08:	881a      	ldrh	r2, [r3, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	211a      	movs	r1, #26
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b25b      	sxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da16      	bge.n	8008c54 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	211a      	movs	r1, #26
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	211a      	movs	r1, #26
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c4c:	881a      	ldrh	r2, [r3, #0]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	815a      	strh	r2, [r3, #10]
 8008c52:	e015      	b.n	8008c80 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	211a      	movs	r1, #26
 8008c5a:	fb01 f303 	mul.w	r3, r1, r3
 8008c5e:	4413      	add	r3, r2
 8008c60:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	211a      	movs	r1, #26
 8008c70:	fb01 f303 	mul.w	r3, r1, r3
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c7a:	881a      	ldrh	r2, [r3, #0]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	799b      	ldrb	r3, [r3, #6]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f002 fdc4 	bl	800b826 <USBH_AllocPipe>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	79db      	ldrb	r3, [r3, #7]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f002 fdba 	bl	800b826 <USBH_AllocPipe>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fdac 	bl	8009818 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	7959      	ldrb	r1, [r3, #5]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	7998      	ldrb	r0, [r3, #6]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	8912      	ldrh	r2, [r2, #8]
 8008cd8:	9202      	str	r2, [sp, #8]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	9201      	str	r2, [sp, #4]
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f002 fd6f 	bl	800b7c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	7919      	ldrb	r1, [r3, #4]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	79d8      	ldrb	r0, [r3, #7]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	8952      	ldrh	r2, [r2, #10]
 8008d02:	9202      	str	r2, [sp, #8]
 8008d04:	2202      	movs	r2, #2
 8008d06:	9201      	str	r2, [sp, #4]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f002 fd5a 	bl	800b7c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	791b      	ldrb	r3, [r3, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f007 fe9f 	bl	8010a60 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	795b      	ldrb	r3, [r3, #5]
 8008d26:	2200      	movs	r2, #0
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f007 fe98 	bl	8010a60 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}

08008d3a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	795b      	ldrb	r3, [r3, #5]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	795b      	ldrb	r3, [r3, #5]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 fd53 	bl	800b806 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	795b      	ldrb	r3, [r3, #5]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f002 fd7e 	bl	800b868 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	791b      	ldrb	r3, [r3, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	791b      	ldrb	r3, [r3, #4]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 fd40 	bl	800b806 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f002 fd6b 	bl	800b868 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f007 ff3d 	bl	8010c2c <free>
    phost->pActiveClass->pData = 0U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db8:	2200      	movs	r2, #0
 8008dba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	7b9b      	ldrb	r3, [r3, #14]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d041      	beq.n	8008e68 <USBH_MSC_ClassRequest+0xa2>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	dc4b      	bgt.n	8008e80 <USBH_MSC_ClassRequest+0xba>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <USBH_MSC_ClassRequest+0x2a>
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d147      	bne.n	8008e80 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fcf0 	bl	80097da <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d104      	bne.n	8008e0e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d137      	bne.n	8008e84 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d804      	bhi.n	8008e26 <USBH_MSC_ClassRequest+0x60>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	3301      	adds	r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	e000      	b.n	8008e28 <USBH_MSC_ClassRequest+0x62>
 8008e26:	2202      	movs	r2, #2
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]
 8008e30:	e014      	b.n	8008e5c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	2134      	movs	r1, #52	; 0x34
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3392      	adds	r3, #146	; 0x92
 8008e40:	2202      	movs	r2, #2
 8008e42:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	2134      	movs	r1, #52	; 0x34
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	33c1      	adds	r3, #193	; 0xc1
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	73bb      	strb	r3, [r7, #14]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	7bba      	ldrb	r2, [r7, #14]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d3e5      	bcc.n	8008e32 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008e66:	e00d      	b.n	8008e84 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e68:	2100      	movs	r1, #0
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f002 f87b 	bl	800af66 <USBH_ClrFeature>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d108      	bne.n	8008e88 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	7bda      	ldrb	r2, [r3, #15]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008e7e:	e003      	b.n	8008e88 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008e80:	bf00      	nop
 8008e82:	e002      	b.n	8008e8a <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e84:	bf00      	nop
 8008e86:	e000      	b.n	8008e8a <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e88:	bf00      	nop
  }

  return status;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	7b1b      	ldrb	r3, [r3, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <USBH_MSC_Process+0x2e>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	f000 8271 	beq.w	80093a2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008ec0:	e272      	b.n	80093a8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	f080 824f 	bcs.w	8009372 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eda:	4619      	mov	r1, r3
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	2334      	movs	r3, #52	; 0x34
 8008ee0:	fb03 f301 	mul.w	r3, r3, r1
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3391      	adds	r3, #145	; 0x91
 8008ee8:	2201      	movs	r2, #1
 8008eea:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	2334      	movs	r3, #52	; 0x34
 8008ef8:	fb03 f301 	mul.w	r3, r3, r1
 8008efc:	4413      	add	r3, r2
 8008efe:	3390      	adds	r3, #144	; 0x90
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	f200 8243 	bhi.w	800938e <USBH_MSC_Process+0x4fa>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <USBH_MSC_Process+0x7c>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f35 	.word	0x08008f35
 8008f14:	0800938f 	.word	0x0800938f
 8008f18:	08008ffd 	.word	0x08008ffd
 8008f1c:	08009181 	.word	0x08009181
 8008f20:	08008f5b 	.word	0x08008f5b
 8008f24:	0800924d 	.word	0x0800924d
 8008f28:	0800938f 	.word	0x0800938f
 8008f2c:	0800938f 	.word	0x0800938f
 8008f30:	08009361 	.word	0x08009361
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	2334      	movs	r3, #52	; 0x34
 8008f40:	fb03 f301 	mul.w	r3, r3, r1
 8008f44:	4413      	add	r3, r2
 8008f46:	3390      	adds	r3, #144	; 0x90
 8008f48:	2204      	movs	r2, #4
 8008f4a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f58:	e222      	b.n	80093a0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f60:	b2d9      	uxtb	r1, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2334      	movs	r3, #52	; 0x34
 8008f6c:	fb03 f302 	mul.w	r3, r3, r2
 8008f70:	3398      	adds	r3, #152	; 0x98
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4413      	add	r3, r2
 8008f76:	3307      	adds	r3, #7
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 ff6a 	bl	8009e54 <USBH_MSC_SCSI_Inquiry>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f90:	4619      	mov	r1, r3
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	2334      	movs	r3, #52	; 0x34
 8008f96:	fb03 f301 	mul.w	r3, r3, r1
 8008f9a:	4413      	add	r3, r2
 8008f9c:	3390      	adds	r3, #144	; 0x90
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d10c      	bne.n	8008fc2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fae:	4619      	mov	r1, r3
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	2334      	movs	r3, #52	; 0x34
 8008fb4:	fb03 f301 	mul.w	r3, r3, r1
 8008fb8:	4413      	add	r3, r2
 8008fba:	3390      	adds	r3, #144	; 0x90
 8008fbc:	2205      	movs	r2, #5
 8008fbe:	701a      	strb	r2, [r3, #0]
            break;
 8008fc0:	e1e7      	b.n	8009392 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	f040 81e4 	bne.w	8009392 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	2334      	movs	r3, #52	; 0x34
 8008fd6:	fb03 f301 	mul.w	r3, r3, r1
 8008fda:	4413      	add	r3, r2
 8008fdc:	3390      	adds	r3, #144	; 0x90
 8008fde:	2201      	movs	r2, #1
 8008fe0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fe8:	4619      	mov	r1, r3
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	2334      	movs	r3, #52	; 0x34
 8008fee:	fb03 f301 	mul.w	r3, r3, r1
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3391      	adds	r3, #145	; 0x91
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	701a      	strb	r2, [r3, #0]
            break;
 8008ffa:	e1ca      	b.n	8009392 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009002:	b2db      	uxtb	r3, r3
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fe66 	bl	8009cd8 <USBH_MSC_SCSI_TestUnitReady>
 800900c:	4603      	mov	r3, r0
 800900e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d149      	bne.n	80090aa <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800901c:	4619      	mov	r1, r3
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	2334      	movs	r3, #52	; 0x34
 8009022:	fb03 f301 	mul.w	r3, r3, r1
 8009026:	4413      	add	r3, r2
 8009028:	3392      	adds	r3, #146	; 0x92
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009036:	4619      	mov	r1, r3
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	2334      	movs	r3, #52	; 0x34
 800903c:	fb03 f301 	mul.w	r3, r3, r1
 8009040:	4413      	add	r3, r2
 8009042:	33c1      	adds	r3, #193	; 0xc1
 8009044:	2201      	movs	r2, #1
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	e00b      	b.n	8009062 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009050:	4619      	mov	r1, r3
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	2334      	movs	r3, #52	; 0x34
 8009056:	fb03 f301 	mul.w	r3, r3, r1
 800905a:	4413      	add	r3, r2
 800905c:	33c1      	adds	r3, #193	; 0xc1
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009068:	4619      	mov	r1, r3
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	2334      	movs	r3, #52	; 0x34
 800906e:	fb03 f301 	mul.w	r3, r3, r1
 8009072:	4413      	add	r3, r2
 8009074:	3390      	adds	r3, #144	; 0x90
 8009076:	2203      	movs	r2, #3
 8009078:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009080:	4619      	mov	r1, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	2334      	movs	r3, #52	; 0x34
 8009086:	fb03 f301 	mul.w	r3, r3, r1
 800908a:	4413      	add	r3, r2
 800908c:	3391      	adds	r3, #145	; 0x91
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009098:	4619      	mov	r1, r3
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	2334      	movs	r3, #52	; 0x34
 800909e:	fb03 f301 	mul.w	r3, r3, r1
 80090a2:	4413      	add	r3, r2
 80090a4:	3392      	adds	r3, #146	; 0x92
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d14a      	bne.n	8009146 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090b6:	4619      	mov	r1, r3
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	2334      	movs	r3, #52	; 0x34
 80090bc:	fb03 f301 	mul.w	r3, r3, r1
 80090c0:	4413      	add	r3, r2
 80090c2:	3392      	adds	r3, #146	; 0x92
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d00c      	beq.n	80090e4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090d0:	4619      	mov	r1, r3
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	2334      	movs	r3, #52	; 0x34
 80090d6:	fb03 f301 	mul.w	r3, r3, r1
 80090da:	4413      	add	r3, r2
 80090dc:	33c1      	adds	r3, #193	; 0xc1
 80090de:	2201      	movs	r2, #1
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	e00b      	b.n	80090fc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ea:	4619      	mov	r1, r3
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	2334      	movs	r3, #52	; 0x34
 80090f0:	fb03 f301 	mul.w	r3, r3, r1
 80090f4:	4413      	add	r3, r2
 80090f6:	33c1      	adds	r3, #193	; 0xc1
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009102:	4619      	mov	r1, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	2334      	movs	r3, #52	; 0x34
 8009108:	fb03 f301 	mul.w	r3, r3, r1
 800910c:	4413      	add	r3, r2
 800910e:	3390      	adds	r3, #144	; 0x90
 8009110:	2205      	movs	r2, #5
 8009112:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800911a:	4619      	mov	r1, r3
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	2334      	movs	r3, #52	; 0x34
 8009120:	fb03 f301 	mul.w	r3, r3, r1
 8009124:	4413      	add	r3, r2
 8009126:	3391      	adds	r3, #145	; 0x91
 8009128:	2201      	movs	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009132:	4619      	mov	r1, r3
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	2334      	movs	r3, #52	; 0x34
 8009138:	fb03 f301 	mul.w	r3, r3, r1
 800913c:	4413      	add	r3, r2
 800913e:	3392      	adds	r3, #146	; 0x92
 8009140:	2202      	movs	r2, #2
 8009142:	701a      	strb	r2, [r3, #0]
            break;
 8009144:	e127      	b.n	8009396 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b04      	cmp	r3, #4
 800914a:	f040 8124 	bne.w	8009396 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009154:	4619      	mov	r1, r3
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	2334      	movs	r3, #52	; 0x34
 800915a:	fb03 f301 	mul.w	r3, r3, r1
 800915e:	4413      	add	r3, r2
 8009160:	3390      	adds	r3, #144	; 0x90
 8009162:	2201      	movs	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916c:	4619      	mov	r1, r3
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	2334      	movs	r3, #52	; 0x34
 8009172:	fb03 f301 	mul.w	r3, r3, r1
 8009176:	4413      	add	r3, r2
 8009178:	3391      	adds	r3, #145	; 0x91
 800917a:	2202      	movs	r2, #2
 800917c:	701a      	strb	r2, [r3, #0]
            break;
 800917e:	e10a      	b.n	8009396 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009186:	b2d9      	uxtb	r1, r3
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800918e:	461a      	mov	r2, r3
 8009190:	2334      	movs	r3, #52	; 0x34
 8009192:	fb03 f302 	mul.w	r3, r3, r2
 8009196:	3390      	adds	r3, #144	; 0x90
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4413      	add	r3, r2
 800919c:	3304      	adds	r3, #4
 800919e:	461a      	mov	r2, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fddc 	bl	8009d5e <USBH_MSC_SCSI_ReadCapacity>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d120      	bne.n	80091f2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b6:	4619      	mov	r1, r3
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	2334      	movs	r3, #52	; 0x34
 80091bc:	fb03 f301 	mul.w	r3, r3, r1
 80091c0:	4413      	add	r3, r2
 80091c2:	3390      	adds	r3, #144	; 0x90
 80091c4:	2201      	movs	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ce:	4619      	mov	r1, r3
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	2334      	movs	r3, #52	; 0x34
 80091d4:	fb03 f301 	mul.w	r3, r3, r1
 80091d8:	4413      	add	r3, r2
 80091da:	3391      	adds	r3, #145	; 0x91
 80091dc:	2200      	movs	r2, #0
 80091de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e6:	3301      	adds	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80091f0:	e0d3      	b.n	800939a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d10c      	bne.n	8009212 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091fe:	4619      	mov	r1, r3
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	2334      	movs	r3, #52	; 0x34
 8009204:	fb03 f301 	mul.w	r3, r3, r1
 8009208:	4413      	add	r3, r2
 800920a:	3390      	adds	r3, #144	; 0x90
 800920c:	2205      	movs	r2, #5
 800920e:	701a      	strb	r2, [r3, #0]
            break;
 8009210:	e0c3      	b.n	800939a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	2b04      	cmp	r3, #4
 8009216:	f040 80c0 	bne.w	800939a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009220:	4619      	mov	r1, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2334      	movs	r3, #52	; 0x34
 8009226:	fb03 f301 	mul.w	r3, r3, r1
 800922a:	4413      	add	r3, r2
 800922c:	3390      	adds	r3, #144	; 0x90
 800922e:	2201      	movs	r2, #1
 8009230:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009238:	4619      	mov	r1, r3
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	2334      	movs	r3, #52	; 0x34
 800923e:	fb03 f301 	mul.w	r3, r3, r1
 8009242:	4413      	add	r3, r2
 8009244:	3391      	adds	r3, #145	; 0x91
 8009246:	2202      	movs	r2, #2
 8009248:	701a      	strb	r2, [r3, #0]
            break;
 800924a:	e0a6      	b.n	800939a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009252:	b2d9      	uxtb	r1, r3
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925a:	461a      	mov	r2, r3
 800925c:	2334      	movs	r3, #52	; 0x34
 800925e:	fb03 f302 	mul.w	r3, r3, r2
 8009262:	3398      	adds	r3, #152	; 0x98
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	461a      	mov	r2, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fe96 	bl	8009f9e <USBH_MSC_SCSI_RequestSense>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d145      	bne.n	8009308 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009282:	4619      	mov	r1, r3
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	2334      	movs	r3, #52	; 0x34
 8009288:	fb03 f301 	mul.w	r3, r3, r1
 800928c:	4413      	add	r3, r2
 800928e:	339c      	adds	r3, #156	; 0x9c
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b06      	cmp	r3, #6
 8009294:	d00c      	beq.n	80092b0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800929c:	4619      	mov	r1, r3
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	2334      	movs	r3, #52	; 0x34
 80092a2:	fb03 f301 	mul.w	r3, r3, r1
 80092a6:	4413      	add	r3, r2
 80092a8:	339c      	adds	r3, #156	; 0x9c
 80092aa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d117      	bne.n	80092e0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	f242 720f 	movw	r2, #9999	; 0x270f
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d80c      	bhi.n	80092e0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092cc:	4619      	mov	r1, r3
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	2334      	movs	r3, #52	; 0x34
 80092d2:	fb03 f301 	mul.w	r3, r3, r1
 80092d6:	4413      	add	r3, r2
 80092d8:	3390      	adds	r3, #144	; 0x90
 80092da:	2202      	movs	r2, #2
 80092dc:	701a      	strb	r2, [r3, #0]
                  break;
 80092de:	e05f      	b.n	80093a0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e6:	4619      	mov	r1, r3
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	2334      	movs	r3, #52	; 0x34
 80092ec:	fb03 f301 	mul.w	r3, r3, r1
 80092f0:	4413      	add	r3, r2
 80092f2:	3390      	adds	r3, #144	; 0x90
 80092f4:	2201      	movs	r2, #1
 80092f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092fe:	3301      	adds	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d10c      	bne.n	8009328 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009314:	4619      	mov	r1, r3
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	2334      	movs	r3, #52	; 0x34
 800931a:	fb03 f301 	mul.w	r3, r3, r1
 800931e:	4413      	add	r3, r2
 8009320:	3390      	adds	r3, #144	; 0x90
 8009322:	2208      	movs	r2, #8
 8009324:	701a      	strb	r2, [r3, #0]
            break;
 8009326:	e03a      	b.n	800939e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d137      	bne.n	800939e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009334:	4619      	mov	r1, r3
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	2334      	movs	r3, #52	; 0x34
 800933a:	fb03 f301 	mul.w	r3, r3, r1
 800933e:	4413      	add	r3, r2
 8009340:	3390      	adds	r3, #144	; 0x90
 8009342:	2201      	movs	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800934c:	4619      	mov	r1, r3
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	2334      	movs	r3, #52	; 0x34
 8009352:	fb03 f301 	mul.w	r3, r3, r1
 8009356:	4413      	add	r3, r2
 8009358:	3391      	adds	r3, #145	; 0x91
 800935a:	2202      	movs	r2, #2
 800935c:	701a      	strb	r2, [r3, #0]
            break;
 800935e:	e01e      	b.n	800939e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009366:	3301      	adds	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009370:	e016      	b.n	80093a0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2200      	movs	r2, #0
 8009376:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2201      	movs	r2, #1
 800937e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009386:	2102      	movs	r1, #2
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	4798      	blx	r3
      break;
 800938c:	e00c      	b.n	80093a8 <USBH_MSC_Process+0x514>
            break;
 800938e:	bf00      	nop
 8009390:	e00a      	b.n	80093a8 <USBH_MSC_Process+0x514>
            break;
 8009392:	bf00      	nop
 8009394:	e008      	b.n	80093a8 <USBH_MSC_Process+0x514>
            break;
 8009396:	bf00      	nop
 8009398:	e006      	b.n	80093a8 <USBH_MSC_Process+0x514>
            break;
 800939a:	bf00      	nop
 800939c:	e004      	b.n	80093a8 <USBH_MSC_Process+0x514>
            break;
 800939e:	bf00      	nop
      break;
 80093a0:	e002      	b.n	80093a8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]
      break;
 80093a6:	bf00      	nop
  }
  return error;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop

080093b4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b088      	sub	sp, #32
 80093ce:	af02      	add	r7, sp, #8
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80093e0:	2301      	movs	r3, #1
 80093e2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	2134      	movs	r1, #52	; 0x34
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	3390      	adds	r3, #144	; 0x90
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b07      	cmp	r3, #7
 80093fa:	d03c      	beq.n	8009476 <USBH_MSC_RdWrProcess+0xac>
 80093fc:	2b07      	cmp	r3, #7
 80093fe:	f300 80a7 	bgt.w	8009550 <USBH_MSC_RdWrProcess+0x186>
 8009402:	2b05      	cmp	r3, #5
 8009404:	d06c      	beq.n	80094e0 <USBH_MSC_RdWrProcess+0x116>
 8009406:	2b06      	cmp	r3, #6
 8009408:	f040 80a2 	bne.w	8009550 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800940c:	78f9      	ldrb	r1, [r7, #3]
 800940e:	2300      	movs	r3, #0
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	2300      	movs	r3, #0
 8009414:	2200      	movs	r2, #0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fea5 	bl	800a166 <USBH_MSC_SCSI_Read>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	2134      	movs	r1, #52	; 0x34
 800942c:	fb01 f303 	mul.w	r3, r1, r3
 8009430:	4413      	add	r3, r2
 8009432:	3390      	adds	r3, #144	; 0x90
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800943c:	e08a      	b.n	8009554 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d109      	bne.n	8009458 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	2134      	movs	r1, #52	; 0x34
 800944a:	fb01 f303 	mul.w	r3, r1, r3
 800944e:	4413      	add	r3, r2
 8009450:	3390      	adds	r3, #144	; 0x90
 8009452:	2205      	movs	r2, #5
 8009454:	701a      	strb	r2, [r3, #0]
      break;
 8009456:	e07d      	b.n	8009554 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b04      	cmp	r3, #4
 800945c:	d17a      	bne.n	8009554 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	2134      	movs	r1, #52	; 0x34
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	4413      	add	r3, r2
 800946a:	3390      	adds	r3, #144	; 0x90
 800946c:	2208      	movs	r2, #8
 800946e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009470:	2302      	movs	r3, #2
 8009472:	75fb      	strb	r3, [r7, #23]
      break;
 8009474:	e06e      	b.n	8009554 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009476:	78f9      	ldrb	r1, [r7, #3]
 8009478:	2300      	movs	r3, #0
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2300      	movs	r3, #0
 800947e:	2200      	movs	r2, #0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fe05 	bl	800a090 <USBH_MSC_SCSI_Write>
 8009486:	4603      	mov	r3, r0
 8009488:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10b      	bne.n	80094a8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	2134      	movs	r1, #52	; 0x34
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	3390      	adds	r3, #144	; 0x90
 800949e:	2201      	movs	r2, #1
 80094a0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094a6:	e057      	b.n	8009558 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d109      	bne.n	80094c2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	2134      	movs	r1, #52	; 0x34
 80094b4:	fb01 f303 	mul.w	r3, r1, r3
 80094b8:	4413      	add	r3, r2
 80094ba:	3390      	adds	r3, #144	; 0x90
 80094bc:	2205      	movs	r2, #5
 80094be:	701a      	strb	r2, [r3, #0]
      break;
 80094c0:	e04a      	b.n	8009558 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d147      	bne.n	8009558 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	2134      	movs	r1, #52	; 0x34
 80094ce:	fb01 f303 	mul.w	r3, r1, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	3390      	adds	r3, #144	; 0x90
 80094d6:	2208      	movs	r2, #8
 80094d8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	75fb      	strb	r3, [r7, #23]
      break;
 80094de:	e03b      	b.n	8009558 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	2234      	movs	r2, #52	; 0x34
 80094e4:	fb02 f303 	mul.w	r3, r2, r3
 80094e8:	3398      	adds	r3, #152	; 0x98
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4413      	add	r3, r2
 80094ee:	1d1a      	adds	r2, r3, #4
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fd52 	bl	8009f9e <USBH_MSC_SCSI_RequestSense>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d113      	bne.n	800952c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	2134      	movs	r1, #52	; 0x34
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	4413      	add	r3, r2
 8009510:	3390      	adds	r3, #144	; 0x90
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	2134      	movs	r1, #52	; 0x34
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	4413      	add	r3, r2
 8009522:	3391      	adds	r3, #145	; 0x91
 8009524:	2202      	movs	r2, #2
 8009526:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009528:	2302      	movs	r3, #2
 800952a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d014      	beq.n	800955c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b04      	cmp	r3, #4
 8009536:	d111      	bne.n	800955c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	2134      	movs	r1, #52	; 0x34
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	4413      	add	r3, r2
 8009544:	3390      	adds	r3, #144	; 0x90
 8009546:	2208      	movs	r2, #8
 8009548:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800954a:	2302      	movs	r3, #2
 800954c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800954e:	e005      	b.n	800955c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009550:	bf00      	nop
 8009552:	e004      	b.n	800955e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009554:	bf00      	nop
 8009556:	e002      	b.n	800955e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <USBH_MSC_RdWrProcess+0x194>
      break;
 800955c:	bf00      	nop

  }
  return error;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b0b      	cmp	r3, #11
 8009586:	d10c      	bne.n	80095a2 <USBH_MSC_UnitIsReady+0x3a>
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	2134      	movs	r1, #52	; 0x34
 800958e:	fb01 f303 	mul.w	r3, r1, r3
 8009592:	4413      	add	r3, r2
 8009594:	3391      	adds	r3, #145	; 0x91
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800959c:	2301      	movs	r3, #1
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e001      	b.n	80095a6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	460b      	mov	r3, r1
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b0b      	cmp	r3, #11
 80095d4:	d10d      	bne.n	80095f2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	2234      	movs	r2, #52	; 0x34
 80095da:	fb02 f303 	mul.w	r3, r2, r3
 80095de:	3390      	adds	r3, #144	; 0x90
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4413      	add	r3, r2
 80095e4:	2234      	movs	r2, #52	; 0x34
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f007 fb27 	bl	8010c3c <memcpy>
    return USBH_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	e000      	b.n	80095f4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095f2:	2302      	movs	r3, #2
  }
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	460b      	mov	r3, r1
 800960a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00e      	beq.n	8009640 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009628:	2b0b      	cmp	r3, #11
 800962a:	d109      	bne.n	8009640 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	2134      	movs	r1, #52	; 0x34
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	3390      	adds	r3, #144	; 0x90
 800963a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800963c:	2b01      	cmp	r3, #1
 800963e:	d001      	beq.n	8009644 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009640:	2302      	movs	r3, #2
 8009642:	e040      	b.n	80096c6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2206      	movs	r2, #6
 8009648:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800964a:	7afb      	ldrb	r3, [r7, #11]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	2134      	movs	r1, #52	; 0x34
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	4413      	add	r3, r2
 8009656:	3390      	adds	r3, #144	; 0x90
 8009658:	2206      	movs	r2, #6
 800965a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	b29a      	uxth	r2, r3
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009666:	7af9      	ldrb	r1, [r7, #11]
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fd78 	bl	800a166 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800967c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800967e:	e016      	b.n	80096ae <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad2      	subs	r2, r2, r3
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009690:	fb01 f303 	mul.w	r3, r1, r3
 8009694:	429a      	cmp	r2, r3
 8009696:	d805      	bhi.n	80096a4 <USBH_MSC_Read+0xa8>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2201      	movs	r2, #1
 80096a8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80096aa:	2302      	movs	r3, #2
 80096ac:	e00b      	b.n	80096c6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	4619      	mov	r1, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fe89 	bl	80093ca <USBH_MSC_RdWrProcess>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d0e0      	beq.n	8009680 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2201      	movs	r2, #1
 80096c2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b088      	sub	sp, #32
 80096d2:	af02      	add	r7, sp, #8
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	460b      	mov	r3, r1
 80096dc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096fa:	2b0b      	cmp	r3, #11
 80096fc:	d109      	bne.n	8009712 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096fe:	7afb      	ldrb	r3, [r7, #11]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	2134      	movs	r1, #52	; 0x34
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	4413      	add	r3, r2
 800970a:	3390      	adds	r3, #144	; 0x90
 800970c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800970e:	2b01      	cmp	r3, #1
 8009710:	d001      	beq.n	8009716 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009712:	2302      	movs	r3, #2
 8009714:	e040      	b.n	8009798 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2207      	movs	r2, #7
 800971a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	2134      	movs	r1, #52	; 0x34
 8009722:	fb01 f303 	mul.w	r3, r1, r3
 8009726:	4413      	add	r3, r2
 8009728:	3390      	adds	r3, #144	; 0x90
 800972a:	2207      	movs	r2, #7
 800972c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	b29a      	uxth	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009738:	7af9      	ldrb	r1, [r7, #11]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fca4 	bl	800a090 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800974e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009750:	e016      	b.n	8009780 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009762:	fb01 f303 	mul.w	r3, r1, r3
 8009766:	429a      	cmp	r2, r3
 8009768:	d805      	bhi.n	8009776 <USBH_MSC_Write+0xa8>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d104      	bne.n	8009780 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2201      	movs	r2, #1
 800977a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800977c:	2302      	movs	r3, #2
 800977e:	e00b      	b.n	8009798 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009780:	7afb      	ldrb	r3, [r7, #11]
 8009782:	4619      	mov	r1, r3
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff fe20 	bl	80093ca <USBH_MSC_RdWrProcess>
 800978a:	4603      	mov	r3, r0
 800978c:	2b01      	cmp	r3, #1
 800978e:	d0e0      	beq.n	8009752 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2201      	movs	r2, #1
 8009794:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2221      	movs	r2, #33	; 0x21
 80097ac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	22ff      	movs	r2, #255	; 0xff
 80097b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80097c6:	2200      	movs	r2, #0
 80097c8:	2100      	movs	r1, #0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fdab 	bl	800b326 <USBH_CtlReq>
 80097d0:	4603      	mov	r3, r0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	22a1      	movs	r2, #161	; 0xa1
 80097e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	22fe      	movs	r2, #254	; 0xfe
 80097ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009802:	2201      	movs	r2, #1
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fd8d 	bl	800b326 <USBH_CtlReq>
 800980c:	4603      	mov	r3, r0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4a09      	ldr	r2, [pc, #36]	; (8009854 <USBH_MSC_BOT_Init+0x3c>)
 800982e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4a09      	ldr	r2, [pc, #36]	; (8009858 <USBH_MSC_BOT_Init+0x40>)
 8009834:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	43425355 	.word	0x43425355
 8009858:	20304050 	.word	0x20304050

0800985c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af02      	add	r7, sp, #8
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009868:	2301      	movs	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800986c:	2301      	movs	r3, #1
 800986e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009870:	2301      	movs	r3, #1
 8009872:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009874:	2300      	movs	r3, #0
 8009876:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800988c:	3b01      	subs	r3, #1
 800988e:	2b0a      	cmp	r3, #10
 8009890:	f200 819e 	bhi.w	8009bd0 <USBH_MSC_BOT_Process+0x374>
 8009894:	a201      	add	r2, pc, #4	; (adr r2, 800989c <USBH_MSC_BOT_Process+0x40>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	080098c9 	.word	0x080098c9
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	0800995b 	.word	0x0800995b
 80098a8:	08009979 	.word	0x08009979
 80098ac:	080099fd 	.word	0x080099fd
 80098b0:	08009a1f 	.word	0x08009a1f
 80098b4:	08009ab7 	.word	0x08009ab7
 80098b8:	08009ad3 	.word	0x08009ad3
 80098bc:	08009b25 	.word	0x08009b25
 80098c0:	08009b55 	.word	0x08009b55
 80098c4:	08009bb7 	.word	0x08009bb7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	795b      	ldrb	r3, [r3, #5]
 80098e2:	2201      	movs	r2, #1
 80098e4:	9200      	str	r2, [sp, #0]
 80098e6:	221f      	movs	r2, #31
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 ff2a 	bl	800b742 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098ee:	e17e      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	795b      	ldrb	r3, [r3, #5]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f007 f888 	bl	8010a0c <USBH_LL_GetURBState>
 80098fc:	4603      	mov	r3, r0
 80098fe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009900:	7d3b      	ldrb	r3, [r7, #20]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d118      	bne.n	8009938 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00f      	beq.n	800992e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009914:	b25b      	sxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	da04      	bge.n	8009924 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2203      	movs	r2, #3
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009922:	e157      	b.n	8009bd4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2205      	movs	r2, #5
 8009928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800992c:	e152      	b.n	8009bd4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2207      	movs	r2, #7
 8009932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009936:	e14d      	b.n	8009bd4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009938:	7d3b      	ldrb	r3, [r7, #20]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d104      	bne.n	8009948 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009946:	e145      	b.n	8009bd4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009948:	7d3b      	ldrb	r3, [r7, #20]
 800994a:	2b05      	cmp	r3, #5
 800994c:	f040 8142 	bne.w	8009bd4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	220a      	movs	r2, #10
 8009954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009958:	e13c      	b.n	8009bd4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	895a      	ldrh	r2, [r3, #10]
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	791b      	ldrb	r3, [r3, #4]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 ff0f 	bl	800b78c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2204      	movs	r2, #4
 8009972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009976:	e13a      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	791b      	ldrb	r3, [r3, #4]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f007 f844 	bl	8010a0c <USBH_LL_GetURBState>
 8009984:	4603      	mov	r3, r0
 8009986:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009988:	7d3b      	ldrb	r3, [r7, #20]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d12d      	bne.n	80099ea <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	8952      	ldrh	r2, [r2, #10]
 8009996:	4293      	cmp	r3, r2
 8009998:	d910      	bls.n	80099bc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	8952      	ldrh	r2, [r2, #10]
 80099a4:	441a      	add	r2, r3
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	8952      	ldrh	r2, [r2, #10]
 80099b4:	1a9a      	subs	r2, r3, r2
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ba:	e002      	b.n	80099c2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2200      	movs	r2, #0
 80099c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	895a      	ldrh	r2, [r3, #10]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	791b      	ldrb	r3, [r3, #4]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 fed7 	bl	800b78c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80099de:	e0fb      	b.n	8009bd8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2207      	movs	r2, #7
 80099e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099e8:	e0f6      	b.n	8009bd8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80099ea:	7d3b      	ldrb	r3, [r7, #20]
 80099ec:	2b05      	cmp	r3, #5
 80099ee:	f040 80f3 	bne.w	8009bd8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2209      	movs	r2, #9
 80099f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099fa:	e0ed      	b.n	8009bd8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	891a      	ldrh	r2, [r3, #8]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	795b      	ldrb	r3, [r3, #5]
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	9000      	str	r0, [sp, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fe97 	bl	800b742 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2206      	movs	r2, #6
 8009a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a1c:	e0e7      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	795b      	ldrb	r3, [r3, #5]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f006 fff1 	bl	8010a0c <USBH_LL_GetURBState>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a2e:	7d3b      	ldrb	r3, [r7, #20]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d12f      	bne.n	8009a94 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	8912      	ldrh	r2, [r2, #8]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d910      	bls.n	8009a62 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	8912      	ldrh	r2, [r2, #8]
 8009a4a:	441a      	add	r2, r3
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	8912      	ldrh	r2, [r2, #8]
 8009a5a:	1a9a      	subs	r2, r3, r2
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a60:	e002      	b.n	8009a68 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2200      	movs	r2, #0
 8009a66:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00c      	beq.n	8009a8a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	891a      	ldrh	r2, [r3, #8]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	9000      	str	r0, [sp, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fe5d 	bl	800b742 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009a88:	e0a8      	b.n	8009bdc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2207      	movs	r2, #7
 8009a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a92:	e0a3      	b.n	8009bdc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a94:	7d3b      	ldrb	r3, [r7, #20]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d104      	bne.n	8009aa4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2205      	movs	r2, #5
 8009a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aa2:	e09b      	b.n	8009bdc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009aa4:	7d3b      	ldrb	r3, [r7, #20]
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	f040 8098 	bne.w	8009bdc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	220a      	movs	r2, #10
 8009ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ab4:	e092      	b.n	8009bdc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	791b      	ldrb	r3, [r3, #4]
 8009ac0:	220d      	movs	r2, #13
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fe62 	bl	800b78c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2208      	movs	r2, #8
 8009acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ad0:	e08d      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	791b      	ldrb	r3, [r3, #4]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f006 ff97 	bl	8010a0c <USBH_LL_GetURBState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ae2:	7d3b      	ldrb	r3, [r7, #20]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d115      	bne.n	8009b14 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f8a9 	bl	8009c50 <USBH_MSC_DecodeCSW>
 8009afe:	4603      	mov	r3, r0
 8009b00:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009b02:	7d7b      	ldrb	r3, [r7, #21]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009b0c:	e068      	b.n	8009be0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	75fb      	strb	r3, [r7, #23]
      break;
 8009b12:	e065      	b.n	8009be0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009b14:	7d3b      	ldrb	r3, [r7, #20]
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	d162      	bne.n	8009be0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2209      	movs	r2, #9
 8009b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b22:	e05d      	b.n	8009be0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	2200      	movs	r2, #0
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f864 	bl	8009bf8 <USBH_MSC_BOT_Abort>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b34:	7dbb      	ldrb	r3, [r7, #22]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2207      	movs	r2, #7
 8009b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009b42:	e04f      	b.n	8009be4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d14c      	bne.n	8009be4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	220b      	movs	r2, #11
 8009b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b52:	e047      	b.n	8009be4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	2201      	movs	r2, #1
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f84c 	bl	8009bf8 <USBH_MSC_BOT_Abort>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b64:	7dbb      	ldrb	r3, [r7, #22]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d11d      	bne.n	8009ba6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	795b      	ldrb	r3, [r3, #5]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f006 ffa5 	bl	8010ac0 <USBH_LL_GetToggle>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	7959      	ldrb	r1, [r3, #5]
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	f1c3 0301 	rsb	r3, r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f006 ff69 	bl	8010a60 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	791b      	ldrb	r3, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f006 ff62 	bl	8010a60 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2209      	movs	r2, #9
 8009ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009ba4:	e020      	b.n	8009be8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d11d      	bne.n	8009be8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	220b      	movs	r2, #11
 8009bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bb4:	e018      	b.n	8009be8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fdf2 	bl	80097a0 <USBH_MSC_BOT_REQ_Reset>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d112      	bne.n	8009bec <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009bce:	e00d      	b.n	8009bec <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009bd0:	bf00      	nop
 8009bd2:	e00c      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009bd4:	bf00      	nop
 8009bd6:	e00a      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009bd8:	bf00      	nop
 8009bda:	e008      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009bdc:	bf00      	nop
 8009bde:	e006      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009be0:	bf00      	nop
 8009be2:	e004      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009be4:	bf00      	nop
 8009be6:	e002      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009be8:	bf00      	nop
 8009bea:	e000      	b.n	8009bee <USBH_MSC_BOT_Process+0x392>
      break;
 8009bec:	bf00      	nop
  }
  return status;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
 8009c04:	4613      	mov	r3, r2
 8009c06:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009c16:	78bb      	ldrb	r3, [r7, #2]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <USBH_MSC_BOT_Abort+0x2a>
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d009      	beq.n	8009c34 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009c20:	e011      	b.n	8009c46 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	79db      	ldrb	r3, [r3, #7]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f99c 	bl	800af66 <USBH_ClrFeature>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
      break;
 8009c32:	e008      	b.n	8009c46 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	799b      	ldrb	r3, [r3, #6]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 f993 	bl	800af66 <USBH_ClrFeature>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]
      break;
 8009c44:	bf00      	nop
  }
  return status;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	791b      	ldrb	r3, [r3, #4]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f006 fe3b 	bl	80108e8 <USBH_LL_GetLastXferSize>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b0d      	cmp	r3, #13
 8009c76:	d002      	beq.n	8009c7e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	73fb      	strb	r3, [r7, #15]
 8009c7c:	e024      	b.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c82:	4a14      	ldr	r2, [pc, #80]	; (8009cd4 <USBH_MSC_DecodeCSW+0x84>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d11d      	bne.n	8009cc4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d119      	bne.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e011      	b.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d102      	bne.n	8009cb4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
 8009cb2:	e009      	b.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d104      	bne.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	73fb      	strb	r3, [r7, #15]
 8009cc2:	e001      	b.n	8009cc8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	53425355 	.word	0x53425355

08009cd8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d002      	beq.n	8009d02 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d021      	beq.n	8009d44 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d00:	e028      	b.n	8009d54 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2200      	movs	r2, #0
 8009d06:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	220a      	movs	r2, #10
 8009d14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	3363      	adds	r3, #99	; 0x63
 8009d1c:	2210      	movs	r2, #16
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f006 ff99 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	73fb      	strb	r3, [r7, #15]
      break;
 8009d42:	e007      	b.n	8009d54 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fd87 	bl	800985c <USBH_MSC_BOT_Process>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]
      break;
 8009d52:	bf00      	nop
  }

  return error;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b086      	sub	sp, #24
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	460b      	mov	r3, r1
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d002      	beq.n	8009d8a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d027      	beq.n	8009dd8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009d88:	e05f      	b.n	8009e4a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2280      	movs	r2, #128	; 0x80
 8009d94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	220a      	movs	r2, #10
 8009d9c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	3363      	adds	r3, #99	; 0x63
 8009da4:	2210      	movs	r2, #16
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f006 ff55 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2225      	movs	r2, #37	; 0x25
 8009db2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f103 0210 	add.w	r2, r3, #16
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd6:	e038      	b.n	8009e4a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff fd3d 	bl	800985c <USBH_MSC_BOT_Process>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d12d      	bne.n	8009e48 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df2:	3303      	adds	r3, #3
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfe:	3302      	adds	r3, #2
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e12:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	061b      	lsls	r3, r3, #24
 8009e1e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e2a:	3307      	adds	r3, #7
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e36:	3306      	adds	r3, #6
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	809a      	strh	r2, [r3, #4]
      break;
 8009e48:	bf00      	nop
  }

  return error;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009e62:	2302      	movs	r3, #2
 8009e64:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d002      	beq.n	8009e80 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d03d      	beq.n	8009efa <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009e7e:	e089      	b.n	8009f94 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2224      	movs	r2, #36	; 0x24
 8009e84:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2280      	movs	r2, #128	; 0x80
 8009e8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	220a      	movs	r2, #10
 8009e92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3363      	adds	r3, #99	; 0x63
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f006 feda 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2212      	movs	r2, #18
 8009ea8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	015b      	lsls	r3, r3, #5
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2224      	movs	r2, #36	; 0x24
 8009ecc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f103 0210 	add.w	r2, r3, #16
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef8:	e04c      	b.n	8009f94 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	4619      	mov	r1, r3
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fcac 	bl	800985c <USBH_MSC_BOT_Process>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d141      	bne.n	8009f92 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009f0e:	2222      	movs	r2, #34	; 0x22
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f006 fea0 	bl	8010c58 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 031f 	and.w	r3, r3, #31
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	095b      	lsrs	r3, r3, #5
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f40:	3301      	adds	r3, #1
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da03      	bge.n	8009f52 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	709a      	strb	r2, [r3, #2]
 8009f50:	e002      	b.n	8009f58 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	1cd8      	adds	r0, r3, #3
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f62:	3308      	adds	r3, #8
 8009f64:	2208      	movs	r2, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	f006 fe68 	bl	8010c3c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f103 000c 	add.w	r0, r3, #12
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f78:	3310      	adds	r3, #16
 8009f7a:	2210      	movs	r2, #16
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	f006 fe5d 	bl	8010c3c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	331d      	adds	r3, #29
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009f8c:	3220      	adds	r2, #32
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	601a      	str	r2, [r3, #0]
      break;
 8009f92:	bf00      	nop
  }

  return error;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009fac:	2302      	movs	r3, #2
 8009fae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d002      	beq.n	8009fca <USBH_MSC_SCSI_RequestSense+0x2c>
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d03d      	beq.n	800a044 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009fc8:	e05d      	b.n	800a086 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	220e      	movs	r2, #14
 8009fce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2280      	movs	r2, #128	; 0x80
 8009fd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	220a      	movs	r2, #10
 8009fdc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	3363      	adds	r3, #99	; 0x63
 8009fe4:	2210      	movs	r2, #16
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f006 fe35 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	015b      	lsls	r3, r3, #5
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	220e      	movs	r2, #14
 800a016:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2202      	movs	r2, #2
 800a02e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f103 0210 	add.w	r2, r3, #16
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a03e:	2301      	movs	r3, #1
 800a040:	75fb      	strb	r3, [r7, #23]
      break;
 800a042:	e020      	b.n	800a086 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	4619      	mov	r1, r3
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fc07 	bl	800985c <USBH_MSC_BOT_Process>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d115      	bne.n	800a084 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05e:	3302      	adds	r3, #2
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	b2da      	uxtb	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a072:	7b1a      	ldrb	r2, [r3, #12]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07e:	7b5a      	ldrb	r2, [r3, #13]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	709a      	strb	r2, [r3, #2]
      break;
 800a084:	bf00      	nop
  }

  return error;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	460b      	mov	r3, r1
 800a09e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d002      	beq.n	800a0be <USBH_MSC_SCSI_Write+0x2e>
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d047      	beq.n	800a14c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a0bc:	e04e      	b.n	800a15c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	fb03 f202 	mul.w	r2, r3, r2
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	220a      	movs	r2, #10
 800a0dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	3363      	adds	r3, #99	; 0x63
 800a0e4:	2210      	movs	r2, #16
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f006 fdb5 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	222a      	movs	r2, #42	; 0x2a
 800a0f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0f6:	79fa      	ldrb	r2, [r7, #7]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0fe:	79ba      	ldrb	r2, [r7, #6]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a106:	797a      	ldrb	r2, [r7, #5]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a10e:	1d3b      	adds	r3, r7, #4
 800a110:	781a      	ldrb	r2, [r3, #0]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a118:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a122:	f107 0320 	add.w	r3, r7, #32
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	e007      	b.n	800a15c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	4619      	mov	r1, r3
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fb83 	bl	800985c <USBH_MSC_BOT_Process>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
      break;
 800a15a:	bf00      	nop
  }

  return error;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b086      	sub	sp, #24
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
 800a172:	460b      	mov	r3, r1
 800a174:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a176:	2302      	movs	r3, #2
 800a178:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d002      	beq.n	800a194 <USBH_MSC_SCSI_Read+0x2e>
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d047      	beq.n	800a222 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a192:	e04e      	b.n	800a232 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a19a:	461a      	mov	r2, r3
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	fb03 f202 	mul.w	r2, r3, r2
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2280      	movs	r2, #128	; 0x80
 800a1aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	3363      	adds	r3, #99	; 0x63
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f006 fd4a 	bl	8010c58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	2228      	movs	r2, #40	; 0x28
 800a1c8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a1cc:	79fa      	ldrb	r2, [r7, #7]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a1d4:	79ba      	ldrb	r2, [r7, #6]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a1dc:	797a      	ldrb	r2, [r7, #5]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a1e4:	1d3b      	adds	r3, r7, #4
 800a1e6:	781a      	ldrb	r2, [r3, #0]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a1ee:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a1f8:	f107 0320 	add.w	r3, r7, #32
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a21c:	2301      	movs	r3, #1
 800a21e:	75fb      	strb	r3, [r7, #23]
      break;
 800a220:	e007      	b.n	800a232 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	4619      	mov	r1, r3
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fb18 	bl	800985c <USBH_MSC_BOT_Process>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]
      break;
 800a230:	bf00      	nop
  }

  return error;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a250:	2302      	movs	r3, #2
 800a252:	e029      	b.n	800a2a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	79fa      	ldrb	r2, [r7, #7]
 800a258:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 f81f 	bl	800a2b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f006 fa6d 	bl	8010780 <USBH_LL_Init>

  return USBH_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e009      	b.n	800a2d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	33e0      	adds	r3, #224	; 0xe0
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b0e      	cmp	r3, #14
 800a2da:	d9f2      	bls.n	800a2c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	e009      	b.n	800a2f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fc:	d3f1      	bcc.n	800a2e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2240      	movs	r2, #64	; 0x40
 800a322:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d016      	beq.n	800a39a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10e      	bne.n	800a394 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a37c:	1c59      	adds	r1, r3, #1
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	33de      	adds	r3, #222	; 0xde
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]
 800a392:	e004      	b.n	800a39e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a394:	2302      	movs	r3, #2
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	e001      	b.n	800a39e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a39a:	2302      	movs	r3, #2
 800a39c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3c2:	78fa      	ldrb	r2, [r7, #3]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d204      	bcs.n	800a3d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3d0:	e001      	b.n	800a3d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	70fb      	strb	r3, [r7, #3]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70bb      	strb	r3, [r7, #2]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a402:	2300      	movs	r3, #0
 800a404:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a40c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a40e:	e025      	b.n	800a45c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	221a      	movs	r2, #26
 800a414:	fb02 f303 	mul.w	r3, r2, r3
 800a418:	3308      	adds	r3, #8
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4413      	add	r3, r2
 800a41e:	3302      	adds	r3, #2
 800a420:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	795b      	ldrb	r3, [r3, #5]
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <USBH_FindInterface+0x4e>
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d111      	bne.n	800a456 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a436:	78ba      	ldrb	r2, [r7, #2]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d002      	beq.n	800a442 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a43c:	78bb      	ldrb	r3, [r7, #2]
 800a43e:	2bff      	cmp	r3, #255	; 0xff
 800a440:	d109      	bne.n	800a456 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a446:	787a      	ldrb	r2, [r7, #1]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d002      	beq.n	800a452 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a44c:	787b      	ldrb	r3, [r7, #1]
 800a44e:	2bff      	cmp	r3, #255	; 0xff
 800a450:	d101      	bne.n	800a456 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	e006      	b.n	800a464 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	3301      	adds	r3, #1
 800a45a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d9d6      	bls.n	800a410 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a462:	23ff      	movs	r3, #255	; 0xff
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f006 f9bd 	bl	80107f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a47e:	2101      	movs	r1, #1
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f006 fad6 	bl	8010a32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af04      	add	r7, sp, #16
 800a496:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a498:	2302      	movs	r3, #2
 800a49a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d102      	bne.n	800a4b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b0b      	cmp	r3, #11
 800a4ba:	f200 81b3 	bhi.w	800a824 <USBH_Process+0x394>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBH_Process+0x34>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a4f5 	.word	0x0800a4f5
 800a4c8:	0800a527 	.word	0x0800a527
 800a4cc:	0800a58f 	.word	0x0800a58f
 800a4d0:	0800a7bf 	.word	0x0800a7bf
 800a4d4:	0800a825 	.word	0x0800a825
 800a4d8:	0800a633 	.word	0x0800a633
 800a4dc:	0800a765 	.word	0x0800a765
 800a4e0:	0800a669 	.word	0x0800a669
 800a4e4:	0800a689 	.word	0x0800a689
 800a4e8:	0800a6a9 	.word	0x0800a6a9
 800a4ec:	0800a6d7 	.word	0x0800a6d7
 800a4f0:	0800a7a7 	.word	0x0800a7a7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8193 	beq.w	800a828 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a508:	20c8      	movs	r0, #200	; 0xc8
 800a50a:	f006 fb09 	bl	8010b20 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f006 f9cf 	bl	80108b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a524:	e180      	b.n	800a828 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d107      	bne.n	800a540 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a53e:	e182      	b.n	800a846 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a54a:	d914      	bls.n	800a576 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a552:	3301      	adds	r3, #1
 800a554:	b2da      	uxtb	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a562:	2b03      	cmp	r3, #3
 800a564:	d903      	bls.n	800a56e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	220d      	movs	r2, #13
 800a56a:	701a      	strb	r2, [r3, #0]
      break;
 800a56c:	e16b      	b.n	800a846 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
      break;
 800a574:	e167      	b.n	800a846 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a57c:	f103 020a 	add.w	r2, r3, #10
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a586:	200a      	movs	r0, #10
 800a588:	f006 faca 	bl	8010b20 <USBH_Delay>
      break;
 800a58c:	e15b      	b.n	800a846 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a59e:	2104      	movs	r1, #4
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5a4:	2064      	movs	r0, #100	; 0x64
 800a5a6:	f006 fabb 	bl	8010b20 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f006 f95a 	bl	8010864 <USBH_LL_GetSpeed>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2205      	movs	r2, #5
 800a5be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f92f 	bl	800b826 <USBH_AllocPipe>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5d0:	2180      	movs	r1, #128	; 0x80
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 f927 	bl	800b826 <USBH_AllocPipe>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7919      	ldrb	r1, [r3, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	9202      	str	r2, [sp, #8]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	9201      	str	r2, [sp, #4]
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	4603      	mov	r3, r0
 800a600:	2280      	movs	r2, #128	; 0x80
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 f8e0 	bl	800b7c8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	7959      	ldrb	r1, [r3, #5]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a61c:	b292      	uxth	r2, r2
 800a61e:	9202      	str	r2, [sp, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	9201      	str	r2, [sp, #4]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4603      	mov	r3, r0
 800a628:	2200      	movs	r2, #0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 f8cc 	bl	800b7c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a630:	e109      	b.n	800a846 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f90c 	bl	800a850 <USBH_HandleEnum>
 800a638:	4603      	mov	r3, r0
 800a63a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	f040 80f3 	bne.w	800a82c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a654:	2b01      	cmp	r3, #1
 800a656:	d103      	bne.n	800a660 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2208      	movs	r2, #8
 800a65c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a65e:	e0e5      	b.n	800a82c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2207      	movs	r2, #7
 800a664:	701a      	strb	r2, [r3, #0]
      break;
 800a666:	e0e1      	b.n	800a82c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80de 	beq.w	800a830 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a67a:	2101      	movs	r1, #1
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2208      	movs	r2, #8
 800a684:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a686:	e0d3      	b.n	800a830 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a68e:	b29b      	uxth	r3, r3
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fc20 	bl	800aed8 <USBH_SetCfg>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f040 80ca 	bne.w	800a834 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2209      	movs	r2, #9
 800a6a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6a6:	e0c5      	b.n	800a834 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00b      	beq.n	800a6ce <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fc30 	bl	800af1e <USBH_SetFeature>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f040 80b9 	bne.w	800a838 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6cc:	e0b4      	b.n	800a838 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	701a      	strb	r2, [r3, #0]
      break;
 800a6d4:	e0b0      	b.n	800a838 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 80ad 	beq.w	800a83c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]
 800a6ee:	e016      	b.n	800a71e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6f0:	7bfa      	ldrb	r2, [r7, #15]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	32de      	adds	r2, #222	; 0xde
 800a6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fa:	791a      	ldrb	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a702:	429a      	cmp	r2, r3
 800a704:	d108      	bne.n	800a718 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a706:	7bfa      	ldrb	r2, [r7, #15]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	32de      	adds	r2, #222	; 0xde
 800a70c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a716:	e005      	b.n	800a724 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	3301      	adds	r3, #1
 800a71c:	73fb      	strb	r3, [r7, #15]
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0e5      	beq.n	800a6f0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d109      	bne.n	800a754 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2206      	movs	r2, #6
 800a744:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a74c:	2103      	movs	r1, #3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a752:	e073      	b.n	800a83c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	220d      	movs	r2, #13
 800a758:	701a      	strb	r2, [r3, #0]
      break;
 800a75a:	e06f      	b.n	800a83c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	220d      	movs	r2, #13
 800a760:	701a      	strb	r2, [r3, #0]
      break;
 800a762:	e06b      	b.n	800a83c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d017      	beq.n	800a79e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	220b      	movs	r2, #11
 800a78a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a78c:	e058      	b.n	800a840 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b02      	cmp	r3, #2
 800a794:	d154      	bne.n	800a840 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	220d      	movs	r2, #13
 800a79a:	701a      	strb	r2, [r3, #0]
      break;
 800a79c:	e050      	b.n	800a840 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	220d      	movs	r2, #13
 800a7a2:	701a      	strb	r2, [r3, #0]
      break;
 800a7a4:	e04c      	b.n	800a840 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d049      	beq.n	800a844 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	4798      	blx	r3
      }
      break;
 800a7bc:	e042      	b.n	800a844 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff fd72 	bl	800a2b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7fa:	2105      	movs	r1, #5
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d107      	bne.n	800a81c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fe2b 	bl	800a470 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a81a:	e014      	b.n	800a846 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f005 ffeb 	bl	80107f8 <USBH_LL_Start>
      break;
 800a822:	e010      	b.n	800a846 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a824:	bf00      	nop
 800a826:	e00e      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a828:	bf00      	nop
 800a82a:	e00c      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a82c:	bf00      	nop
 800a82e:	e00a      	b.n	800a846 <USBH_Process+0x3b6>
    break;
 800a830:	bf00      	nop
 800a832:	e008      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a834:	bf00      	nop
 800a836:	e006      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a838:	bf00      	nop
 800a83a:	e004      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a83c:	bf00      	nop
 800a83e:	e002      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a840:	bf00      	nop
 800a842:	e000      	b.n	800a846 <USBH_Process+0x3b6>
      break;
 800a844:	bf00      	nop
  }
  return USBH_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af04      	add	r7, sp, #16
 800a856:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a858:	2301      	movs	r3, #1
 800a85a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	2b07      	cmp	r3, #7
 800a866:	f200 81c1 	bhi.w	800abec <USBH_HandleEnum+0x39c>
 800a86a:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <USBH_HandleEnum+0x20>)
 800a86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a94f 	.word	0x0800a94f
 800a878:	0800a9b9 	.word	0x0800a9b9
 800a87c:	0800aa47 	.word	0x0800aa47
 800a880:	0800aab1 	.word	0x0800aab1
 800a884:	0800ab21 	.word	0x0800ab21
 800a888:	0800ab67 	.word	0x0800ab67
 800a88c:	0800abad 	.word	0x0800abad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a890:	2108      	movs	r1, #8
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa50 	bl	800ad38 <USBH_Get_DevDesc>
 800a898:	4603      	mov	r3, r0
 800a89a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d130      	bne.n	800a904 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	7919      	ldrb	r1, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8c6:	b292      	uxth	r2, r2
 800a8c8:	9202      	str	r2, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2280      	movs	r2, #128	; 0x80
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 ff77 	bl	800b7c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7959      	ldrb	r1, [r3, #5]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8ee:	b292      	uxth	r2, r2
 800a8f0:	9202      	str	r2, [sp, #8]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 ff63 	bl	800b7c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a902:	e175      	b.n	800abf0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	2b03      	cmp	r3, #3
 800a908:	f040 8172 	bne.w	800abf0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a912:	3301      	adds	r3, #1
 800a914:	b2da      	uxtb	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a922:	2b03      	cmp	r3, #3
 800a924:	d903      	bls.n	800a92e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	220d      	movs	r2, #13
 800a92a:	701a      	strb	r2, [r3, #0]
      break;
 800a92c:	e160      	b.n	800abf0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	795b      	ldrb	r3, [r3, #5]
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 ff97 	bl	800b868 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	791b      	ldrb	r3, [r3, #4]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 ff91 	bl	800b868 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	701a      	strb	r2, [r3, #0]
      break;
 800a94c:	e150      	b.n	800abf0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a94e:	2112      	movs	r1, #18
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f9f1 	bl	800ad38 <USBH_Get_DevDesc>
 800a956:	4603      	mov	r3, r0
 800a958:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a95a:	7bbb      	ldrb	r3, [r7, #14]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d103      	bne.n	800a968 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a966:	e145      	b.n	800abf4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	f040 8142 	bne.w	800abf4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a976:	3301      	adds	r3, #1
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a986:	2b03      	cmp	r3, #3
 800a988:	d903      	bls.n	800a992 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	220d      	movs	r2, #13
 800a98e:	701a      	strb	r2, [r3, #0]
      break;
 800a990:	e130      	b.n	800abf4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	795b      	ldrb	r3, [r3, #5]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 ff65 	bl	800b868 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	791b      	ldrb	r3, [r3, #4]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 ff5f 	bl	800b868 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
      break;
 800a9b6:	e11d      	b.n	800abf4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa68 	bl	800ae90 <USBH_SetAddress>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d132      	bne.n	800aa30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a9ca:	2002      	movs	r0, #2
 800a9cc:	f006 f8a8 	bl	8010b20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	7919      	ldrb	r1, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9f2:	b292      	uxth	r2, r2
 800a9f4:	9202      	str	r2, [sp, #8]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	9201      	str	r2, [sp, #4]
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2280      	movs	r2, #128	; 0x80
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fee1 	bl	800b7c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	7959      	ldrb	r1, [r3, #5]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa1a:	b292      	uxth	r2, r2
 800aa1c:	9202      	str	r2, [sp, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	9201      	str	r2, [sp, #4]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4603      	mov	r3, r0
 800aa26:	2200      	movs	r2, #0
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fecd 	bl	800b7c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa2e:	e0e3      	b.n	800abf8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	f040 80e0 	bne.w	800abf8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	220d      	movs	r2, #13
 800aa3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	705a      	strb	r2, [r3, #1]
      break;
 800aa44:	e0d8      	b.n	800abf8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa46:	2109      	movs	r1, #9
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f99d 	bl	800ad88 <USBH_Get_CfgDesc>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d103      	bne.n	800aa60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa5e:	e0cd      	b.n	800abfc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	f040 80ca 	bne.w	800abfc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa6e:	3301      	adds	r3, #1
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d903      	bls.n	800aa8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	220d      	movs	r2, #13
 800aa86:	701a      	strb	r2, [r3, #0]
      break;
 800aa88:	e0b8      	b.n	800abfc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	795b      	ldrb	r3, [r3, #5]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fee9 	bl	800b868 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fee3 	bl	800b868 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
      break;
 800aaae:	e0a5      	b.n	800abfc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f965 	bl	800ad88 <USBH_Get_CfgDesc>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2205      	movs	r2, #5
 800aacc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aace:	e097      	b.n	800ac00 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	f040 8094 	bne.w	800ac00 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aade:	3301      	adds	r3, #1
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d903      	bls.n	800aafa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	220d      	movs	r2, #13
 800aaf6:	701a      	strb	r2, [r3, #0]
      break;
 800aaf8:	e082      	b.n	800ac00 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 feb1 	bl	800b868 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	791b      	ldrb	r3, [r3, #4]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 feab 	bl	800b868 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	701a      	strb	r2, [r3, #0]
      break;
 800ab1e:	e06f      	b.n	800ac00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d019      	beq.n	800ab5e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab36:	23ff      	movs	r3, #255	; 0xff
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f949 	bl	800add0 <USBH_Get_StringDesc>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d103      	bne.n	800ab50 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2206      	movs	r2, #6
 800ab4c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab4e:	e059      	b.n	800ac04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d156      	bne.n	800ac04 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2206      	movs	r2, #6
 800ab5a:	705a      	strb	r2, [r3, #1]
      break;
 800ab5c:	e052      	b.n	800ac04 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2206      	movs	r2, #6
 800ab62:	705a      	strb	r2, [r3, #1]
      break;
 800ab64:	e04e      	b.n	800ac04 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d019      	beq.n	800aba4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab7c:	23ff      	movs	r3, #255	; 0xff
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f926 	bl	800add0 <USBH_Get_StringDesc>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d103      	bne.n	800ab96 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2207      	movs	r2, #7
 800ab92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab94:	e038      	b.n	800ac08 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d135      	bne.n	800ac08 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2207      	movs	r2, #7
 800aba0:	705a      	strb	r2, [r3, #1]
      break;
 800aba2:	e031      	b.n	800ac08 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2207      	movs	r2, #7
 800aba8:	705a      	strb	r2, [r3, #1]
      break;
 800abaa:	e02d      	b.n	800ac08 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d017      	beq.n	800abe6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abc2:	23ff      	movs	r3, #255	; 0xff
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f903 	bl	800add0 <USBH_Get_StringDesc>
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d102      	bne.n	800abda <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abd8:	e018      	b.n	800ac0c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d115      	bne.n	800ac0c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
      break;
 800abe4:	e012      	b.n	800ac0c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73fb      	strb	r3, [r7, #15]
      break;
 800abea:	e00f      	b.n	800ac0c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800abec:	bf00      	nop
 800abee:	e00e      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800abf0:	bf00      	nop
 800abf2:	e00c      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800abf4:	bf00      	nop
 800abf6:	e00a      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800abf8:	bf00      	nop
 800abfa:	e008      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800abfc:	bf00      	nop
 800abfe:	e006      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800ac00:	bf00      	nop
 800ac02:	e004      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800ac04:	bf00      	nop
 800ac06:	e002      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e000      	b.n	800ac0e <USBH_HandleEnum+0x3be>
      break;
 800ac0c:	bf00      	nop
  }
  return Status;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f804 	bl	800ac5a <USBH_HandleSof>
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b0b      	cmp	r3, #11
 800ac6a:	d10a      	bne.n	800ac82 <USBH_HandleSof+0x28>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
  }
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ac9a:	bf00      	nop
}
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800acb6:	bf00      	nop
}
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f005 fd8c 	bl	801082e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	791b      	ldrb	r3, [r3, #4]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fda3 	bl	800b868 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	795b      	ldrb	r3, [r3, #5]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fd9d 	bl	800b868 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af02      	add	r7, sp, #8
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	4613      	mov	r3, r2
 800ad52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad56:	2100      	movs	r1, #0
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f864 	bl	800ae26 <USBH_GetDescriptor>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	b292      	uxth	r2, r2
 800ad78:	4619      	mov	r1, r3
 800ad7a:	f000 f918 	bl	800afae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	331c      	adds	r3, #28
 800ad98:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad9a:	887b      	ldrh	r3, [r7, #2]
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f83d 	bl	800ae26 <USBH_GetDescriptor>
 800adac:	4603      	mov	r3, r0
 800adae:	72fb      	strb	r3, [r7, #11]
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d107      	bne.n	800adc6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adbc:	887a      	ldrh	r2, [r7, #2]
 800adbe:	68f9      	ldr	r1, [r7, #12]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 f964 	bl	800b08e <USBH_ParseCfgDesc>
  }

  return status;
 800adc6:	7afb      	ldrb	r3, [r7, #11]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af02      	add	r7, sp, #8
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	461a      	mov	r2, r3
 800addc:	460b      	mov	r3, r1
 800adde:	72fb      	strb	r3, [r7, #11]
 800ade0:	4613      	mov	r3, r2
 800ade2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800adec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800adf4:	893b      	ldrh	r3, [r7, #8]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	460b      	mov	r3, r1
 800adfa:	2100      	movs	r1, #0
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f812 	bl	800ae26 <USBH_GetDescriptor>
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d107      	bne.n	800ae1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae12:	893a      	ldrh	r2, [r7, #8]
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fa37 	bl	800b28a <USBH_ParseStringDesc>
  }

  return status;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	607b      	str	r3, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	72fb      	strb	r3, [r7, #11]
 800ae34:	4613      	mov	r3, r2
 800ae36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	789b      	ldrb	r3, [r3, #2]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d11c      	bne.n	800ae7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2206      	movs	r2, #6
 800ae50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	893a      	ldrh	r2, [r7, #8]
 800ae56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae58:	893b      	ldrh	r3, [r7, #8]
 800ae5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae62:	d104      	bne.n	800ae6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f240 4209 	movw	r2, #1033	; 0x409
 800ae6a:	829a      	strh	r2, [r3, #20]
 800ae6c:	e002      	b.n	800ae74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8b3a      	ldrh	r2, [r7, #24]
 800ae78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae7a:	8b3b      	ldrh	r3, [r7, #24]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fa50 	bl	800b326 <USBH_CtlReq>
 800ae86:	4603      	mov	r3, r0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	789b      	ldrb	r3, [r3, #2]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10f      	bne.n	800aec4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2205      	movs	r2, #5
 800aeae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa2c 	bl	800b326 <USBH_CtlReq>
 800aece:	4603      	mov	r3, r0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	789b      	ldrb	r3, [r3, #2]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d10e      	bne.n	800af0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2209      	movs	r2, #9
 800aef6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	887a      	ldrh	r2, [r7, #2]
 800aefc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa09 	bl	800b326 <USBH_CtlReq>
 800af14:	4603      	mov	r3, r0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	789b      	ldrb	r3, [r3, #2]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d10f      	bne.n	800af52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2203      	movs	r2, #3
 800af3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	b29a      	uxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f9e5 	bl	800b326 <USBH_CtlReq>
 800af5c:	4603      	mov	r3, r0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	789b      	ldrb	r3, [r3, #2]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d10f      	bne.n	800af9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2202      	movs	r2, #2
 800af7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800af9a:	2200      	movs	r2, #0
 800af9c:	2100      	movs	r1, #0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9c1 	bl	800b326 <USBH_CtlReq>
 800afa4:	4603      	mov	r3, r0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	4613      	mov	r3, r2
 800afba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	785a      	ldrb	r2, [r3, #1]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	3302      	adds	r3, #2
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	3303      	adds	r3, #3
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	021b      	lsls	r3, r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4313      	orrs	r3, r2
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	791a      	ldrb	r2, [r3, #4]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	795a      	ldrb	r2, [r3, #5]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	799a      	ldrb	r2, [r3, #6]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	79da      	ldrb	r2, [r3, #7]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b008:	88fb      	ldrh	r3, [r7, #6]
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d939      	bls.n	800b082 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	3308      	adds	r3, #8
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	b29a      	uxth	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	3309      	adds	r3, #9
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	021b      	lsls	r3, r3, #8
 800b020:	b29b      	uxth	r3, r3
 800b022:	4313      	orrs	r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	330a      	adds	r3, #10
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	b29a      	uxth	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	330b      	adds	r3, #11
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	b29a      	uxth	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	330c      	adds	r3, #12
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	330d      	adds	r3, #13
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4313      	orrs	r3, r2
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	7b9a      	ldrb	r2, [r3, #14]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	7bda      	ldrb	r2, [r3, #15]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	7c1a      	ldrb	r2, [r3, #16]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	7c5a      	ldrb	r2, [r3, #17]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	745a      	strb	r2, [r3, #17]
  }
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b08a      	sub	sp, #40	; 0x28
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	4613      	mov	r3, r2
 800b09a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	785a      	ldrb	r2, [r3, #1]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	3303      	adds	r3, #3
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	021b      	lsls	r3, r3, #8
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	791a      	ldrb	r2, [r3, #4]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	795a      	ldrb	r2, [r3, #5]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	799a      	ldrb	r2, [r3, #6]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	79da      	ldrb	r2, [r3, #7]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	7a1a      	ldrb	r2, [r3, #8]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b104:	88fb      	ldrh	r3, [r7, #6]
 800b106:	2b09      	cmp	r3, #9
 800b108:	d95f      	bls.n	800b1ca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b10a:	2309      	movs	r3, #9
 800b10c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b10e:	2300      	movs	r3, #0
 800b110:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b112:	e051      	b.n	800b1b8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b114:	f107 0316 	add.w	r3, r7, #22
 800b118:	4619      	mov	r1, r3
 800b11a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b11c:	f000 f8e8 	bl	800b2f0 <USBH_GetNextDesc>
 800b120:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	2b04      	cmp	r3, #4
 800b128:	d146      	bne.n	800b1b8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b12a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b12e:	221a      	movs	r2, #26
 800b130:	fb02 f303 	mul.w	r3, r2, r3
 800b134:	3308      	adds	r3, #8
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	3302      	adds	r3, #2
 800b13c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b13e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b140:	69f8      	ldr	r0, [r7, #28]
 800b142:	f000 f846 	bl	800b1d2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b150:	e022      	b.n	800b198 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b152:	f107 0316 	add.w	r3, r7, #22
 800b156:	4619      	mov	r1, r3
 800b158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b15a:	f000 f8c9 	bl	800b2f0 <USBH_GetNextDesc>
 800b15e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	785b      	ldrb	r3, [r3, #1]
 800b164:	2b05      	cmp	r3, #5
 800b166:	d117      	bne.n	800b198 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b16c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b170:	3201      	adds	r2, #1
 800b172:	00d2      	lsls	r2, r2, #3
 800b174:	211a      	movs	r1, #26
 800b176:	fb01 f303 	mul.w	r3, r1, r3
 800b17a:	4413      	add	r3, r2
 800b17c:	3308      	adds	r3, #8
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	3304      	adds	r3, #4
 800b184:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f000 f851 	bl	800b230 <USBH_ParseEPDesc>
            ep_ix++;
 800b18e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b192:	3301      	adds	r3, #1
 800b194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	791b      	ldrb	r3, [r3, #4]
 800b19c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d204      	bcs.n	800b1ae <USBH_ParseCfgDesc+0x120>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	885a      	ldrh	r2, [r3, #2]
 800b1a8:	8afb      	ldrh	r3, [r7, #22]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d8d1      	bhi.n	800b152 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b1ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b1b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d804      	bhi.n	800b1ca <USBH_ParseCfgDesc+0x13c>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	885a      	ldrh	r2, [r3, #2]
 800b1c4:	8afb      	ldrh	r3, [r7, #22]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d8a4      	bhi.n	800b114 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	3728      	adds	r7, #40	; 0x28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781a      	ldrb	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	785a      	ldrb	r2, [r3, #1]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	789a      	ldrb	r2, [r3, #2]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	78da      	ldrb	r2, [r3, #3]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	791a      	ldrb	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	795a      	ldrb	r2, [r3, #5]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	799a      	ldrb	r2, [r3, #6]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	79da      	ldrb	r2, [r3, #7]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	7a1a      	ldrb	r2, [r3, #8]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	721a      	strb	r2, [r3, #8]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	785a      	ldrb	r2, [r3, #1]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	789a      	ldrb	r2, [r3, #2]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	78da      	ldrb	r2, [r3, #3]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	3304      	adds	r3, #4
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b29a      	uxth	r2, r3
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	3305      	adds	r3, #5
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4313      	orrs	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	799a      	ldrb	r2, [r3, #6]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	719a      	strb	r2, [r3, #6]
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b087      	sub	sp, #28
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3301      	adds	r3, #1
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d120      	bne.n	800b2e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	1e9a      	subs	r2, r3, #2
 800b2a8:	88fb      	ldrh	r3, [r7, #6]
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	bf28      	it	cs
 800b2ae:	4613      	movcs	r3, r2
 800b2b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3302      	adds	r3, #2
 800b2b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	82fb      	strh	r3, [r7, #22]
 800b2bc:	e00b      	b.n	800b2d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b2be:	8afb      	ldrh	r3, [r7, #22]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	781a      	ldrb	r2, [r3, #0]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b2d0:	8afb      	ldrh	r3, [r7, #22]
 800b2d2:	3302      	adds	r3, #2
 800b2d4:	82fb      	strh	r3, [r7, #22]
 800b2d6:	8afa      	ldrh	r2, [r7, #22]
 800b2d8:	8abb      	ldrh	r3, [r7, #20]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d3ef      	bcc.n	800b2be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
  }
}
 800b2e4:	bf00      	nop
 800b2e6:	371c      	adds	r7, #28
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	881a      	ldrh	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	4413      	add	r3, r2
 800b306:	b29a      	uxth	r2, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4413      	add	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b318:	68fb      	ldr	r3, [r7, #12]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b086      	sub	sp, #24
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4613      	mov	r3, r2
 800b332:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b334:	2301      	movs	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	789b      	ldrb	r3, [r3, #2]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d002      	beq.n	800b346 <USBH_CtlReq+0x20>
 800b340:	2b02      	cmp	r3, #2
 800b342:	d00f      	beq.n	800b364 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b344:	e027      	b.n	800b396 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	88fa      	ldrh	r2, [r7, #6]
 800b350:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2201      	movs	r2, #1
 800b356:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2202      	movs	r2, #2
 800b35c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b35e:	2301      	movs	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]
      break;
 800b362:	e018      	b.n	800b396 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f81b 	bl	800b3a0 <USBH_HandleControl>
 800b36a:	4603      	mov	r3, r0
 800b36c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <USBH_CtlReq+0x54>
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d106      	bne.n	800b388 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2201      	movs	r2, #1
 800b37e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	761a      	strb	r2, [r3, #24]
      break;
 800b386:	e005      	b.n	800b394 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d102      	bne.n	800b394 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	709a      	strb	r2, [r3, #2]
      break;
 800b394:	bf00      	nop
  }
  return status;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	7e1b      	ldrb	r3, [r3, #24]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	2b0a      	cmp	r3, #10
 800b3b8:	f200 8156 	bhi.w	800b668 <USBH_HandleControl+0x2c8>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <USBH_HandleControl+0x24>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3f1 	.word	0x0800b3f1
 800b3c8:	0800b40b 	.word	0x0800b40b
 800b3cc:	0800b475 	.word	0x0800b475
 800b3d0:	0800b49b 	.word	0x0800b49b
 800b3d4:	0800b4d3 	.word	0x0800b4d3
 800b3d8:	0800b4fd 	.word	0x0800b4fd
 800b3dc:	0800b54f 	.word	0x0800b54f
 800b3e0:	0800b571 	.word	0x0800b571
 800b3e4:	0800b5ad 	.word	0x0800b5ad
 800b3e8:	0800b5d3 	.word	0x0800b5d3
 800b3ec:	0800b611 	.word	0x0800b611
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f103 0110 	add.w	r1, r3, #16
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	795b      	ldrb	r3, [r3, #5]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f943 	bl	800b688 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2202      	movs	r2, #2
 800b406:	761a      	strb	r2, [r3, #24]
      break;
 800b408:	e139      	b.n	800b67e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	795b      	ldrb	r3, [r3, #5]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f005 fafb 	bl	8010a0c <USBH_LL_GetURBState>
 800b416:	4603      	mov	r3, r0
 800b418:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d11e      	bne.n	800b45e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	7c1b      	ldrb	r3, [r3, #16]
 800b424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b428:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8adb      	ldrh	r3, [r3, #22]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b432:	7b7b      	ldrb	r3, [r7, #13]
 800b434:	2b80      	cmp	r3, #128	; 0x80
 800b436:	d103      	bne.n	800b440 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2203      	movs	r2, #3
 800b43c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b43e:	e115      	b.n	800b66c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2205      	movs	r2, #5
 800b444:	761a      	strb	r2, [r3, #24]
      break;
 800b446:	e111      	b.n	800b66c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b448:	7b7b      	ldrb	r3, [r7, #13]
 800b44a:	2b80      	cmp	r3, #128	; 0x80
 800b44c:	d103      	bne.n	800b456 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2209      	movs	r2, #9
 800b452:	761a      	strb	r2, [r3, #24]
      break;
 800b454:	e10a      	b.n	800b66c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2207      	movs	r2, #7
 800b45a:	761a      	strb	r2, [r3, #24]
      break;
 800b45c:	e106      	b.n	800b66c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	2b04      	cmp	r3, #4
 800b462:	d003      	beq.n	800b46c <USBH_HandleControl+0xcc>
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	2b02      	cmp	r3, #2
 800b468:	f040 8100 	bne.w	800b66c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	220b      	movs	r2, #11
 800b470:	761a      	strb	r2, [r3, #24]
      break;
 800b472:	e0fb      	b.n	800b66c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6899      	ldr	r1, [r3, #8]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	899a      	ldrh	r2, [r3, #12]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f93a 	bl	800b706 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2204      	movs	r2, #4
 800b496:	761a      	strb	r2, [r3, #24]
      break;
 800b498:	e0f1      	b.n	800b67e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	791b      	ldrb	r3, [r3, #4]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f005 fab3 	bl	8010a0c <USBH_LL_GetURBState>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d102      	bne.n	800b4b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2209      	movs	r2, #9
 800b4b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b05      	cmp	r3, #5
 800b4ba:	d102      	bne.n	800b4c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b4c0:	e0d6      	b.n	800b670 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	2b04      	cmp	r3, #4
 800b4c6:	f040 80d3 	bne.w	800b670 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	220b      	movs	r2, #11
 800b4ce:	761a      	strb	r2, [r3, #24]
      break;
 800b4d0:	e0ce      	b.n	800b670 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6899      	ldr	r1, [r3, #8]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	899a      	ldrh	r2, [r3, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	795b      	ldrb	r3, [r3, #5]
 800b4de:	2001      	movs	r0, #1
 800b4e0:	9000      	str	r0, [sp, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f8ea 	bl	800b6bc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	761a      	strb	r2, [r3, #24]
      break;
 800b4fa:	e0c0      	b.n	800b67e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	795b      	ldrb	r3, [r3, #5]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f005 fa82 	bl	8010a0c <USBH_LL_GetURBState>
 800b508:	4603      	mov	r3, r0
 800b50a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d103      	bne.n	800b51a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2207      	movs	r2, #7
 800b516:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b518:	e0ac      	b.n	800b674 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	2b05      	cmp	r3, #5
 800b51e:	d105      	bne.n	800b52c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	220c      	movs	r2, #12
 800b524:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b526:	2303      	movs	r3, #3
 800b528:	73fb      	strb	r3, [r7, #15]
      break;
 800b52a:	e0a3      	b.n	800b674 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d103      	bne.n	800b53a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2205      	movs	r2, #5
 800b536:	761a      	strb	r2, [r3, #24]
      break;
 800b538:	e09c      	b.n	800b674 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	f040 8099 	bne.w	800b674 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	220b      	movs	r2, #11
 800b546:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b548:	2302      	movs	r3, #2
 800b54a:	73fb      	strb	r3, [r7, #15]
      break;
 800b54c:	e092      	b.n	800b674 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8d5 	bl	800b706 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b562:	b29a      	uxth	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2208      	movs	r2, #8
 800b56c:	761a      	strb	r2, [r3, #24]

      break;
 800b56e:	e086      	b.n	800b67e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f005 fa48 	bl	8010a0c <USBH_LL_GetURBState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d105      	bne.n	800b592 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	220d      	movs	r2, #13
 800b58a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b590:	e072      	b.n	800b678 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	2b04      	cmp	r3, #4
 800b596:	d103      	bne.n	800b5a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	220b      	movs	r2, #11
 800b59c:	761a      	strb	r2, [r3, #24]
      break;
 800b59e:	e06b      	b.n	800b678 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	d168      	bne.n	800b678 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5aa:	e065      	b.n	800b678 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	795b      	ldrb	r3, [r3, #5]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	9200      	str	r2, [sp, #0]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f87f 	bl	800b6bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	220a      	movs	r2, #10
 800b5ce:	761a      	strb	r2, [r3, #24]
      break;
 800b5d0:	e055      	b.n	800b67e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	795b      	ldrb	r3, [r3, #5]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f005 fa17 	bl	8010a0c <USBH_LL_GetURBState>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d105      	bne.n	800b5f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	220d      	movs	r2, #13
 800b5f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5f2:	e043      	b.n	800b67c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d103      	bne.n	800b602 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2209      	movs	r2, #9
 800b5fe:	761a      	strb	r2, [r3, #24]
      break;
 800b600:	e03c      	b.n	800b67c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b04      	cmp	r3, #4
 800b606:	d139      	bne.n	800b67c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	220b      	movs	r2, #11
 800b60c:	761a      	strb	r2, [r3, #24]
      break;
 800b60e:	e035      	b.n	800b67c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7e5b      	ldrb	r3, [r3, #25]
 800b614:	3301      	adds	r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	765a      	strb	r2, [r3, #25]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7e5b      	ldrb	r3, [r3, #25]
 800b620:	2b02      	cmp	r3, #2
 800b622:	d806      	bhi.n	800b632 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b630:	e025      	b.n	800b67e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b638:	2106      	movs	r1, #6
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	795b      	ldrb	r3, [r3, #5]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f90c 	bl	800b868 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	791b      	ldrb	r3, [r3, #4]
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f906 	bl	800b868 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b662:	2302      	movs	r3, #2
 800b664:	73fb      	strb	r3, [r7, #15]
      break;
 800b666:	e00a      	b.n	800b67e <USBH_HandleControl+0x2de>

    default:
      break;
 800b668:	bf00      	nop
 800b66a:	e008      	b.n	800b67e <USBH_HandleControl+0x2de>
      break;
 800b66c:	bf00      	nop
 800b66e:	e006      	b.n	800b67e <USBH_HandleControl+0x2de>
      break;
 800b670:	bf00      	nop
 800b672:	e004      	b.n	800b67e <USBH_HandleControl+0x2de>
      break;
 800b674:	bf00      	nop
 800b676:	e002      	b.n	800b67e <USBH_HandleControl+0x2de>
      break;
 800b678:	bf00      	nop
 800b67a:	e000      	b.n	800b67e <USBH_HandleControl+0x2de>
      break;
 800b67c:	bf00      	nop
  }

  return status;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af04      	add	r7, sp, #16
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	4613      	mov	r3, r2
 800b694:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b696:	79f9      	ldrb	r1, [r7, #7]
 800b698:	2300      	movs	r3, #0
 800b69a:	9303      	str	r3, [sp, #12]
 800b69c:	2308      	movs	r3, #8
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f005 f97c 	bl	80109aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af04      	add	r7, sp, #16
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	80fb      	strh	r3, [r7, #6]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6e0:	7979      	ldrb	r1, [r7, #5]
 800b6e2:	7e3b      	ldrb	r3, [r7, #24]
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	9302      	str	r3, [sp, #8]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f005 f957 	bl	80109aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b088      	sub	sp, #32
 800b70a:	af04      	add	r7, sp, #16
 800b70c:	60f8      	str	r0, [r7, #12]
 800b70e:	60b9      	str	r1, [r7, #8]
 800b710:	4611      	mov	r1, r2
 800b712:	461a      	mov	r2, r3
 800b714:	460b      	mov	r3, r1
 800b716:	80fb      	strh	r3, [r7, #6]
 800b718:	4613      	mov	r3, r2
 800b71a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b71c:	7979      	ldrb	r1, [r7, #5]
 800b71e:	2300      	movs	r3, #0
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	88fb      	ldrh	r3, [r7, #6]
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	2301      	movs	r3, #1
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	2300      	movs	r3, #0
 800b730:	2201      	movs	r2, #1
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f005 f939 	bl	80109aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b738:	2300      	movs	r3, #0

}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b088      	sub	sp, #32
 800b746:	af04      	add	r7, sp, #16
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	4611      	mov	r1, r2
 800b74e:	461a      	mov	r2, r3
 800b750:	460b      	mov	r3, r1
 800b752:	80fb      	strh	r3, [r7, #6]
 800b754:	4613      	mov	r3, r2
 800b756:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b762:	2300      	movs	r3, #0
 800b764:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b766:	7979      	ldrb	r1, [r7, #5]
 800b768:	7e3b      	ldrb	r3, [r7, #24]
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	88fb      	ldrh	r3, [r7, #6]
 800b76e:	9302      	str	r3, [sp, #8]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	2301      	movs	r3, #1
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	2302      	movs	r3, #2
 800b77a:	2200      	movs	r2, #0
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f005 f914 	bl	80109aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af04      	add	r7, sp, #16
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4611      	mov	r1, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	460b      	mov	r3, r1
 800b79c:	80fb      	strh	r3, [r7, #6]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7a2:	7979      	ldrb	r1, [r7, #5]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9303      	str	r3, [sp, #12]
 800b7a8:	88fb      	ldrh	r3, [r7, #6]
 800b7aa:	9302      	str	r3, [sp, #8]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f005 f8f6 	bl	80109aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af04      	add	r7, sp, #16
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	70fb      	strb	r3, [r7, #3]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	70bb      	strb	r3, [r7, #2]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b7e2:	7878      	ldrb	r0, [r7, #1]
 800b7e4:	78ba      	ldrb	r2, [r7, #2]
 800b7e6:	78f9      	ldrb	r1, [r7, #3]
 800b7e8:	8b3b      	ldrh	r3, [r7, #24]
 800b7ea:	9302      	str	r3, [sp, #8]
 800b7ec:	7d3b      	ldrb	r3, [r7, #20]
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	7c3b      	ldrb	r3, [r7, #16]
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f005 f889 	bl	801090e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f005 f8a8 	bl	801096c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	460b      	mov	r3, r1
 800b830:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f836 	bl	800b8a4 <USBH_GetFreePipe>
 800b838:	4603      	mov	r3, r0
 800b83a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b83c:	89fb      	ldrh	r3, [r7, #14]
 800b83e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b842:	4293      	cmp	r3, r2
 800b844:	d00a      	beq.n	800b85c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	33e0      	adds	r3, #224	; 0xe0
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	440b      	add	r3, r1
 800b85a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b85c:	89fb      	ldrh	r3, [r7, #14]
 800b85e:	b2db      	uxtb	r3, r3
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b874:	78fb      	ldrb	r3, [r7, #3]
 800b876:	2b0a      	cmp	r3, #10
 800b878:	d80d      	bhi.n	800b896 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	33e0      	adds	r3, #224	; 0xe0
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	78fb      	ldrb	r3, [r7, #3]
 800b888:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	33e0      	adds	r3, #224	; 0xe0
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	440b      	add	r3, r1
 800b894:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]
 800b8b4:	e00f      	b.n	800b8d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	33e0      	adds	r3, #224	; 0xe0
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4413      	add	r3, r2
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	e007      	b.n	800b8e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	73fb      	strb	r3, [r7, #15]
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	2b0a      	cmp	r3, #10
 800b8da:	d9ec      	bls.n	800b8b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	4a08      	ldr	r2, [pc, #32]	; (800b91c <disk_status+0x30>)
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	79fa      	ldrb	r2, [r7, #7]
 800b904:	4905      	ldr	r1, [pc, #20]	; (800b91c <disk_status+0x30>)
 800b906:	440a      	add	r2, r1
 800b908:	7a12      	ldrb	r2, [r2, #8]
 800b90a:	4610      	mov	r0, r2
 800b90c:	4798      	blx	r3
 800b90e:	4603      	mov	r3, r0
 800b910:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b912:	7bfb      	ldrb	r3, [r7, #15]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000500 	.word	0x20000500

0800b920 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	4a0d      	ldr	r2, [pc, #52]	; (800b968 <disk_initialize+0x48>)
 800b932:	5cd3      	ldrb	r3, [r2, r3]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d111      	bne.n	800b95c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	4a0b      	ldr	r2, [pc, #44]	; (800b968 <disk_initialize+0x48>)
 800b93c:	2101      	movs	r1, #1
 800b93e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <disk_initialize+0x48>)
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	4906      	ldr	r1, [pc, #24]	; (800b968 <disk_initialize+0x48>)
 800b950:	440a      	add	r2, r1
 800b952:	7a12      	ldrb	r2, [r2, #8]
 800b954:	4610      	mov	r0, r2
 800b956:	4798      	blx	r3
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20000500 	.word	0x20000500

0800b96c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60b9      	str	r1, [r7, #8]
 800b974:	607a      	str	r2, [r7, #4]
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4a0a      	ldr	r2, [pc, #40]	; (800b9a8 <disk_read+0x3c>)
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	689c      	ldr	r4, [r3, #8]
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	4a07      	ldr	r2, [pc, #28]	; (800b9a8 <disk_read+0x3c>)
 800b98c:	4413      	add	r3, r2
 800b98e:	7a18      	ldrb	r0, [r3, #8]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	47a0      	blx	r4
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd90      	pop	{r4, r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000500 	.word	0x20000500

0800b9ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	4a0a      	ldr	r2, [pc, #40]	; (800b9e8 <disk_write+0x3c>)
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	68dc      	ldr	r4, [r3, #12]
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	4a07      	ldr	r2, [pc, #28]	; (800b9e8 <disk_write+0x3c>)
 800b9cc:	4413      	add	r3, r2
 800b9ce:	7a18      	ldrb	r0, [r3, #8]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	68b9      	ldr	r1, [r7, #8]
 800b9d6:	47a0      	blx	r4
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd90      	pop	{r4, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000500 	.word	0x20000500

0800b9ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	603a      	str	r2, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	4a09      	ldr	r2, [pc, #36]	; (800ba24 <disk_ioctl+0x38>)
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	79fa      	ldrb	r2, [r7, #7]
 800ba0a:	4906      	ldr	r1, [pc, #24]	; (800ba24 <disk_ioctl+0x38>)
 800ba0c:	440a      	add	r2, r1
 800ba0e:	7a10      	ldrb	r0, [r2, #8]
 800ba10:	79b9      	ldrb	r1, [r7, #6]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4798      	blx	r3
 800ba16:	4603      	mov	r3, r0
 800ba18:	73fb      	strb	r3, [r7, #15]
  return res;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	20000500 	.word	0x20000500

0800ba28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	3301      	adds	r3, #1
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba38:	89fb      	ldrh	r3, [r7, #14]
 800ba3a:	021b      	lsls	r3, r3, #8
 800ba3c:	b21a      	sxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b21b      	sxth	r3, r3
 800ba44:	4313      	orrs	r3, r2
 800ba46:	b21b      	sxth	r3, r3
 800ba48:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba4a:	89fb      	ldrh	r3, [r7, #14]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3303      	adds	r3, #3
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	021b      	lsls	r3, r3, #8
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	3202      	adds	r2, #2
 800ba70:	7812      	ldrb	r2, [r2, #0]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	3201      	adds	r2, #1
 800ba7e:	7812      	ldrb	r2, [r2, #0]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	021b      	lsls	r3, r3, #8
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	7812      	ldrb	r2, [r2, #0]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba90:	68fb      	ldr	r3, [r7, #12]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ba9e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800baa2:	b08d      	sub	sp, #52	; 0x34
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	3307      	adds	r3, #7
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	f04f 0300 	mov.w	r3, #0
 800bab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800bab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800babc:	f04f 0000 	mov.w	r0, #0
 800bac0:	f04f 0100 	mov.w	r1, #0
 800bac4:	0219      	lsls	r1, r3, #8
 800bac6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800baca:	0210      	lsls	r0, r2, #8
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	3306      	adds	r3, #6
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	f04f 0300 	mov.w	r3, #0
 800bad8:	ea40 0402 	orr.w	r4, r0, r2
 800badc:	ea41 0503 	orr.w	r5, r1, r3
 800bae0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800bae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bae8:	f04f 0000 	mov.w	r0, #0
 800baec:	f04f 0100 	mov.w	r1, #0
 800baf0:	0219      	lsls	r1, r3, #8
 800baf2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800baf6:	0210      	lsls	r0, r2, #8
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	3305      	adds	r3, #5
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	ea40 0802 	orr.w	r8, r0, r2
 800bb08:	ea41 0903 	orr.w	r9, r1, r3
 800bb0c:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800bb10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb14:	f04f 0000 	mov.w	r0, #0
 800bb18:	f04f 0100 	mov.w	r1, #0
 800bb1c:	0219      	lsls	r1, r3, #8
 800bb1e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bb22:	0210      	lsls	r0, r2, #8
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	3304      	adds	r3, #4
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	ea40 0402 	orr.w	r4, r0, r2
 800bb34:	61bc      	str	r4, [r7, #24]
 800bb36:	430b      	orrs	r3, r1
 800bb38:	61fb      	str	r3, [r7, #28]
 800bb3a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bb3e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800bb42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bb46:	f04f 0200 	mov.w	r2, #0
 800bb4a:	f04f 0300 	mov.w	r3, #0
 800bb4e:	020b      	lsls	r3, r1, #8
 800bb50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb54:	0202      	lsls	r2, r0, #8
 800bb56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb58:	3103      	adds	r1, #3
 800bb5a:	7809      	ldrb	r1, [r1, #0]
 800bb5c:	b2c8      	uxtb	r0, r1
 800bb5e:	f04f 0100 	mov.w	r1, #0
 800bb62:	ea42 0400 	orr.w	r4, r2, r0
 800bb66:	613c      	str	r4, [r7, #16]
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bb70:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800bb74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	020b      	lsls	r3, r1, #8
 800bb82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb86:	0202      	lsls	r2, r0, #8
 800bb88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb8a:	3102      	adds	r1, #2
 800bb8c:	7809      	ldrb	r1, [r1, #0]
 800bb8e:	b2c8      	uxtb	r0, r1
 800bb90:	f04f 0100 	mov.w	r1, #0
 800bb94:	ea42 0400 	orr.w	r4, r2, r0
 800bb98:	60bc      	str	r4, [r7, #8]
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bba2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800bba6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bbaa:	f04f 0200 	mov.w	r2, #0
 800bbae:	f04f 0300 	mov.w	r3, #0
 800bbb2:	020b      	lsls	r3, r1, #8
 800bbb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbb8:	0202      	lsls	r2, r0, #8
 800bbba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbbc:	3101      	adds	r1, #1
 800bbbe:	7809      	ldrb	r1, [r1, #0]
 800bbc0:	b2c8      	uxtb	r0, r1
 800bbc2:	f04f 0100 	mov.w	r1, #0
 800bbc6:	ea42 0400 	orr.w	r4, r2, r0
 800bbca:	603c      	str	r4, [r7, #0]
 800bbcc:	430b      	orrs	r3, r1
 800bbce:	607b      	str	r3, [r7, #4]
 800bbd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bbd4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800bbd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bbdc:	f04f 0200 	mov.w	r2, #0
 800bbe0:	f04f 0300 	mov.w	r3, #0
 800bbe4:	020b      	lsls	r3, r1, #8
 800bbe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbea:	0202      	lsls	r2, r0, #8
 800bbec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbee:	7809      	ldrb	r1, [r1, #0]
 800bbf0:	b2c8      	uxtb	r0, r1
 800bbf2:	f04f 0100 	mov.w	r1, #0
 800bbf6:	ea42 0a00 	orr.w	sl, r2, r0
 800bbfa:	ea43 0b01 	orr.w	fp, r3, r1
 800bbfe:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800bc02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800bc06:	4610      	mov	r0, r2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	3734      	adds	r7, #52	; 0x34
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bc12:	4770      	bx	lr

0800bc14 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	887a      	ldrh	r2, [r7, #2]
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	701a      	strb	r2, [r3, #0]
 800bc2c:	887b      	ldrh	r3, [r7, #2]
 800bc2e:	0a1b      	lsrs	r3, r3, #8
 800bc30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	887a      	ldrh	r2, [r7, #2]
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
}
 800bc3e:	bf00      	nop
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	0a1b      	lsrs	r3, r3, #8
 800bc64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	0a1b      	lsrs	r3, r3, #8
 800bc76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	607a      	str	r2, [r7, #4]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800bca2:	b480      	push	{r7}
 800bca4:	b085      	sub	sp, #20
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	60f8      	str	r0, [r7, #12]
 800bcaa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	60fa      	str	r2, [r7, #12]
 800bcb4:	783a      	ldrb	r2, [r7, #0]
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	f04f 0300 	mov.w	r3, #0
 800bcc4:	0a02      	lsrs	r2, r0, #8
 800bcc6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcca:	0a0b      	lsrs	r3, r1, #8
 800bccc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	60fa      	str	r2, [r7, #12]
 800bcd6:	783a      	ldrb	r2, [r7, #0]
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcde:	f04f 0200 	mov.w	r2, #0
 800bce2:	f04f 0300 	mov.w	r3, #0
 800bce6:	0a02      	lsrs	r2, r0, #8
 800bce8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcec:	0a0b      	lsrs	r3, r1, #8
 800bcee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	60fa      	str	r2, [r7, #12]
 800bcf8:	783a      	ldrb	r2, [r7, #0]
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd00:	f04f 0200 	mov.w	r2, #0
 800bd04:	f04f 0300 	mov.w	r3, #0
 800bd08:	0a02      	lsrs	r2, r0, #8
 800bd0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bd0e:	0a0b      	lsrs	r3, r1, #8
 800bd10:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	60fa      	str	r2, [r7, #12]
 800bd1a:	783a      	ldrb	r2, [r7, #0]
 800bd1c:	701a      	strb	r2, [r3, #0]
 800bd1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd22:	f04f 0200 	mov.w	r2, #0
 800bd26:	f04f 0300 	mov.w	r3, #0
 800bd2a:	0a02      	lsrs	r2, r0, #8
 800bd2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bd30:	0a0b      	lsrs	r3, r1, #8
 800bd32:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	60fa      	str	r2, [r7, #12]
 800bd3c:	783a      	ldrb	r2, [r7, #0]
 800bd3e:	701a      	strb	r2, [r3, #0]
 800bd40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	f04f 0300 	mov.w	r3, #0
 800bd4c:	0a02      	lsrs	r2, r0, #8
 800bd4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bd52:	0a0b      	lsrs	r3, r1, #8
 800bd54:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	60fa      	str	r2, [r7, #12]
 800bd5e:	783a      	ldrb	r2, [r7, #0]
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	f04f 0300 	mov.w	r3, #0
 800bd6e:	0a02      	lsrs	r2, r0, #8
 800bd70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bd74:	0a0b      	lsrs	r3, r1, #8
 800bd76:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	60fa      	str	r2, [r7, #12]
 800bd80:	783a      	ldrb	r2, [r7, #0]
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	0a02      	lsrs	r2, r0, #8
 800bd92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bd96:	0a0b      	lsrs	r3, r1, #8
 800bd98:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	60fa      	str	r2, [r7, #12]
 800bda2:	783a      	ldrb	r2, [r7, #0]
 800bda4:	701a      	strb	r2, [r3, #0]
}
 800bda6:	bf00      	nop
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bdb2:	b480      	push	{r7}
 800bdb4:	b087      	sub	sp, #28
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00d      	beq.n	800bde8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	1c53      	adds	r3, r2, #1
 800bdd0:	613b      	str	r3, [r7, #16]
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	1c59      	adds	r1, r3, #1
 800bdd6:	6179      	str	r1, [r7, #20]
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f1      	bne.n	800bdcc <mem_cpy+0x1a>
	}
}
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	617a      	str	r2, [r7, #20]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3b01      	subs	r3, #1
 800be14:	607b      	str	r3, [r7, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f3      	bne.n	800be04 <mem_set+0x10>
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	371c      	adds	r7, #28
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800be2a:	b480      	push	{r7}
 800be2c:	b089      	sub	sp, #36	; 0x24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	61fb      	str	r3, [r7, #28]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	61fa      	str	r2, [r7, #28]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	61ba      	str	r2, [r7, #24]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	1acb      	subs	r3, r1, r3
 800be56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <mem_cmp+0x40>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0eb      	beq.n	800be42 <mem_cmp+0x18>

	return r;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3724      	adds	r7, #36	; 0x24
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be82:	e002      	b.n	800be8a <chk_chr+0x12>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3301      	adds	r3, #1
 800be88:	607b      	str	r3, [r7, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <chk_chr+0x26>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d1f2      	bne.n	800be84 <chk_chr+0xc>
	return *str;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781b      	ldrb	r3, [r3, #0]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
	...

0800beb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	e029      	b.n	800bf18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bec4:	4a27      	ldr	r2, [pc, #156]	; (800bf64 <chk_lock+0xb4>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	4413      	add	r3, r2
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d01d      	beq.n	800bf0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bed2:	4a24      	ldr	r2, [pc, #144]	; (800bf64 <chk_lock+0xb4>)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	011b      	lsls	r3, r3, #4
 800bed8:	4413      	add	r3, r2
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d116      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bee4:	4a1f      	ldr	r2, [pc, #124]	; (800bf64 <chk_lock+0xb4>)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	4413      	add	r3, r2
 800beec:	3304      	adds	r3, #4
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d10c      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bef8:	4a1a      	ldr	r2, [pc, #104]	; (800bf64 <chk_lock+0xb4>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	4413      	add	r3, r2
 800bf00:	3308      	adds	r3, #8
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d102      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf0c:	e007      	b.n	800bf1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3301      	adds	r3, #1
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d9d2      	bls.n	800bec4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d109      	bne.n	800bf38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <chk_lock+0x80>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d101      	bne.n	800bf34 <chk_lock+0x84>
 800bf30:	2300      	movs	r3, #0
 800bf32:	e010      	b.n	800bf56 <chk_lock+0xa6>
 800bf34:	2312      	movs	r3, #18
 800bf36:	e00e      	b.n	800bf56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d108      	bne.n	800bf50 <chk_lock+0xa0>
 800bf3e:	4a09      	ldr	r2, [pc, #36]	; (800bf64 <chk_lock+0xb4>)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	4413      	add	r3, r2
 800bf46:	330c      	adds	r3, #12
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	d101      	bne.n	800bf54 <chk_lock+0xa4>
 800bf50:	2310      	movs	r3, #16
 800bf52:	e000      	b.n	800bf56 <chk_lock+0xa6>
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	200004e0 	.word	0x200004e0

0800bf68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	e002      	b.n	800bf7a <enq_lock+0x12>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3301      	adds	r3, #1
 800bf78:	607b      	str	r3, [r7, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d806      	bhi.n	800bf8e <enq_lock+0x26>
 800bf80:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <enq_lock+0x40>)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	4413      	add	r3, r2
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f2      	bne.n	800bf74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	bf14      	ite	ne
 800bf94:	2301      	movne	r3, #1
 800bf96:	2300      	moveq	r3, #0
 800bf98:	b2db      	uxtb	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	200004e0 	.word	0x200004e0

0800bfac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e01f      	b.n	800bffc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bfbc:	4a41      	ldr	r2, [pc, #260]	; (800c0c4 <inc_lock+0x118>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d113      	bne.n	800bff6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bfce:	4a3d      	ldr	r2, [pc, #244]	; (800c0c4 <inc_lock+0x118>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d109      	bne.n	800bff6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bfe2:	4a38      	ldr	r2, [pc, #224]	; (800c0c4 <inc_lock+0x118>)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	4413      	add	r3, r2
 800bfea:	3308      	adds	r3, #8
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d006      	beq.n	800c004 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d9dc      	bls.n	800bfbc <inc_lock+0x10>
 800c002:	e000      	b.n	800c006 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c004:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d132      	bne.n	800c072 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	e002      	b.n	800c018 <inc_lock+0x6c>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3301      	adds	r3, #1
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d806      	bhi.n	800c02c <inc_lock+0x80>
 800c01e:	4a29      	ldr	r2, [pc, #164]	; (800c0c4 <inc_lock+0x118>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	4413      	add	r3, r2
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1f2      	bne.n	800c012 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d101      	bne.n	800c036 <inc_lock+0x8a>
 800c032:	2300      	movs	r3, #0
 800c034:	e040      	b.n	800c0b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	4922      	ldr	r1, [pc, #136]	; (800c0c4 <inc_lock+0x118>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	440b      	add	r3, r1
 800c042:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	491e      	ldr	r1, [pc, #120]	; (800c0c4 <inc_lock+0x118>)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	440b      	add	r3, r1
 800c050:	3304      	adds	r3, #4
 800c052:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c058:	491a      	ldr	r1, [pc, #104]	; (800c0c4 <inc_lock+0x118>)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	440b      	add	r3, r1
 800c060:	3308      	adds	r3, #8
 800c062:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c064:	4a17      	ldr	r2, [pc, #92]	; (800c0c4 <inc_lock+0x118>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	4413      	add	r3, r2
 800c06c:	330c      	adds	r3, #12
 800c06e:	2200      	movs	r2, #0
 800c070:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d009      	beq.n	800c08c <inc_lock+0xe0>
 800c078:	4a12      	ldr	r2, [pc, #72]	; (800c0c4 <inc_lock+0x118>)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	4413      	add	r3, r2
 800c080:	330c      	adds	r3, #12
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <inc_lock+0xe0>
 800c088:	2300      	movs	r3, #0
 800c08a:	e015      	b.n	800c0b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d108      	bne.n	800c0a4 <inc_lock+0xf8>
 800c092:	4a0c      	ldr	r2, [pc, #48]	; (800c0c4 <inc_lock+0x118>)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	4413      	add	r3, r2
 800c09a:	330c      	adds	r3, #12
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	e001      	b.n	800c0a8 <inc_lock+0xfc>
 800c0a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0a8:	4906      	ldr	r1, [pc, #24]	; (800c0c4 <inc_lock+0x118>)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	440b      	add	r3, r1
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	200004e0 	.word	0x200004e0

0800c0c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	607b      	str	r3, [r7, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d825      	bhi.n	800c128 <dec_lock+0x60>
		n = Files[i].ctr;
 800c0dc:	4a17      	ldr	r2, [pc, #92]	; (800c13c <dec_lock+0x74>)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	4413      	add	r3, r2
 800c0e4:	330c      	adds	r3, #12
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c0ea:	89fb      	ldrh	r3, [r7, #14]
 800c0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f0:	d101      	bne.n	800c0f6 <dec_lock+0x2e>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c0f6:	89fb      	ldrh	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <dec_lock+0x3a>
 800c0fc:	89fb      	ldrh	r3, [r7, #14]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c102:	4a0e      	ldr	r2, [pc, #56]	; (800c13c <dec_lock+0x74>)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	4413      	add	r3, r2
 800c10a:	330c      	adds	r3, #12
 800c10c:	89fa      	ldrh	r2, [r7, #14]
 800c10e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c110:	89fb      	ldrh	r3, [r7, #14]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d105      	bne.n	800c122 <dec_lock+0x5a>
 800c116:	4a09      	ldr	r2, [pc, #36]	; (800c13c <dec_lock+0x74>)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	4413      	add	r3, r2
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	737b      	strb	r3, [r7, #13]
 800c126:	e001      	b.n	800c12c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c128:	2302      	movs	r3, #2
 800c12a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c12c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	200004e0 	.word	0x200004e0

0800c140 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e010      	b.n	800c170 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c14e:	4a0d      	ldr	r2, [pc, #52]	; (800c184 <clear_lock+0x44>)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	4413      	add	r3, r2
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d105      	bne.n	800c16a <clear_lock+0x2a>
 800c15e:	4a09      	ldr	r2, [pc, #36]	; (800c184 <clear_lock+0x44>)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	011b      	lsls	r3, r3, #4
 800c164:	4413      	add	r3, r2
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3301      	adds	r3, #1
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d9eb      	bls.n	800c14e <clear_lock+0xe>
	}
}
 800c176:	bf00      	nop
 800c178:	bf00      	nop
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	200004e0 	.word	0x200004e0

0800c188 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	78db      	ldrb	r3, [r3, #3]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d034      	beq.n	800c206 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7858      	ldrb	r0, [r3, #1]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	f7ff fbfc 	bl	800b9ac <disk_write>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	73fb      	strb	r3, [r7, #15]
 800c1be:	e022      	b.n	800c206 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	1ad2      	subs	r2, r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d217      	bcs.n	800c206 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	789b      	ldrb	r3, [r3, #2]
 800c1da:	613b      	str	r3, [r7, #16]
 800c1dc:	e010      	b.n	800c200 <sync_window+0x78>
					wsect += fs->fsize;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7858      	ldrb	r0, [r3, #1]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	f7ff fbd9 	bl	800b9ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d8eb      	bhi.n	800c1de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c206:	7bfb      	ldrb	r3, [r7, #15]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	429a      	cmp	r2, r3
 800c226:	d01b      	beq.n	800c260 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff ffad 	bl	800c188 <sync_window>
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d113      	bne.n	800c260 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7858      	ldrb	r0, [r3, #1]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c242:	2301      	movs	r3, #1
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	f7ff fb91 	bl	800b96c <disk_read>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c250:	f04f 33ff 	mov.w	r3, #4294967295
 800c254:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c256:	2301      	movs	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c260:	7bfb      	ldrb	r3, [r7, #15]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ff87 	bl	800c188 <sync_window>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d159      	bne.n	800c338 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d149      	bne.n	800c320 <sync_fs+0xb4>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	791b      	ldrb	r3, [r3, #4]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d145      	bne.n	800c320 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	899b      	ldrh	r3, [r3, #12]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	f7ff fda7 	bl	800bdf4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	333c      	adds	r3, #60	; 0x3c
 800c2aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fcae 	bl	800bc14 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	333c      	adds	r3, #60	; 0x3c
 800c2bc:	4921      	ldr	r1, [pc, #132]	; (800c344 <sync_fs+0xd8>)
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff fcc3 	bl	800bc4a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	333c      	adds	r3, #60	; 0x3c
 800c2c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2cc:	491e      	ldr	r1, [pc, #120]	; (800c348 <sync_fs+0xdc>)
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff fcbb 	bl	800bc4a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	333c      	adds	r3, #60	; 0x3c
 800c2d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	69db      	ldr	r3, [r3, #28]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7ff fcb1 	bl	800bc4a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	333c      	adds	r3, #60	; 0x3c
 800c2ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	f7ff fca7 	bl	800bc4a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	7858      	ldrb	r0, [r3, #1]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c314:	2301      	movs	r3, #1
 800c316:	f7ff fb49 	bl	800b9ac <disk_write>
			fs->fsi_flag = 0;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	785b      	ldrb	r3, [r3, #1]
 800c324:	2200      	movs	r2, #0
 800c326:	2100      	movs	r1, #0
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fb5f 	bl	800b9ec <disk_ioctl>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <sync_fs+0xcc>
 800c334:	2301      	movs	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c338:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	41615252 	.word	0x41615252
 800c348:	61417272 	.word	0x61417272

0800c34c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	3b02      	subs	r3, #2
 800c35a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	3b02      	subs	r3, #2
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d301      	bcc.n	800c36c <clust2sect+0x20>
 800c368:	2300      	movs	r3, #0
 800c36a:	e008      	b.n	800c37e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	895b      	ldrh	r3, [r3, #10]
 800c370:	461a      	mov	r2, r3
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	fb03 f202 	mul.w	r2, r3, r2
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c37c:	4413      	add	r3, r2
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
	...

0800c38c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c38c:	b5b0      	push	{r4, r5, r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d904      	bls.n	800c3ac <get_fat+0x20>
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d302      	bcc.n	800c3b2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	61fb      	str	r3, [r7, #28]
 800c3b0:	e139      	b.n	800c626 <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b6:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	f200 8125 	bhi.w	800c60e <get_fat+0x282>
 800c3c4:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <get_fat+0x40>)
 800c3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ca:	bf00      	nop
 800c3cc:	0800c3dd 	.word	0x0800c3dd
 800c3d0:	0800c48b 	.word	0x0800c48b
 800c3d4:	0800c4d7 	.word	0x0800c4d7
 800c3d8:	0800c527 	.word	0x0800c527
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	085b      	lsrs	r3, r3, #1
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	899b      	ldrh	r3, [r3, #12]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3fa:	4413      	add	r3, r2
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	69b8      	ldr	r0, [r7, #24]
 800c400:	f7ff ff06 	bl	800c210 <move_window>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 8104 	bne.w	800c614 <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	60fa      	str	r2, [r7, #12]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	8992      	ldrh	r2, [r2, #12]
 800c416:	fbb3 f1f2 	udiv	r1, r3, r2
 800c41a:	fb02 f201 	mul.w	r2, r2, r1
 800c41e:	1a9b      	subs	r3, r3, r2
 800c420:	69ba      	ldr	r2, [r7, #24]
 800c422:	4413      	add	r3, r2
 800c424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c428:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	4619      	mov	r1, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	fbb3 f3f1 	udiv	r3, r3, r1
 800c43a:	4413      	add	r3, r2
 800c43c:	4619      	mov	r1, r3
 800c43e:	69b8      	ldr	r0, [r7, #24]
 800c440:	f7ff fee6 	bl	800c210 <move_window>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	f040 80e6 	bne.w	800c618 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	899b      	ldrh	r3, [r3, #12]
 800c450:	461a      	mov	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	fbb3 f1f2 	udiv	r1, r3, r2
 800c458:	fb02 f201 	mul.w	r2, r2, r1
 800c45c:	1a9b      	subs	r3, r3, r2
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	4413      	add	r3, r2
 800c462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	461a      	mov	r2, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <get_fat+0xf4>
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	091b      	lsrs	r3, r3, #4
 800c47e:	e002      	b.n	800c486 <get_fat+0xfa>
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c486:	61fb      	str	r3, [r7, #28]
			break;
 800c488:	e0cd      	b.n	800c626 <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	899b      	ldrh	r3, [r3, #12]
 800c492:	085b      	lsrs	r3, r3, #1
 800c494:	b29b      	uxth	r3, r3
 800c496:	4619      	mov	r1, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c49e:	4413      	add	r3, r2
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	69b8      	ldr	r0, [r7, #24]
 800c4a4:	f7ff feb4 	bl	800c210 <move_window>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f040 80b6 	bne.w	800c61c <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	8992      	ldrh	r2, [r2, #12]
 800c4be:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4c2:	fb02 f200 	mul.w	r2, r2, r0
 800c4c6:	1a9b      	subs	r3, r3, r2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff faac 	bl	800ba28 <ld_word>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	61fb      	str	r3, [r7, #28]
			break;
 800c4d4:	e0a7      	b.n	800c626 <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	899b      	ldrh	r3, [r3, #12]
 800c4de:	089b      	lsrs	r3, r3, #2
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4ea:	4413      	add	r3, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	69b8      	ldr	r0, [r7, #24]
 800c4f0:	f7ff fe8e 	bl	800c210 <move_window>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f040 8092 	bne.w	800c620 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	8992      	ldrh	r2, [r2, #12]
 800c50a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c50e:	fb02 f200 	mul.w	r2, r2, r0
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	440b      	add	r3, r1
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff fa9e 	bl	800ba58 <ld_dword>
 800c51c:	4603      	mov	r3, r0
 800c51e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c522:	61fb      	str	r3, [r7, #28]
			break;
 800c524:	e07f      	b.n	800c626 <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	d06e      	beq.n	800c60e <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c540:	f112 34ff 	adds.w	r4, r2, #4294967295
 800c544:	f143 35ff 	adc.w	r5, r3, #4294967295
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	899b      	ldrh	r3, [r3, #12]
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	f04f 0300 	mov.w	r3, #0
 800c552:	4620      	mov	r0, r4
 800c554:	4629      	mov	r1, r5
 800c556:	f7f3 fe51 	bl	80001fc <__aeabi_uldivmod>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	895b      	ldrh	r3, [r3, #10]
 800c562:	fbb2 f3f3 	udiv	r3, r2, r3
 800c566:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	79db      	ldrb	r3, [r3, #7]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d10e      	bne.n	800c58e <get_fat+0x202>
					if (cofs <= clen) {
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	429a      	cmp	r2, r3
 800c576:	d80a      	bhi.n	800c58e <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d002      	beq.n	800c586 <get_fat+0x1fa>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	3301      	adds	r3, #1
 800c584:	e001      	b.n	800c58a <get_fat+0x1fe>
 800c586:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c58a:	61fb      	str	r3, [r7, #28]
						break;
 800c58c:	e04b      	b.n	800c626 <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	79db      	ldrb	r3, [r3, #7]
 800c592:	2b03      	cmp	r3, #3
 800c594:	d108      	bne.n	800c5a8 <get_fat+0x21c>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d203      	bcs.n	800c5a8 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	61fb      	str	r3, [r7, #28]
					break;
 800c5a6:	e03e      	b.n	800c626 <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	79db      	ldrb	r3, [r3, #7]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d02e      	beq.n	800c60e <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800c5b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c5bc:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800c5be:	e032      	b.n	800c626 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	899b      	ldrh	r3, [r3, #12]
 800c5c8:	089b      	lsrs	r3, r3, #2
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	69b8      	ldr	r0, [r7, #24]
 800c5da:	f7ff fe19 	bl	800c210 <move_window>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d11f      	bne.n	800c624 <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	69ba      	ldr	r2, [r7, #24]
 800c5f0:	8992      	ldrh	r2, [r2, #12]
 800c5f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5f6:	fb02 f200 	mul.w	r2, r2, r0
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	440b      	add	r3, r1
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff fa2a 	bl	800ba58 <ld_dword>
 800c604:	4603      	mov	r3, r0
 800c606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c60a:	61fb      	str	r3, [r7, #28]
					break;
 800c60c:	e00b      	b.n	800c626 <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c60e:	2301      	movs	r3, #1
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	e008      	b.n	800c626 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c614:	bf00      	nop
 800c616:	e006      	b.n	800c626 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c618:	bf00      	nop
 800c61a:	e004      	b.n	800c626 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c61c:	bf00      	nop
 800c61e:	e002      	b.n	800c626 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c620:	bf00      	nop
 800c622:	e000      	b.n	800c626 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c624:	bf00      	nop
		}
	}

	return val;
 800c626:	69fb      	ldr	r3, [r7, #28]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bdb0      	pop	{r4, r5, r7, pc}

0800c630 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c630:	b590      	push	{r4, r7, lr}
 800c632:	b089      	sub	sp, #36	; 0x24
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c63c:	2302      	movs	r3, #2
 800c63e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b01      	cmp	r3, #1
 800c644:	f240 8106 	bls.w	800c854 <put_fat+0x224>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	f080 8100 	bcs.w	800c854 <put_fat+0x224>
		switch (fs->fs_type) {
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b04      	cmp	r3, #4
 800c65a:	f300 8104 	bgt.w	800c866 <put_fat+0x236>
 800c65e:	2b03      	cmp	r3, #3
 800c660:	f280 80b3 	bge.w	800c7ca <put_fat+0x19a>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d003      	beq.n	800c670 <put_fat+0x40>
 800c668:	2b02      	cmp	r3, #2
 800c66a:	f000 8083 	beq.w	800c774 <put_fat+0x144>
 800c66e:	e0fa      	b.n	800c866 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	085b      	lsrs	r3, r3, #1
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	4413      	add	r3, r2
 800c67c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	899b      	ldrh	r3, [r3, #12]
 800c686:	4619      	mov	r1, r3
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c68e:	4413      	add	r3, r2
 800c690:	4619      	mov	r1, r3
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7ff fdbc 	bl	800c210 <move_window>
 800c698:	4603      	mov	r3, r0
 800c69a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c69c:	7ffb      	ldrb	r3, [r7, #31]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 80da 	bne.w	800c858 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	61ba      	str	r2, [r7, #24]
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	8992      	ldrh	r2, [r2, #12]
 800c6b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6b8:	fb02 f200 	mul.w	r2, r2, r0
 800c6bc:	1a9b      	subs	r3, r3, r2
 800c6be:	440b      	add	r3, r1
 800c6c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00d      	beq.n	800c6e8 <put_fat+0xb8>
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	b25b      	sxtb	r3, r3
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	b25a      	sxtb	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	b25b      	sxtb	r3, r3
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	b25b      	sxtb	r3, r3
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	e001      	b.n	800c6ec <put_fat+0xbc>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	899b      	ldrh	r3, [r3, #12]
 800c6fe:	4619      	mov	r1, r3
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	fbb3 f3f1 	udiv	r3, r3, r1
 800c706:	4413      	add	r3, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff fd80 	bl	800c210 <move_window>
 800c710:	4603      	mov	r3, r0
 800c712:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c714:	7ffb      	ldrb	r3, [r7, #31]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f040 80a0 	bne.w	800c85c <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	899b      	ldrh	r3, [r3, #12]
 800c726:	461a      	mov	r2, r3
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c72e:	fb02 f200 	mul.w	r2, r2, r0
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	440b      	add	r3, r1
 800c736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <put_fat+0x11a>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	091b      	lsrs	r3, r3, #4
 800c746:	b2db      	uxtb	r3, r3
 800c748:	e00e      	b.n	800c768 <put_fat+0x138>
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	b25b      	sxtb	r3, r3
 800c750:	f023 030f 	bic.w	r3, r3, #15
 800c754:	b25a      	sxtb	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	0a1b      	lsrs	r3, r3, #8
 800c75a:	b25b      	sxtb	r3, r3
 800c75c:	f003 030f 	and.w	r3, r3, #15
 800c760:	b25b      	sxtb	r3, r3
 800c762:	4313      	orrs	r3, r2
 800c764:	b25b      	sxtb	r3, r3
 800c766:	b2db      	uxtb	r3, r3
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2201      	movs	r2, #1
 800c770:	70da      	strb	r2, [r3, #3]
			break;
 800c772:	e078      	b.n	800c866 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	899b      	ldrh	r3, [r3, #12]
 800c77c:	085b      	lsrs	r3, r3, #1
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4619      	mov	r1, r3
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	fbb3 f3f1 	udiv	r3, r3, r1
 800c788:	4413      	add	r3, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff fd3f 	bl	800c210 <move_window>
 800c792:	4603      	mov	r3, r0
 800c794:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c796:	7ffb      	ldrb	r3, [r7, #31]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d161      	bne.n	800c860 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	8992      	ldrh	r2, [r2, #12]
 800c7aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7ae:	fb02 f200 	mul.w	r2, r2, r0
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	b292      	uxth	r2, r2
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff fa29 	bl	800bc14 <st_word>
			fs->wflag = 1;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	70da      	strb	r2, [r3, #3]
			break;
 800c7c8:	e04d      	b.n	800c866 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	899b      	ldrh	r3, [r3, #12]
 800c7d2:	089b      	lsrs	r3, r3, #2
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7de:	4413      	add	r3, r2
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fd14 	bl	800c210 <move_window>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7ec:	7ffb      	ldrb	r3, [r7, #31]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d138      	bne.n	800c864 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	d017      	beq.n	800c82a <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	8992      	ldrh	r2, [r2, #12]
 800c80e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c812:	fb02 f200 	mul.w	r2, r2, r0
 800c816:	1a9b      	subs	r3, r3, r2
 800c818:	440b      	add	r3, r1
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7ff f91c 	bl	800ba58 <ld_dword>
 800c820:	4603      	mov	r3, r0
 800c822:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c826:	4323      	orrs	r3, r4
 800c828:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	8992      	ldrh	r2, [r2, #12]
 800c838:	fbb3 f0f2 	udiv	r0, r3, r2
 800c83c:	fb02 f200 	mul.w	r2, r2, r0
 800c840:	1a9b      	subs	r3, r3, r2
 800c842:	440b      	add	r3, r1
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff f9ff 	bl	800bc4a <st_dword>
			fs->wflag = 1;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2201      	movs	r2, #1
 800c850:	70da      	strb	r2, [r3, #3]
			break;
 800c852:	e008      	b.n	800c866 <put_fat+0x236>
		}
	}
 800c854:	bf00      	nop
 800c856:	e006      	b.n	800c866 <put_fat+0x236>
			if (res != FR_OK) break;
 800c858:	bf00      	nop
 800c85a:	e004      	b.n	800c866 <put_fat+0x236>
			if (res != FR_OK) break;
 800c85c:	bf00      	nop
 800c85e:	e002      	b.n	800c866 <put_fat+0x236>
			if (res != FR_OK) break;
 800c860:	bf00      	nop
 800c862:	e000      	b.n	800c866 <put_fat+0x236>
			if (res != FR_OK) break;
 800c864:	bf00      	nop
	return res;
 800c866:	7ffb      	ldrb	r3, [r7, #31]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3724      	adds	r7, #36	; 0x24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd90      	pop	{r4, r7, pc}

0800c870 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08a      	sub	sp, #40	; 0x28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	3b02      	subs	r3, #2
 800c880:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	3b02      	subs	r3, #2
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d301      	bcc.n	800c892 <find_bitmap+0x22>
 800c88e:	2300      	movs	r3, #0
 800c890:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	61bb      	str	r3, [r7, #24]
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	08db      	lsrs	r3, r3, #3
 800c8a6:	68f9      	ldr	r1, [r7, #12]
 800c8a8:	8989      	ldrh	r1, [r1, #12]
 800c8aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8ae:	4413      	add	r3, r2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fcac 	bl	800c210 <move_window>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <find_bitmap+0x54>
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c2:	e058      	b.n	800c976 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	08db      	lsrs	r3, r3, #3
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	8992      	ldrh	r2, [r2, #12]
 800c8cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8d0:	fb02 f201 	mul.w	r2, r2, r1
 800c8d4:	1a9b      	subs	r3, r3, r2
 800c8d6:	623b      	str	r3, [r7, #32]
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	2201      	movs	r2, #1
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	333c      	adds	r3, #60	; 0x3c
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	74fb      	strb	r3, [r7, #19]
 800c8fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	3301      	adds	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	3b02      	subs	r3, #2
 800c910:	69fa      	ldr	r2, [r7, #28]
 800c912:	429a      	cmp	r2, r3
 800c914:	d307      	bcc.n	800c926 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800c916:	2300      	movs	r3, #0
 800c918:	61fb      	str	r3, [r7, #28]
 800c91a:	2300      	movs	r3, #0
 800c91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	899b      	ldrh	r3, [r3, #12]
 800c924:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800c926:	7cfb      	ldrb	r3, [r7, #19]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d109      	bne.n	800c940 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3301      	adds	r3, #1
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d106      	bne.n	800c948 <find_bitmap+0xd8>
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	3302      	adds	r3, #2
 800c93e:	e01a      	b.n	800c976 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	61bb      	str	r3, [r7, #24]
 800c944:	2300      	movs	r3, #0
 800c946:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d101      	bne.n	800c954 <find_bitmap+0xe4>
 800c950:	2300      	movs	r3, #0
 800c952:	e010      	b.n	800c976 <find_bitmap+0x106>
			} while (bm);
 800c954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1c5      	bne.n	800c8e8 <find_bitmap+0x78>
			bm = 1;
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	3301      	adds	r3, #1
 800c966:	623b      	str	r3, [r7, #32]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	899b      	ldrh	r3, [r3, #12]
 800c96c:	461a      	mov	r2, r3
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	4293      	cmp	r3, r2
 800c972:	d3b9      	bcc.n	800c8e8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800c974:	e793      	b.n	800c89e <find_bitmap+0x2e>
	}
}
 800c976:	4618      	mov	r0, r3
 800c978:	3728      	adds	r7, #40	; 0x28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b088      	sub	sp, #32
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3b02      	subs	r3, #2
 800c990:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	08db      	lsrs	r3, r3, #3
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	8989      	ldrh	r1, [r1, #12]
 800c99e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	08db      	lsrs	r3, r3, #3
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	8992      	ldrh	r2, [r2, #12]
 800c9ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9b2:	fb02 f201 	mul.w	r2, r2, r1
 800c9b6:	1a9b      	subs	r3, r3, r2
 800c9b8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f003 0307 	and.w	r3, r3, #7
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	617a      	str	r2, [r7, #20]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f7ff fc1d 	bl	800c210 <move_window>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <change_bitmap+0x62>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e03f      	b.n	800ca60 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	333c      	adds	r3, #60	; 0x3c
 800c9e8:	781a      	ldrb	r2, [r3, #0]
 800c9ea:	7ffb      	ldrb	r3, [r7, #31]
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf14      	ite	ne
 800c9f4:	2301      	movne	r3, #1
 800c9f6:	2300      	moveq	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d101      	bne.n	800ca06 <change_bitmap+0x88>
 800ca02:	2302      	movs	r3, #2
 800ca04:	e02c      	b.n	800ca60 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	333c      	adds	r3, #60	; 0x3c
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	7ffb      	ldrb	r3, [r7, #31]
 800ca12:	4053      	eors	r3, r2
 800ca14:	b2d9      	uxtb	r1, r3
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	333c      	adds	r3, #60	; 0x3c
 800ca1e:	460a      	mov	r2, r1
 800ca20:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	607b      	str	r3, [r7, #4]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <change_bitmap+0xba>
 800ca34:	2300      	movs	r3, #0
 800ca36:	e013      	b.n	800ca60 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800ca38:	7ffb      	ldrb	r3, [r7, #31]
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	77fb      	strb	r3, [r7, #31]
 800ca3e:	7ffb      	ldrb	r3, [r7, #31]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1cd      	bne.n	800c9e0 <change_bitmap+0x62>
			bm = 1;
 800ca44:	2301      	movs	r3, #1
 800ca46:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	61bb      	str	r3, [r7, #24]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	899b      	ldrh	r3, [r3, #12]
 800ca52:	461a      	mov	r2, r3
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d3c2      	bcc.n	800c9e0 <change_bitmap+0x62>
		i = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ca5e:	e7b3      	b.n	800c9c8 <change_bitmap+0x4a>
	}
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3720      	adds	r7, #32
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	79db      	ldrb	r3, [r3, #7]
 800ca74:	2b03      	cmp	r3, #3
 800ca76:	d121      	bne.n	800cabc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	e014      	b.n	800cab0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	461a      	mov	r2, r3
 800ca90:	6979      	ldr	r1, [r7, #20]
 800ca92:	f7ff fdcd 	bl	800c630 <put_fat>
 800ca96:	4603      	mov	r3, r0
 800ca98:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <fill_first_frag+0x3c>
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	e00c      	b.n	800cabe <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	3301      	adds	r3, #1
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	3b01      	subs	r3, #1
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e7      	bne.n	800ca86 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b086      	sub	sp, #24
 800caca:	af00      	add	r7, sp, #0
 800cacc:	60f8      	str	r0, [r7, #12]
 800cace:	60b9      	str	r1, [r7, #8]
 800cad0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800cad2:	e020      	b.n	800cb16 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6818      	ldr	r0, [r3, #0]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	69db      	ldr	r3, [r3, #28]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	1c59      	adds	r1, r3, #1
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d905      	bls.n	800caf6 <fill_last_frag+0x30>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	69db      	ldr	r3, [r3, #28]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	3302      	adds	r3, #2
 800caf4:	e000      	b.n	800caf8 <fill_last_frag+0x32>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	461a      	mov	r2, r3
 800cafa:	f7ff fd99 	bl	800c630 <put_fat>
 800cafe:	4603      	mov	r3, r0
 800cb00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cb02:	7dfb      	ldrb	r3, [r7, #23]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <fill_last_frag+0x46>
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	e009      	b.n	800cb20 <fill_last_frag+0x5a>
		obj->n_frag--;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	69db      	ldr	r3, [r3, #28]
 800cb10:	1e5a      	subs	r2, r3, #1
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1da      	bne.n	800cad4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d904      	bls.n	800cb56 <remove_chain+0x2e>
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d301      	bcc.n	800cb5a <remove_chain+0x32>
 800cb56:	2302      	movs	r3, #2
 800cb58:	e096      	b.n	800cc88 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d014      	beq.n	800cb8a <remove_chain+0x62>
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	d103      	bne.n	800cb70 <remove_chain+0x48>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	79db      	ldrb	r3, [r3, #7]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d00c      	beq.n	800cb8a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb70:	f04f 32ff 	mov.w	r2, #4294967295
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	69b8      	ldr	r0, [r7, #24]
 800cb78:	f7ff fd5a 	bl	800c630 <put_fat>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cb80:	7ffb      	ldrb	r3, [r7, #31]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <remove_chain+0x62>
 800cb86:	7ffb      	ldrb	r3, [r7, #31]
 800cb88:	e07e      	b.n	800cc88 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fbfd 	bl	800c38c <get_fat>
 800cb92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d055      	beq.n	800cc46 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d101      	bne.n	800cba4 <remove_chain+0x7c>
 800cba0:	2302      	movs	r3, #2
 800cba2:	e071      	b.n	800cc88 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d101      	bne.n	800cbb0 <remove_chain+0x88>
 800cbac:	2301      	movs	r3, #1
 800cbae:	e06b      	b.n	800cc88 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b04      	cmp	r3, #4
 800cbb6:	d00b      	beq.n	800cbd0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cbb8:	2200      	movs	r2, #0
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	69b8      	ldr	r0, [r7, #24]
 800cbbe:	f7ff fd37 	bl	800c630 <put_fat>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cbc6:	7ffb      	ldrb	r3, [r7, #31]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <remove_chain+0xa8>
 800cbcc:	7ffb      	ldrb	r3, [r7, #31]
 800cbce:	e05b      	b.n	800cc88 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	69da      	ldr	r2, [r3, #28]
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	3b02      	subs	r3, #2
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d20b      	bcs.n	800cbf6 <remove_chain+0xce>
			fs->free_clst++;
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	69db      	ldr	r3, [r3, #28]
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	791b      	ldrb	r3, [r3, #4]
 800cbec:	f043 0301 	orr.w	r3, r3, #1
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d102      	bne.n	800cc06 <remove_chain+0xde>
			ecl = nxt;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	623b      	str	r3, [r7, #32]
 800cc04:	e017      	b.n	800cc36 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b04      	cmp	r3, #4
 800cc0c:	d10f      	bne.n	800cc2e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	2300      	movs	r3, #0
 800cc18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc1a:	69b8      	ldr	r0, [r7, #24]
 800cc1c:	f7ff feaf 	bl	800c97e <change_bitmap>
 800cc20:	4603      	mov	r3, r0
 800cc22:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800cc24:	7ffb      	ldrb	r3, [r7, #31]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <remove_chain+0x106>
 800cc2a:	7ffb      	ldrb	r3, [r7, #31]
 800cc2c:	e02c      	b.n	800cc88 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	623b      	str	r3, [r7, #32]
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d3a2      	bcc.n	800cb8a <remove_chain+0x62>
 800cc44:	e000      	b.n	800cc48 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800cc46:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	d11a      	bne.n	800cc86 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	71da      	strb	r2, [r3, #7]
 800cc5c:	e013      	b.n	800cc86 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	79db      	ldrb	r3, [r3, #7]
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d10f      	bne.n	800cc86 <remove_chain+0x15e>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d30a      	bcc.n	800cc86 <remove_chain+0x15e>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	689a      	ldr	r2, [r3, #8]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	699b      	ldr	r3, [r3, #24]
 800cc78:	4413      	add	r3, r2
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d802      	bhi.n	800cc86 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2202      	movs	r2, #2
 800cc84:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3728      	adds	r7, #40	; 0x28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10d      	bne.n	800ccc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <create_chain+0x2c>
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d31b      	bcc.n	800ccf4 <create_chain+0x64>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	61bb      	str	r3, [r7, #24]
 800ccc0:	e018      	b.n	800ccf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff fb61 	bl	800c38c <get_fat>
 800ccca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d801      	bhi.n	800ccd6 <create_chain+0x46>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e0d9      	b.n	800ce8a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccdc:	d101      	bne.n	800cce2 <create_chain+0x52>
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	e0d3      	b.n	800ce8a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	6a1b      	ldr	r3, [r3, #32]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d201      	bcs.n	800ccf0 <create_chain+0x60>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	e0cc      	b.n	800ce8a <create_chain+0x1fa>
		scl = clst;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d164      	bne.n	800cdc6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	69b9      	ldr	r1, [r7, #24]
 800cd00:	6938      	ldr	r0, [r7, #16]
 800cd02:	f7ff fdb5 	bl	800c870 <find_bitmap>
 800cd06:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <create_chain+0x86>
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd14:	d101      	bne.n	800cd1a <create_chain+0x8a>
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	e0b7      	b.n	800ce8a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	69f9      	ldr	r1, [r7, #28]
 800cd20:	6938      	ldr	r0, [r7, #16]
 800cd22:	f7ff fe2c 	bl	800c97e <change_bitmap>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d101      	bne.n	800cd34 <create_chain+0xa4>
 800cd30:	2301      	movs	r3, #1
 800cd32:	e0aa      	b.n	800ce8a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d102      	bne.n	800cd40 <create_chain+0xb0>
 800cd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3e:	e0a4      	b.n	800ce8a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d103      	bne.n	800cd4e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	71da      	strb	r2, [r3, #7]
 800cd4c:	e011      	b.n	800cd72 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	79db      	ldrb	r3, [r3, #7]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d10d      	bne.n	800cd72 <create_chain+0xe2>
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	69fa      	ldr	r2, [r7, #28]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d008      	beq.n	800cd72 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	1ad2      	subs	r2, r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2203      	movs	r2, #3
 800cd70:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	79db      	ldrb	r3, [r3, #7]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d064      	beq.n	800ce44 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d10b      	bne.n	800cd9c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	69db      	ldr	r3, [r3, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <create_chain+0x104>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	69db      	ldr	r3, [r3, #28]
 800cd90:	3301      	adds	r3, #1
 800cd92:	e000      	b.n	800cd96 <create_chain+0x106>
 800cd94:	2302      	movs	r3, #2
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	61d3      	str	r3, [r2, #28]
 800cd9a:	e053      	b.n	800ce44 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	69db      	ldr	r3, [r3, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <create_chain+0x11a>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800cdaa:	69fa      	ldr	r2, [r7, #28]
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff fe89 	bl	800cac6 <fill_last_frag>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800cdb8:	7dfb      	ldrb	r3, [r7, #23]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d142      	bne.n	800ce44 <create_chain+0x1b4>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	61da      	str	r2, [r3, #28]
 800cdc4:	e03e      	b.n	800ce44 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	69fa      	ldr	r2, [r7, #28]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d307      	bcc.n	800cdea <create_chain+0x15a>
				ncl = 2;
 800cdda:	2302      	movs	r3, #2
 800cddc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cdde:	69fa      	ldr	r2, [r7, #28]
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d901      	bls.n	800cdea <create_chain+0x15a>
 800cde6:	2300      	movs	r3, #0
 800cde8:	e04f      	b.n	800ce8a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cdea:	69f9      	ldr	r1, [r7, #28]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff facd 	bl	800c38c <get_fat>
 800cdf2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00e      	beq.n	800ce18 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d003      	beq.n	800ce08 <create_chain+0x178>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d101      	bne.n	800ce0c <create_chain+0x17c>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	e03e      	b.n	800ce8a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce0c:	69fa      	ldr	r2, [r7, #28]
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d1da      	bne.n	800cdca <create_chain+0x13a>
 800ce14:	2300      	movs	r3, #0
 800ce16:	e038      	b.n	800ce8a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800ce18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1e:	69f9      	ldr	r1, [r7, #28]
 800ce20:	6938      	ldr	r0, [r7, #16]
 800ce22:	f7ff fc05 	bl	800c630 <put_fat>
 800ce26:	4603      	mov	r3, r0
 800ce28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d109      	bne.n	800ce44 <create_chain+0x1b4>
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6938      	ldr	r0, [r7, #16]
 800ce3c:	f7ff fbf8 	bl	800c630 <put_fat>
 800ce40:	4603      	mov	r3, r0
 800ce42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce44:	7dfb      	ldrb	r3, [r7, #23]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d116      	bne.n	800ce78 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	69fa      	ldr	r2, [r7, #28]
 800ce4e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	69da      	ldr	r2, [r3, #28]
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	3b02      	subs	r3, #2
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d804      	bhi.n	800ce68 <create_chain+0x1d8>
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	1e5a      	subs	r2, r3, #1
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	791b      	ldrb	r3, [r3, #4]
 800ce6c:	f043 0301 	orr.w	r3, r3, #1
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	711a      	strb	r2, [r3, #4]
 800ce76:	e007      	b.n	800ce88 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d102      	bne.n	800ce84 <create_chain+0x1f4>
 800ce7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce82:	e000      	b.n	800ce86 <create_chain+0x1f6>
 800ce84:	2301      	movs	r3, #1
 800ce86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce88:	69fb      	ldr	r3, [r7, #28]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b088      	sub	sp, #32
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
 800ce9a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea8:	3304      	adds	r3, #4
 800ceaa:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	899b      	ldrh	r3, [r3, #12]
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ceba:	f7f3 f99f 	bl	80001fc <__aeabi_uldivmod>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4610      	mov	r0, r2
 800cec4:	4619      	mov	r1, r3
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	895b      	ldrh	r3, [r3, #10]
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	f04f 0300 	mov.w	r3, #0
 800ced0:	f7f3 f994 	bl	80001fc <__aeabi_uldivmod>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	4613      	mov	r3, r2
 800ceda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	1d1a      	adds	r2, r3, #4
 800cee0:	61ba      	str	r2, [r7, #24]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <clmt_clust+0x5e>
 800ceec:	2300      	movs	r3, #0
 800ceee:	e010      	b.n	800cf12 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800cef0:	69fa      	ldr	r2, [r7, #28]
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d307      	bcc.n	800cf08 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800cef8:	69fa      	ldr	r2, [r7, #28]
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	3304      	adds	r3, #4
 800cf04:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf06:	e7e9      	b.n	800cedc <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800cf08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	4413      	add	r3, r2
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b086      	sub	sp, #24
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b04      	cmp	r3, #4
 800cf30:	d102      	bne.n	800cf38 <dir_sdi+0x1e>
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	e001      	b.n	800cf3c <dir_sdi+0x22>
 800cf38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d904      	bls.n	800cf4c <dir_sdi+0x32>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	f003 031f 	and.w	r3, r3, #31
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <dir_sdi+0x36>
		return FR_INT_ERR;
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e074      	b.n	800d03a <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d109      	bne.n	800cf76 <dir_sdi+0x5c>
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d905      	bls.n	800cf76 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10c      	bne.n	800cf96 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	095b      	lsrs	r3, r3, #5
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	8912      	ldrh	r2, [r2, #8]
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d301      	bcc.n	800cf8c <dir_sdi+0x72>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	e056      	b.n	800d03a <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38
 800cf94:	e02d      	b.n	800cff2 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	895b      	ldrh	r3, [r3, #10]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	899b      	ldrh	r3, [r3, #12]
 800cfa0:	fb03 f302 	mul.w	r3, r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfa6:	e019      	b.n	800cfdc <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6979      	ldr	r1, [r7, #20]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff f9ed 	bl	800c38c <get_fat>
 800cfb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d101      	bne.n	800cfc0 <dir_sdi+0xa6>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e03c      	b.n	800d03a <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d904      	bls.n	800cfd0 <dir_sdi+0xb6>
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d301      	bcc.n	800cfd4 <dir_sdi+0xba>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e032      	b.n	800d03a <dir_sdi+0x120>
			ofs -= csz;
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d2e1      	bcs.n	800cfa8 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800cfe4:	6979      	ldr	r1, [r7, #20]
 800cfe6:	6938      	ldr	r0, [r7, #16]
 800cfe8:	f7ff f9b0 	bl	800c34c <clust2sect>
 800cfec:	4602      	mov	r2, r0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <dir_sdi+0xea>
 800d000:	2302      	movs	r3, #2
 800d002:	e01a      	b.n	800d03a <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	899b      	ldrh	r3, [r3, #12]
 800d00c:	4619      	mov	r1, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	fbb3 f3f1 	udiv	r3, r3, r1
 800d014:	441a      	add	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	899b      	ldrh	r3, [r3, #12]
 800d024:	461a      	mov	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	fbb3 f0f2 	udiv	r0, r3, r2
 800d02c:	fb02 f200 	mul.w	r2, r2, r0
 800d030:	1a9b      	subs	r3, r3, r2
 800d032:	18ca      	adds	r2, r1, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b086      	sub	sp, #24
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	3320      	adds	r3, #32
 800d058:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00b      	beq.n	800d07a <dir_next+0x38>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b04      	cmp	r3, #4
 800d068:	d102      	bne.n	800d070 <dir_next+0x2e>
 800d06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06e:	e001      	b.n	800d074 <dir_next+0x32>
 800d070:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	429a      	cmp	r2, r3
 800d078:	d801      	bhi.n	800d07e <dir_next+0x3c>
 800d07a:	2304      	movs	r3, #4
 800d07c:	e0c3      	b.n	800d206 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	899b      	ldrh	r3, [r3, #12]
 800d082:	461a      	mov	r2, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	fbb3 f1f2 	udiv	r1, r3, r2
 800d08a:	fb02 f201 	mul.w	r2, r2, r1
 800d08e:	1a9b      	subs	r3, r3, r2
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 80a5 	bne.w	800d1e0 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10b      	bne.n	800d0c0 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	095b      	lsrs	r3, r3, #5
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	8912      	ldrh	r2, [r2, #8]
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	f0c0 8095 	bcc.w	800d1e0 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	639a      	str	r2, [r3, #56]	; 0x38
 800d0bc:	2304      	movs	r3, #4
 800d0be:	e0a2      	b.n	800d206 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	899b      	ldrh	r3, [r3, #12]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	8952      	ldrh	r2, [r2, #10]
 800d0d0:	3a01      	subs	r2, #1
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f040 8083 	bne.w	800d1e0 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7ff f952 	bl	800c38c <get_fat>
 800d0e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d801      	bhi.n	800d0f4 <dir_next+0xb2>
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	e088      	b.n	800d206 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fa:	d101      	bne.n	800d100 <dir_next+0xbe>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e082      	b.n	800d206 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	429a      	cmp	r2, r3
 800d108:	d360      	bcc.n	800d1cc <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d104      	bne.n	800d11a <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	639a      	str	r2, [r3, #56]	; 0x38
 800d116:	2304      	movs	r3, #4
 800d118:	e075      	b.n	800d206 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d120:	4619      	mov	r1, r3
 800d122:	4610      	mov	r0, r2
 800d124:	f7ff fdb4 	bl	800cc90 <create_chain>
 800d128:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <dir_next+0xf2>
 800d130:	2307      	movs	r3, #7
 800d132:	e068      	b.n	800d206 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d101      	bne.n	800d13e <dir_next+0xfc>
 800d13a:	2302      	movs	r3, #2
 800d13c:	e063      	b.n	800d206 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d144:	d101      	bne.n	800d14a <dir_next+0x108>
 800d146:	2301      	movs	r3, #1
 800d148:	e05d      	b.n	800d206 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	79db      	ldrb	r3, [r3, #7]
 800d14e:	f043 0304 	orr.w	r3, r3, #4
 800d152:	b2da      	uxtb	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff f815 	bl	800c188 <sync_window>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <dir_next+0x126>
 800d164:	2301      	movs	r3, #1
 800d166:	e04e      	b.n	800d206 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	899b      	ldrh	r3, [r3, #12]
 800d172:	461a      	mov	r2, r3
 800d174:	2100      	movs	r1, #0
 800d176:	f7fe fe3d 	bl	800bdf4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d17a:	2300      	movs	r3, #0
 800d17c:	613b      	str	r3, [r7, #16]
 800d17e:	6979      	ldr	r1, [r7, #20]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff f8e3 	bl	800c34c <clust2sect>
 800d186:	4602      	mov	r2, r0
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	639a      	str	r2, [r3, #56]	; 0x38
 800d18c:	e012      	b.n	800d1b4 <dir_next+0x172>
						fs->wflag = 1;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7fe fff7 	bl	800c188 <sync_window>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <dir_next+0x162>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e030      	b.n	800d206 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	613b      	str	r3, [r7, #16]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	639a      	str	r2, [r3, #56]	; 0x38
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	895b      	ldrh	r3, [r3, #10]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d3e6      	bcc.n	800d18e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	1ad2      	subs	r2, r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d1d2:	6979      	ldr	r1, [r7, #20]
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff f8b9 	bl	800c34c <clust2sect>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	899b      	ldrh	r3, [r3, #12]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1f8:	fb02 f200 	mul.w	r2, r2, r0
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	18ca      	adds	r2, r1, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b086      	sub	sp, #24
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d21e:	2100      	movs	r1, #0
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff fe7a 	bl	800cf1a <dir_sdi>
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d140      	bne.n	800d2b2 <dir_alloc+0xa4>
		n = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	4619      	mov	r1, r3
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7fe ffe8 	bl	800c210 <move_window>
 800d240:	4603      	mov	r3, r0
 800d242:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d132      	bne.n	800d2b0 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b04      	cmp	r3, #4
 800d250:	d108      	bne.n	800d264 <dir_alloc+0x56>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	b25b      	sxtb	r3, r3
 800d25a:	43db      	mvns	r3, r3
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	09db      	lsrs	r3, r3, #7
 800d260:	b2db      	uxtb	r3, r3
 800d262:	e00f      	b.n	800d284 <dir_alloc+0x76>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2be5      	cmp	r3, #229	; 0xe5
 800d26c:	d004      	beq.n	800d278 <dir_alloc+0x6a>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <dir_alloc+0x6e>
 800d278:	2301      	movs	r3, #1
 800d27a:	e000      	b.n	800d27e <dir_alloc+0x70>
 800d27c:	2300      	movs	r3, #0
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	d007      	beq.n	800d298 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	3301      	adds	r3, #1
 800d28c:	613b      	str	r3, [r7, #16]
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	d102      	bne.n	800d29c <dir_alloc+0x8e>
 800d296:	e00c      	b.n	800d2b2 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d29c:	2101      	movs	r1, #1
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff fecf 	bl	800d042 <dir_next>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0c2      	beq.n	800d234 <dir_alloc+0x26>
 800d2ae:	e000      	b.n	800d2b2 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d2b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d101      	bne.n	800d2bc <dir_alloc+0xae>
 800d2b8:	2307      	movs	r3, #7
 800d2ba:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	331a      	adds	r3, #26
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe fba7 	bl	800ba28 <ld_word>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d109      	bne.n	800d2fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3314      	adds	r3, #20
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe fb9c 	bl	800ba28 <ld_word>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	041b      	lsls	r3, r3, #16
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	331a      	adds	r3, #26
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	b292      	uxth	r2, r2
 800d318:	4611      	mov	r1, r2
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fc7a 	bl	800bc14 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b03      	cmp	r3, #3
 800d326:	d109      	bne.n	800d33c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f103 0214 	add.w	r2, r3, #20
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	0c1b      	lsrs	r3, r3, #16
 800d332:	b29b      	uxth	r3, r3
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f7fe fc6c 	bl	800bc14 <st_word>
	}
}
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	331a      	adds	r3, #26
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fb68 	bl	800ba28 <ld_word>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <cmp_lfn+0x1e>
 800d35e:	2300      	movs	r3, #0
 800d360:	e059      	b.n	800d416 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	4613      	mov	r3, r2
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d378:	2301      	movs	r3, #1
 800d37a:	81fb      	strh	r3, [r7, #14]
 800d37c:	2300      	movs	r3, #0
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	e033      	b.n	800d3ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d382:	4a27      	ldr	r2, [pc, #156]	; (800d420 <cmp_lfn+0xdc>)
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	4413      	add	r3, r2
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	4413      	add	r3, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fb49 	bl	800ba28 <ld_word>
 800d396:	4603      	mov	r3, r0
 800d398:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d39a:	89fb      	ldrh	r3, [r7, #14]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01a      	beq.n	800d3d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2bfe      	cmp	r3, #254	; 0xfe
 800d3a4:	d812      	bhi.n	800d3cc <cmp_lfn+0x88>
 800d3a6:	89bb      	ldrh	r3, [r7, #12]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f003 f859 	bl	8010460 <ff_wtoupper>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	461c      	mov	r4, r3
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	617a      	str	r2, [r7, #20]
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f003 f84d 	bl	8010460 <ff_wtoupper>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d001      	beq.n	800d3d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e022      	b.n	800d416 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d3d0:	89bb      	ldrh	r3, [r7, #12]
 800d3d2:	81fb      	strh	r3, [r7, #14]
 800d3d4:	e006      	b.n	800d3e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d3d6:	89bb      	ldrh	r3, [r7, #12]
 800d3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d001      	beq.n	800d3e4 <cmp_lfn+0xa0>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e018      	b.n	800d416 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	613b      	str	r3, [r7, #16]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	2b0c      	cmp	r3, #12
 800d3ee:	d9c8      	bls.n	800d382 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <cmp_lfn+0xd0>
 800d3fc:	89fb      	ldrh	r3, [r7, #14]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d008      	beq.n	800d414 <cmp_lfn+0xd0>
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <cmp_lfn+0xd0>
 800d410:	2300      	movs	r3, #0
 800d412:	e000      	b.n	800d416 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d414:	2301      	movs	r3, #1
}
 800d416:	4618      	mov	r0, r3
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd90      	pop	{r4, r7, pc}
 800d41e:	bf00      	nop
 800d420:	08013c90 	.word	0x08013c90

0800d424 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	331a      	adds	r3, #26
 800d432:	4618      	mov	r0, r3
 800d434:	f7fe faf8 	bl	800ba28 <ld_word>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <pick_lfn+0x1e>
 800d43e:	2300      	movs	r3, #0
 800d440:	e04d      	b.n	800d4de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d44a:	1e5a      	subs	r2, r3, #1
 800d44c:	4613      	mov	r3, r2
 800d44e:	005b      	lsls	r3, r3, #1
 800d450:	4413      	add	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d458:	2301      	movs	r3, #1
 800d45a:	81fb      	strh	r3, [r7, #14]
 800d45c:	2300      	movs	r3, #0
 800d45e:	613b      	str	r3, [r7, #16]
 800d460:	e028      	b.n	800d4b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d462:	4a21      	ldr	r2, [pc, #132]	; (800d4e8 <pick_lfn+0xc4>)
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	4413      	add	r3, r2
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	4413      	add	r3, r2
 800d470:	4618      	mov	r0, r3
 800d472:	f7fe fad9 	bl	800ba28 <ld_word>
 800d476:	4603      	mov	r3, r0
 800d478:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d47a:	89fb      	ldrh	r3, [r7, #14]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00f      	beq.n	800d4a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2bfe      	cmp	r3, #254	; 0xfe
 800d484:	d901      	bls.n	800d48a <pick_lfn+0x66>
 800d486:	2300      	movs	r3, #0
 800d488:	e029      	b.n	800d4de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d48a:	89bb      	ldrh	r3, [r7, #12]
 800d48c:	81fb      	strh	r3, [r7, #14]
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	617a      	str	r2, [r7, #20]
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4413      	add	r3, r2
 800d49a:	89fa      	ldrh	r2, [r7, #14]
 800d49c:	801a      	strh	r2, [r3, #0]
 800d49e:	e006      	b.n	800d4ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4a0:	89bb      	ldrh	r3, [r7, #12]
 800d4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d001      	beq.n	800d4ae <pick_lfn+0x8a>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e017      	b.n	800d4de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	613b      	str	r3, [r7, #16]
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	2b0c      	cmp	r3, #12
 800d4b8:	d9d3      	bls.n	800d462 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00a      	beq.n	800d4dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d4ca:	d901      	bls.n	800d4d0 <pick_lfn+0xac>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e006      	b.n	800d4de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	2200      	movs	r2, #0
 800d4da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d4dc:	2301      	movs	r3, #1
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	08013c90 	.word	0x08013c90

0800d4ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	71fb      	strb	r3, [r7, #7]
 800d4fe:	4613      	mov	r3, r2
 800d500:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	330d      	adds	r3, #13
 800d506:	79ba      	ldrb	r2, [r7, #6]
 800d508:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	330b      	adds	r3, #11
 800d50e:	220f      	movs	r2, #15
 800d510:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	330c      	adds	r3, #12
 800d516:	2200      	movs	r2, #0
 800d518:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	331a      	adds	r3, #26
 800d51e:	2100      	movs	r1, #0
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fb77 	bl	800bc14 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	1e5a      	subs	r2, r3, #1
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	82fb      	strh	r3, [r7, #22]
 800d53a:	2300      	movs	r3, #0
 800d53c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d53e:	8afb      	ldrh	r3, [r7, #22]
 800d540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d544:	4293      	cmp	r3, r2
 800d546:	d007      	beq.n	800d558 <put_lfn+0x6c>
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	61fa      	str	r2, [r7, #28]
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d558:	4a17      	ldr	r2, [pc, #92]	; (800d5b8 <put_lfn+0xcc>)
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	4413      	add	r3, r2
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	461a      	mov	r2, r3
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	4413      	add	r3, r2
 800d566:	8afa      	ldrh	r2, [r7, #22]
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fe fb52 	bl	800bc14 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d570:	8afb      	ldrh	r3, [r7, #22]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d102      	bne.n	800d57c <put_lfn+0x90>
 800d576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d57a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	3301      	adds	r3, #1
 800d580:	61bb      	str	r3, [r7, #24]
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b0c      	cmp	r3, #12
 800d586:	d9da      	bls.n	800d53e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d588:	8afb      	ldrh	r3, [r7, #22]
 800d58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d58e:	4293      	cmp	r3, r2
 800d590:	d006      	beq.n	800d5a0 <put_lfn+0xb4>
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	4413      	add	r3, r2
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d103      	bne.n	800d5a8 <put_lfn+0xbc>
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	79fa      	ldrb	r2, [r7, #7]
 800d5ac:	701a      	strb	r2, [r3, #0]
}
 800d5ae:	bf00      	nop
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	08013c90 	.word	0x08013c90

0800d5bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	; 0x30
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d5ca:	220b      	movs	r2, #11
 800d5cc:	68b9      	ldr	r1, [r7, #8]
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7fe fbef 	bl	800bdb2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b05      	cmp	r3, #5
 800d5d8:	d92b      	bls.n	800d632 <gen_numname+0x76>
		sr = seq;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d5de:	e022      	b.n	800d626 <gen_numname+0x6a>
			wc = *lfn++;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	1c9a      	adds	r2, r3, #2
 800d5e4:	607a      	str	r2, [r7, #4]
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5ee:	e017      	b.n	800d620 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	005a      	lsls	r2, r3, #1
 800d5f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d5fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d600:	085b      	lsrs	r3, r3, #1
 800d602:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <gen_numname+0x5e>
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d614:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d618:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	3301      	adds	r3, #1
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	2b0f      	cmp	r3, #15
 800d624:	d9e4      	bls.n	800d5f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1d8      	bne.n	800d5e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d632:	2307      	movs	r3, #7
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 030f 	and.w	r3, r3, #15
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	3330      	adds	r3, #48	; 0x30
 800d642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d64a:	2b39      	cmp	r3, #57	; 0x39
 800d64c:	d904      	bls.n	800d658 <gen_numname+0x9c>
 800d64e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d652:	3307      	adds	r3, #7
 800d654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	1e5a      	subs	r2, r3, #1
 800d65c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d65e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d662:	4413      	add	r3, r2
 800d664:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d668:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	091b      	lsrs	r3, r3, #4
 800d670:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1de      	bne.n	800d636 <gen_numname+0x7a>
	ns[i] = '~';
 800d678:	f107 0214 	add.w	r2, r7, #20
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	4413      	add	r3, r2
 800d680:	227e      	movs	r2, #126	; 0x7e
 800d682:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d684:	2300      	movs	r3, #0
 800d686:	627b      	str	r3, [r7, #36]	; 0x24
 800d688:	e002      	b.n	800d690 <gen_numname+0xd4>
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	3301      	adds	r3, #1
 800d68e:	627b      	str	r3, [r7, #36]	; 0x24
 800d690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	429a      	cmp	r2, r3
 800d696:	d205      	bcs.n	800d6a4 <gen_numname+0xe8>
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	4413      	add	r3, r2
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b20      	cmp	r3, #32
 800d6a2:	d1f2      	bne.n	800d68a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	2b07      	cmp	r3, #7
 800d6a8:	d808      	bhi.n	800d6bc <gen_numname+0x100>
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800d6b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d6ba:	e000      	b.n	800d6be <gen_numname+0x102>
 800d6bc:	2120      	movs	r1, #32
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	627a      	str	r2, [r7, #36]	; 0x24
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	460a      	mov	r2, r1
 800d6ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	2b07      	cmp	r3, #7
 800d6d0:	d9e8      	bls.n	800d6a4 <gen_numname+0xe8>
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	3730      	adds	r7, #48	; 0x30
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d6e8:	230b      	movs	r3, #11
 800d6ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	0852      	lsrs	r2, r2, #1
 800d6f2:	01db      	lsls	r3, r3, #7
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	1c59      	adds	r1, r3, #1
 800d6fc:	6079      	str	r1, [r7, #4]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4413      	add	r3, r2
 800d702:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	3b01      	subs	r3, #1
 800d708:	60bb      	str	r3, [r7, #8]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1ed      	bne.n	800d6ec <sum_sfn+0x10>
	return sum;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d71e:	b480      	push	{r7}
 800d720:	b087      	sub	sp, #28
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3301      	adds	r3, #1
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	015b      	lsls	r3, r3, #5
 800d730:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d732:	2300      	movs	r3, #0
 800d734:	827b      	strh	r3, [r7, #18]
 800d736:	2300      	movs	r3, #0
 800d738:	617b      	str	r3, [r7, #20]
 800d73a:	e018      	b.n	800d76e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d103      	bne.n	800d74a <xdir_sum+0x2c>
			i++;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	3301      	adds	r3, #1
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	e00e      	b.n	800d768 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d74a:	8a7b      	ldrh	r3, [r7, #18]
 800d74c:	03db      	lsls	r3, r3, #15
 800d74e:	b29a      	uxth	r2, r3
 800d750:	8a7b      	ldrh	r3, [r7, #18]
 800d752:	085b      	lsrs	r3, r3, #1
 800d754:	b29b      	uxth	r3, r3
 800d756:	4413      	add	r3, r2
 800d758:	b29a      	uxth	r2, r3
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	440b      	add	r3, r1
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	b29b      	uxth	r3, r3
 800d764:	4413      	add	r3, r2
 800d766:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	3301      	adds	r3, #1
 800d76c:	617b      	str	r3, [r7, #20]
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	429a      	cmp	r2, r3
 800d774:	d3e2      	bcc.n	800d73c <xdir_sum+0x1e>
		}
	}
	return sum;
 800d776:	8a7b      	ldrh	r3, [r7, #18]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	371c      	adds	r7, #28
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d790:	e01f      	b.n	800d7d2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d792:	89bb      	ldrh	r3, [r7, #12]
 800d794:	4618      	mov	r0, r3
 800d796:	f002 fe63 	bl	8010460 <ff_wtoupper>
 800d79a:	4603      	mov	r3, r0
 800d79c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d79e:	89fb      	ldrh	r3, [r7, #14]
 800d7a0:	03db      	lsls	r3, r3, #15
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	89fb      	ldrh	r3, [r7, #14]
 800d7a6:	085b      	lsrs	r3, r3, #1
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4413      	add	r3, r2
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	89bb      	ldrh	r3, [r7, #12]
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	03db      	lsls	r3, r3, #15
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	89fb      	ldrh	r3, [r7, #14]
 800d7c0:	085b      	lsrs	r3, r3, #1
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	4413      	add	r3, r2
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	89bb      	ldrh	r3, [r7, #12]
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	1c9a      	adds	r2, r3, #2
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	81bb      	strh	r3, [r7, #12]
 800d7dc:	89bb      	ldrh	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1d7      	bne.n	800d792 <xname_sum+0xe>
	}
	return sum;
 800d7e2:	89fb      	ldrh	r3, [r7, #14]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d7fa:	2340      	movs	r3, #64	; 0x40
 800d7fc:	613b      	str	r3, [r7, #16]
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	e02c      	b.n	800d85e <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d102      	bne.n	800d814 <get_xdir_info+0x28>
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	3302      	adds	r3, #2
 800d812:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	4413      	add	r3, r2
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fe f904 	bl	800ba28 <ld_word>
 800d820:	4603      	mov	r3, r0
 800d822:	2100      	movs	r1, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f002 fddf 	bl	80103e8 <ff_convert>
 800d82a:	4603      	mov	r3, r0
 800d82c:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <get_xdir_info+0x4e>
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2bfe      	cmp	r3, #254	; 0xfe
 800d838:	d902      	bls.n	800d840 <get_xdir_info+0x54>
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
 800d83e:	e015      	b.n	800d86c <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	1c5a      	adds	r2, r3, #1
 800d844:	617a      	str	r2, [r7, #20]
 800d846:	897a      	ldrh	r2, [r7, #10]
 800d848:	b2d1      	uxtb	r1, r2
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	4413      	add	r3, r2
 800d84e:	460a      	mov	r2, r1
 800d850:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	3302      	adds	r3, #2
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	3301      	adds	r3, #1
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	3323      	adds	r3, #35	; 0x23
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d3cb      	bcc.n	800d804 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <get_xdir_info+0x94>
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	1c5a      	adds	r2, r3, #1
 800d876:	617a      	str	r2, [r7, #20]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	4413      	add	r3, r2
 800d87c:	223f      	movs	r2, #63	; 0x3f
 800d87e:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	4413      	add	r3, r2
 800d886:	331a      	adds	r3, #26
 800d888:	2200      	movs	r2, #0
 800d88a:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2200      	movs	r2, #0
 800d890:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	791a      	ldrb	r2, [r3, #4]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	7b1b      	ldrb	r3, [r3, #12]
 800d89e:	f003 0310 	and.w	r3, r3, #16
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d107      	bne.n	800d8b6 <get_xdir_info+0xca>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3338      	adds	r3, #56	; 0x38
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe f8f7 	bl	800ba9e <ld_qword>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	e003      	b.n	800d8be <get_xdir_info+0xd2>
 800d8b6:	f04f 0200 	mov.w	r2, #0
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	330c      	adds	r3, #12
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe f8ad 	bl	800ba28 <ld_word>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	330e      	adds	r3, #14
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe f8a4 	bl	800ba28 <ld_word>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	811a      	strh	r2, [r3, #8]
}
 800d8e8:	bf00      	nop
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800d8f0:	b590      	push	{r4, r7, lr}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f7fe fc80 	bl	800c210 <move_window>
 800d910:	4603      	mov	r3, r0
 800d912:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <load_xdir+0x2e>
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	e09f      	b.n	800da5e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b85      	cmp	r3, #133	; 0x85
 800d926:	d001      	beq.n	800d92c <load_xdir+0x3c>
 800d928:	2302      	movs	r3, #2
 800d92a:	e098      	b.n	800da5e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d930:	2220      	movs	r2, #32
 800d932:	4619      	mov	r1, r3
 800d934:	6938      	ldr	r0, [r7, #16]
 800d936:	f7fe fa3c 	bl	800bdb2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	3301      	adds	r3, #1
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	3301      	adds	r3, #1
 800d942:	015b      	lsls	r3, r3, #5
 800d944:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b5f      	cmp	r3, #95	; 0x5f
 800d94a:	d903      	bls.n	800d954 <load_xdir+0x64>
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800d952:	d901      	bls.n	800d958 <load_xdir+0x68>
 800d954:	2302      	movs	r3, #2
 800d956:	e082      	b.n	800da5e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800d958:	2100      	movs	r1, #0
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff fb71 	bl	800d042 <dir_next>
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <load_xdir+0x7e>
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	e077      	b.n	800da5e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f7fe fc49 	bl	800c210 <move_window>
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <load_xdir+0x9c>
 800d988:	7bfb      	ldrb	r3, [r7, #15]
 800d98a:	e068      	b.n	800da5e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2bc0      	cmp	r3, #192	; 0xc0
 800d994:	d001      	beq.n	800d99a <load_xdir+0xaa>
 800d996:	2302      	movs	r3, #2
 800d998:	e061      	b.n	800da5e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	f103 0020 	add.w	r0, r3, #32
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a4:	2220      	movs	r2, #32
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f7fe fa03 	bl	800bdb2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	3323      	adds	r3, #35	; 0x23
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	332c      	adds	r3, #44	; 0x2c
 800d9b4:	4a2c      	ldr	r2, [pc, #176]	; (800da68 <load_xdir+0x178>)
 800d9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ba:	08db      	lsrs	r3, r3, #3
 800d9bc:	015b      	lsls	r3, r3, #5
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d201      	bcs.n	800d9c8 <load_xdir+0xd8>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e04a      	b.n	800da5e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800d9c8:	2340      	movs	r3, #64	; 0x40
 800d9ca:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7ff fb37 	bl	800d042 <dir_next>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <load_xdir+0xf2>
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	e03d      	b.n	800da5e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7fe fc0f 	bl	800c210 <move_window>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <load_xdir+0x110>
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	e02e      	b.n	800da5e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2bc1      	cmp	r3, #193	; 0xc1
 800da08:	d001      	beq.n	800da0e <load_xdir+0x11e>
 800da0a:	2302      	movs	r3, #2
 800da0c:	e027      	b.n	800da5e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800da14:	d208      	bcs.n	800da28 <load_xdir+0x138>
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	18d0      	adds	r0, r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da20:	2220      	movs	r2, #32
 800da22:	4619      	mov	r1, r3
 800da24:	f7fe f9c5 	bl	800bdb2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	3320      	adds	r3, #32
 800da2c:	617b      	str	r3, [r7, #20]
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	429a      	cmp	r2, r3
 800da34:	d3ca      	bcc.n	800d9cc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800da3c:	d80e      	bhi.n	800da5c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800da3e:	6938      	ldr	r0, [r7, #16]
 800da40:	f7ff fe6d 	bl	800d71e <xdir_sum>
 800da44:	4603      	mov	r3, r0
 800da46:	461c      	mov	r4, r3
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3302      	adds	r3, #2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fd ffeb 	bl	800ba28 <ld_word>
 800da52:	4603      	mov	r3, r0
 800da54:	429c      	cmp	r4, r3
 800da56:	d001      	beq.n	800da5c <load_xdir+0x16c>
 800da58:	2302      	movs	r3, #2
 800da5a:	e000      	b.n	800da5e <load_xdir+0x16e>
	}
	return FR_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	bd90      	pop	{r4, r7, pc}
 800da66:	bf00      	nop
 800da68:	88888889 	.word	0x88888889

0800da6c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800da6c:	b5b0      	push	{r4, r5, r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6808      	ldr	r0, [r1, #0]
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6a08      	ldr	r0, [r1, #32]
 800da82:	6879      	ldr	r1, [r7, #4]
 800da84:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800da8a:	b2c8      	uxtb	r0, r1
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800da94:	4608      	mov	r0, r1
 800da96:	f04f 0100 	mov.w	r1, #0
 800da9a:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800da9e:	f04f 0500 	mov.w	r5, #0
 800daa2:	ea00 0204 	and.w	r2, r0, r4
 800daa6:	ea01 0305 	and.w	r3, r1, r5
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fa2b 	bl	800cf1a <dir_sdi>
 800dac4:	4603      	mov	r3, r0
 800dac6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff ff0e 	bl	800d8f0 <load_xdir>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bdb0      	pop	{r4, r5, r7, pc}

0800dae2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800dae2:	b590      	push	{r4, r7, lr}
 800dae4:	b087      	sub	sp, #28
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	1c9c      	adds	r4, r3, #2
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff fe11 	bl	800d71e <xdir_sum>
 800dafc:	4603      	mov	r3, r0
 800dafe:	4619      	mov	r1, r3
 800db00:	4620      	mov	r0, r4
 800db02:	f7fe f887 	bl	800bc14 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	3301      	adds	r3, #1
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7ff f9ff 	bl	800cf1a <dir_sdi>
 800db1c:	4603      	mov	r3, r0
 800db1e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800db20:	e026      	b.n	800db70 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7fe fb6f 	bl	800c210 <move_window>
 800db32:	4603      	mov	r3, r0
 800db34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d11d      	bne.n	800db78 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db40:	2220      	movs	r2, #32
 800db42:	68f9      	ldr	r1, [r7, #12]
 800db44:	4618      	mov	r0, r3
 800db46:	f7fe f934 	bl	800bdb2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2201      	movs	r2, #1
 800db50:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	3b01      	subs	r3, #1
 800db56:	613b      	str	r3, [r7, #16]
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00e      	beq.n	800db7c <store_xdir+0x9a>
		dirb += SZDIRE;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3320      	adds	r3, #32
 800db62:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800db64:	2100      	movs	r1, #0
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7ff fa6b 	bl	800d042 <dir_next>
 800db6c:	4603      	mov	r3, r0
 800db6e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0d5      	beq.n	800db22 <store_xdir+0x40>
 800db76:	e002      	b.n	800db7e <store_xdir+0x9c>
		if (res != FR_OK) break;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <store_xdir+0x9c>
		if (--nent == 0) break;
 800db7c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <store_xdir+0xa8>
 800db84:	7dfb      	ldrb	r3, [r7, #23]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d101      	bne.n	800db8e <store_xdir+0xac>
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	e000      	b.n	800db90 <store_xdir+0xae>
 800db8e:	2302      	movs	r3, #2
}
 800db90:	4618      	mov	r0, r3
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}

0800db98 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800dba2:	2240      	movs	r2, #64	; 0x40
 800dba4:	2100      	movs	r1, #0
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7fe f924 	bl	800bdf4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2285      	movs	r2, #133	; 0x85
 800dbb0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3320      	adds	r3, #32
 800dbb6:	22c0      	movs	r2, #192	; 0xc0
 800dbb8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	72bb      	strb	r3, [r7, #10]
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	72fb      	strb	r3, [r7, #11]
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	813b      	strh	r3, [r7, #8]
 800dbc6:	2340      	movs	r3, #64	; 0x40
 800dbc8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	60fa      	str	r2, [r7, #12]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	22c1      	movs	r2, #193	; 0xc1
 800dbd6:	701a      	strb	r2, [r3, #0]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	1c5a      	adds	r2, r3, #1
 800dbdc:	60fa      	str	r2, [r7, #12]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800dbe6:	893b      	ldrh	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <create_xdir+0x6c>
 800dbec:	7abb      	ldrb	r3, [r7, #10]
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	813b      	strh	r3, [r7, #8]
 800dbf8:	893b      	ldrh	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <create_xdir+0x6c>
 800dbfe:	7abb      	ldrb	r3, [r7, #10]
 800dc00:	3301      	adds	r3, #1
 800dc02:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	4413      	add	r3, r2
 800dc0a:	893a      	ldrh	r2, [r7, #8]
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe f800 	bl	800bc14 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3302      	adds	r3, #2
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f003 031f 	and.w	r3, r3, #31
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e0      	bne.n	800dbe6 <create_xdir+0x4e>
		nb++;
 800dc24:	7afb      	ldrb	r3, [r7, #11]
 800dc26:	3301      	adds	r3, #1
 800dc28:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800dc2a:	7abb      	ldrb	r3, [r7, #10]
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	4413      	add	r3, r2
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1c8      	bne.n	800dbca <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3323      	adds	r3, #35	; 0x23
 800dc3c:	7aba      	ldrb	r2, [r7, #10]
 800dc3e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3301      	adds	r3, #1
 800dc44:	7afa      	ldrb	r2, [r7, #11]
 800dc46:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800dc4e:	6838      	ldr	r0, [r7, #0]
 800dc50:	f7ff fd98 	bl	800d784 <xname_sum>
 800dc54:	4603      	mov	r3, r0
 800dc56:	4619      	mov	r1, r3
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7fd ffdb 	bl	800bc14 <st_word>
}
 800dc5e:	bf00      	nop
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd90      	pop	{r4, r7, pc}

0800dc66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b086      	sub	sp, #24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dc70:	2304      	movs	r3, #4
 800dc72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dc7a:	23ff      	movs	r3, #255	; 0xff
 800dc7c:	757b      	strb	r3, [r7, #21]
 800dc7e:	23ff      	movs	r3, #255	; 0xff
 800dc80:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800dc82:	e09f      	b.n	800ddc4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6938      	ldr	r0, [r7, #16]
 800dc8c:	f7fe fac0 	bl	800c210 <move_window>
 800dc90:	4603      	mov	r3, r0
 800dc92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f040 809a 	bne.w	800ddd0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800dca4:	7dbb      	ldrb	r3, [r7, #22]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dcaa:	2304      	movs	r3, #4
 800dcac:	75fb      	strb	r3, [r7, #23]
 800dcae:	e096      	b.n	800ddde <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b04      	cmp	r3, #4
 800dcb6:	d118      	bne.n	800dcea <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800dcb8:	7dbb      	ldrb	r3, [r7, #22]
 800dcba:	2b85      	cmp	r3, #133	; 0x85
 800dcbc:	d179      	bne.n	800ddb2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff fe12 	bl	800d8f0 <load_xdir>
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d17e      	bne.n	800ddd4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	719a      	strb	r2, [r3, #6]
					}
					break;
 800dce8:	e074      	b.n	800ddd4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcee:	330b      	adds	r3, #11
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcf6:	73fb      	strb	r3, [r7, #15]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7bfa      	ldrb	r2, [r7, #15]
 800dcfc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dcfe:	7dbb      	ldrb	r3, [r7, #22]
 800dd00:	2be5      	cmp	r3, #229	; 0xe5
 800dd02:	d00e      	beq.n	800dd22 <dir_read+0xbc>
 800dd04:	7dbb      	ldrb	r3, [r7, #22]
 800dd06:	2b2e      	cmp	r3, #46	; 0x2e
 800dd08:	d00b      	beq.n	800dd22 <dir_read+0xbc>
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	f023 0320 	bic.w	r3, r3, #32
 800dd10:	2b08      	cmp	r3, #8
 800dd12:	bf0c      	ite	eq
 800dd14:	2301      	moveq	r3, #1
 800dd16:	2300      	movne	r3, #0
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d002      	beq.n	800dd28 <dir_read+0xc2>
				ord = 0xFF;
 800dd22:	23ff      	movs	r3, #255	; 0xff
 800dd24:	757b      	strb	r3, [r7, #21]
 800dd26:	e044      	b.n	800ddb2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
 800dd2a:	2b0f      	cmp	r3, #15
 800dd2c:	d12f      	bne.n	800dd8e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dd2e:	7dbb      	ldrb	r3, [r7, #22]
 800dd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00d      	beq.n	800dd54 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd3c:	7b5b      	ldrb	r3, [r3, #13]
 800dd3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800dd40:	7dbb      	ldrb	r3, [r7, #22]
 800dd42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd46:	75bb      	strb	r3, [r7, #22]
 800dd48:	7dbb      	ldrb	r3, [r7, #22]
 800dd4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd54:	7dba      	ldrb	r2, [r7, #22]
 800dd56:	7d7b      	ldrb	r3, [r7, #21]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d115      	bne.n	800dd88 <dir_read+0x122>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd60:	330d      	adds	r3, #13
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	7d3a      	ldrb	r2, [r7, #20]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d10e      	bne.n	800dd88 <dir_read+0x122>
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	691a      	ldr	r2, [r3, #16]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd72:	4619      	mov	r1, r3
 800dd74:	4610      	mov	r0, r2
 800dd76:	f7ff fb55 	bl	800d424 <pick_lfn>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <dir_read+0x122>
 800dd80:	7d7b      	ldrb	r3, [r7, #21]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	e000      	b.n	800dd8a <dir_read+0x124>
 800dd88:	23ff      	movs	r3, #255	; 0xff
 800dd8a:	757b      	strb	r3, [r7, #21]
 800dd8c:	e011      	b.n	800ddb2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dd8e:	7d7b      	ldrb	r3, [r7, #21]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d109      	bne.n	800dda8 <dir_read+0x142>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7ff fc9f 	bl	800d6dc <sum_sfn>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	461a      	mov	r2, r3
 800dda2:	7d3b      	ldrb	r3, [r7, #20]
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d017      	beq.n	800ddd8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ddae:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800ddb0:	e012      	b.n	800ddd8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff f944 	bl	800d042 <dir_next>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10b      	bne.n	800dddc <dir_read+0x176>
	while (dp->sect) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f47f af5b 	bne.w	800dc84 <dir_read+0x1e>
 800ddce:	e006      	b.n	800ddde <dir_read+0x178>
		if (res != FR_OK) break;
 800ddd0:	bf00      	nop
 800ddd2:	e004      	b.n	800ddde <dir_read+0x178>
					break;
 800ddd4:	bf00      	nop
 800ddd6:	e002      	b.n	800ddde <dir_read+0x178>
					break;
 800ddd8:	bf00      	nop
 800ddda:	e000      	b.n	800ddde <dir_read+0x178>
		if (res != FR_OK) break;
 800dddc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <dir_read+0x184>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ddf4:	b590      	push	{r4, r7, lr}
 800ddf6:	b089      	sub	sp, #36	; 0x24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800de02:	2100      	movs	r1, #0
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff f888 	bl	800cf1a <dir_sdi>
 800de0a:	4603      	mov	r3, r0
 800de0c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <dir_find+0x24>
 800de14:	7ffb      	ldrb	r3, [r7, #31]
 800de16:	e112      	b.n	800e03e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b04      	cmp	r3, #4
 800de1e:	d164      	bne.n	800deea <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fcad 	bl	800d784 <xname_sum>
 800de2a:	4603      	mov	r3, r0
 800de2c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800de2e:	e04f      	b.n	800ded0 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	3324      	adds	r3, #36	; 0x24
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd fdf6 	bl	800ba28 <ld_word>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	893b      	ldrh	r3, [r7, #8]
 800de42:	4293      	cmp	r3, r2
 800de44:	d000      	beq.n	800de48 <dir_find+0x54>
 800de46:	e043      	b.n	800ded0 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800de50:	76fb      	strb	r3, [r7, #27]
 800de52:	2340      	movs	r3, #64	; 0x40
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]
 800de5a:	e029      	b.n	800deb0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f003 031f 	and.w	r3, r3, #31
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <dir_find+0x78>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	3302      	adds	r3, #2
 800de6a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	695a      	ldr	r2, [r3, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	4413      	add	r3, r2
 800de74:	4618      	mov	r0, r3
 800de76:	f7fd fdd7 	bl	800ba28 <ld_word>
 800de7a:	4603      	mov	r3, r0
 800de7c:	4618      	mov	r0, r3
 800de7e:	f002 faef 	bl	8010460 <ff_wtoupper>
 800de82:	4603      	mov	r3, r0
 800de84:	461c      	mov	r4, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	691a      	ldr	r2, [r3, #16]
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	4618      	mov	r0, r3
 800de94:	f002 fae4 	bl	8010460 <ff_wtoupper>
 800de98:	4603      	mov	r3, r0
 800de9a:	429c      	cmp	r4, r3
 800de9c:	d10c      	bne.n	800deb8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800de9e:	7efb      	ldrb	r3, [r7, #27]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	76fb      	strb	r3, [r7, #27]
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	3302      	adds	r3, #2
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	3301      	adds	r3, #1
 800deae:	613b      	str	r3, [r7, #16]
 800deb0:	7efb      	ldrb	r3, [r7, #27]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1d2      	bne.n	800de5c <dir_find+0x68>
 800deb6:	e000      	b.n	800deba <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800deb8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800deba:	7efb      	ldrb	r3, [r7, #27]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d107      	bne.n	800ded0 <dir_find+0xdc>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	691a      	ldr	r2, [r3, #16]
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	4413      	add	r3, r2
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d009      	beq.n	800dee4 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ded0:	2100      	movs	r1, #0
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff fec7 	bl	800dc66 <dir_read>
 800ded8:	4603      	mov	r3, r0
 800deda:	77fb      	strb	r3, [r7, #31]
 800dedc:	7ffb      	ldrb	r3, [r7, #31]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d0a6      	beq.n	800de30 <dir_find+0x3c>
 800dee2:	e000      	b.n	800dee6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dee4:	bf00      	nop
		}
		return res;
 800dee6:	7ffb      	ldrb	r3, [r7, #31]
 800dee8:	e0a9      	b.n	800e03e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800deea:	23ff      	movs	r3, #255	; 0xff
 800deec:	773b      	strb	r3, [r7, #28]
 800deee:	7f3b      	ldrb	r3, [r7, #28]
 800def0:	777b      	strb	r3, [r7, #29]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	4619      	mov	r1, r3
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7fe f985 	bl	800c210 <move_window>
 800df06:	4603      	mov	r3, r0
 800df08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800df0a:	7ffb      	ldrb	r3, [r7, #31]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f040 8090 	bne.w	800e032 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df1a:	7fbb      	ldrb	r3, [r7, #30]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d102      	bne.n	800df26 <dir_find+0x132>
 800df20:	2304      	movs	r3, #4
 800df22:	77fb      	strb	r3, [r7, #31]
 800df24:	e08a      	b.n	800e03c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2a:	330b      	adds	r3, #11
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df32:	72fb      	strb	r3, [r7, #11]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	7afa      	ldrb	r2, [r7, #11]
 800df38:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800df3a:	7fbb      	ldrb	r3, [r7, #30]
 800df3c:	2be5      	cmp	r3, #229	; 0xe5
 800df3e:	d007      	beq.n	800df50 <dir_find+0x15c>
 800df40:	7afb      	ldrb	r3, [r7, #11]
 800df42:	f003 0308 	and.w	r3, r3, #8
 800df46:	2b00      	cmp	r3, #0
 800df48:	d009      	beq.n	800df5e <dir_find+0x16a>
 800df4a:	7afb      	ldrb	r3, [r7, #11]
 800df4c:	2b0f      	cmp	r3, #15
 800df4e:	d006      	beq.n	800df5e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df50:	23ff      	movs	r3, #255	; 0xff
 800df52:	777b      	strb	r3, [r7, #29]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f04f 32ff 	mov.w	r2, #4294967295
 800df5a:	64da      	str	r2, [r3, #76]	; 0x4c
 800df5c:	e05e      	b.n	800e01c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	2b0f      	cmp	r3, #15
 800df62:	d136      	bne.n	800dfd2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800df6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d154      	bne.n	800e01c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800df72:	7fbb      	ldrb	r3, [r7, #30]
 800df74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00d      	beq.n	800df98 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df80:	7b5b      	ldrb	r3, [r3, #13]
 800df82:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800df84:	7fbb      	ldrb	r3, [r7, #30]
 800df86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df8a:	77bb      	strb	r3, [r7, #30]
 800df8c:	7fbb      	ldrb	r3, [r7, #30]
 800df8e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df98:	7fba      	ldrb	r2, [r7, #30]
 800df9a:	7f7b      	ldrb	r3, [r7, #29]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d115      	bne.n	800dfcc <dir_find+0x1d8>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa4:	330d      	adds	r3, #13
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	7f3a      	ldrb	r2, [r7, #28]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d10e      	bne.n	800dfcc <dir_find+0x1d8>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	4610      	mov	r0, r2
 800dfba:	f7ff f9c3 	bl	800d344 <cmp_lfn>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <dir_find+0x1d8>
 800dfc4:	7f7b      	ldrb	r3, [r7, #29]
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	e000      	b.n	800dfce <dir_find+0x1da>
 800dfcc:	23ff      	movs	r3, #255	; 0xff
 800dfce:	777b      	strb	r3, [r7, #29]
 800dfd0:	e024      	b.n	800e01c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dfd2:	7f7b      	ldrb	r3, [r7, #29]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d109      	bne.n	800dfec <dir_find+0x1f8>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff fb7d 	bl	800d6dc <sum_sfn>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	7f3b      	ldrb	r3, [r7, #28]
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d024      	beq.n	800e036 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10a      	bne.n	800e010 <dir_find+0x21c>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	3340      	adds	r3, #64	; 0x40
 800e002:	220b      	movs	r2, #11
 800e004:	4619      	mov	r1, r3
 800e006:	f7fd ff10 	bl	800be2a <mem_cmp>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d014      	beq.n	800e03a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e010:	23ff      	movs	r3, #255	; 0xff
 800e012:	777b      	strb	r3, [r7, #29]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f04f 32ff 	mov.w	r2, #4294967295
 800e01a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e01c:	2100      	movs	r1, #0
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff f80f 	bl	800d042 <dir_next>
 800e024:	4603      	mov	r3, r0
 800e026:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e028:	7ffb      	ldrb	r3, [r7, #31]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f43f af65 	beq.w	800defa <dir_find+0x106>
 800e030:	e004      	b.n	800e03c <dir_find+0x248>
		if (res != FR_OK) break;
 800e032:	bf00      	nop
 800e034:	e002      	b.n	800e03c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e036:	bf00      	nop
 800e038:	e000      	b.n	800e03c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e03a:	bf00      	nop

	return res;
 800e03c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3724      	adds	r7, #36	; 0x24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd90      	pop	{r4, r7, pc}
	...

0800e048 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e048:	b5b0      	push	{r4, r5, r7, lr}
 800e04a:	b0a0      	sub	sp, #128	; 0x80
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e05c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <dir_register+0x20>
 800e064:	2306      	movs	r3, #6
 800e066:	e18c      	b.n	800e382 <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e068:	2300      	movs	r3, #0
 800e06a:	677b      	str	r3, [r7, #116]	; 0x74
 800e06c:	e002      	b.n	800e074 <dir_register+0x2c>
 800e06e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e070:	3301      	adds	r3, #1
 800e072:	677b      	str	r3, [r7, #116]	; 0x74
 800e074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e076:	691a      	ldr	r2, [r3, #16]
 800e078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	4413      	add	r3, r2
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1f4      	bne.n	800e06e <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b04      	cmp	r3, #4
 800e08a:	f040 80a2 	bne.w	800e1d2 <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e08e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e090:	330e      	adds	r3, #14
 800e092:	4abe      	ldr	r2, [pc, #760]	; (800e38c <dir_register+0x344>)
 800e094:	fba2 2303 	umull	r2, r3, r2, r3
 800e098:	08db      	lsrs	r3, r3, #3
 800e09a:	3302      	adds	r3, #2
 800e09c:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e09e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff f8b4 	bl	800d20e <dir_alloc>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e0ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <dir_register+0x72>
 800e0b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0b8:	e163      	b.n	800e382 <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	015b      	lsls	r3, r3, #5
 800e0c4:	1ad2      	subs	r2, r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d075      	beq.n	800e1be <dir_register+0x176>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	79db      	ldrb	r3, [r3, #7]
 800e0d6:	f003 0304 	and.w	r3, r3, #4
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d06f      	beq.n	800e1be <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0e6:	895b      	ldrh	r3, [r3, #10]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	fb03 f302 	mul.w	r3, r3, r2
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	f04f 0300 	mov.w	r3, #0
 800e0f8:	1884      	adds	r4, r0, r2
 800e0fa:	eb41 0503 	adc.w	r5, r1, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fcae 	bl	800ca68 <fill_first_frag>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <dir_register+0xd8>
 800e11a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e11e:	e130      	b.n	800e382 <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	4619      	mov	r1, r3
 800e12c:	f7fe fccb 	bl	800cac6 <fill_last_frag>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e136:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d002      	beq.n	800e144 <dir_register+0xfc>
 800e13e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e142:	e11e      	b.n	800e382 <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	f107 0308 	add.w	r3, r7, #8
 800e14a:	4611      	mov	r1, r2
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fc8d 	bl	800da6c <load_obj_dir>
 800e152:	4603      	mov	r3, r0
 800e154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e158:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <dir_register+0x11e>
 800e160:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e164:	e10d      	b.n	800e382 <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e168:	695b      	ldr	r3, [r3, #20]
 800e16a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e174:	4608      	mov	r0, r1
 800e176:	f7fd fd94 	bl	800bca2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e188:	4608      	mov	r0, r1
 800e18a:	f7fd fd8a 	bl	800bca2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	79da      	ldrb	r2, [r3, #7]
 800e192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	3321      	adds	r3, #33	; 0x21
 800e198:	f042 0201 	orr.w	r2, r2, #1
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e1a0:	f107 0308 	add.w	r3, r7, #8
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff fc9c 	bl	800dae2 <store_xdir>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e1b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <dir_register+0x176>
 800e1b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1bc:	e0e1      	b.n	800e382 <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1c0:	695a      	ldr	r2, [r3, #20]
 800e1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f7ff fce5 	bl	800db98 <create_xdir>
		return FR_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e0d7      	b.n	800e382 <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e1d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1dc:	220c      	movs	r2, #12
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fd fde7 	bl	800bdb2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d033      	beq.n	800e258 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2240      	movs	r2, #64	; 0x40
 800e1f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800e1fc:	e016      	b.n	800e22c <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e206:	691a      	ldr	r2, [r3, #16]
 800e208:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e20c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e20e:	f7ff f9d5 	bl	800d5bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fdee 	bl	800ddf4 <dir_find>
 800e218:	4603      	mov	r3, r0
 800e21a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e21e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800e226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e228:	3301      	adds	r3, #1
 800e22a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e22c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e22e:	2b63      	cmp	r3, #99	; 0x63
 800e230:	d9e5      	bls.n	800e1fe <dir_register+0x1b6>
 800e232:	e000      	b.n	800e236 <dir_register+0x1ee>
			if (res != FR_OK) break;
 800e234:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e238:	2b64      	cmp	r3, #100	; 0x64
 800e23a:	d101      	bne.n	800e240 <dir_register+0x1f8>
 800e23c:	2307      	movs	r3, #7
 800e23e:	e0a0      	b.n	800e382 <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e244:	2b04      	cmp	r3, #4
 800e246:	d002      	beq.n	800e24e <dir_register+0x206>
 800e248:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e24c:	e099      	b.n	800e382 <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e24e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e258:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e25c:	f003 0302 	and.w	r3, r3, #2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d007      	beq.n	800e274 <dir_register+0x22c>
 800e264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e266:	330c      	adds	r3, #12
 800e268:	4a49      	ldr	r2, [pc, #292]	; (800e390 <dir_register+0x348>)
 800e26a:	fba2 2303 	umull	r2, r3, r2, r3
 800e26e:	089b      	lsrs	r3, r3, #2
 800e270:	3301      	adds	r3, #1
 800e272:	e000      	b.n	800e276 <dir_register+0x22e>
 800e274:	2301      	movs	r3, #1
 800e276:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e278:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fe ffc7 	bl	800d20e <dir_alloc>
 800e280:	4603      	mov	r3, r0
 800e282:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e286:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d14a      	bne.n	800e324 <dir_register+0x2dc>
 800e28e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e290:	3b01      	subs	r3, #1
 800e292:	673b      	str	r3, [r7, #112]	; 0x70
 800e294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e296:	2b00      	cmp	r3, #0
 800e298:	d044      	beq.n	800e324 <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e29e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2a0:	015b      	lsls	r3, r3, #5
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe fe37 	bl	800cf1a <dir_sdi>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e2b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d134      	bne.n	800e324 <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3340      	adds	r3, #64	; 0x40
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7ff fa0c 	bl	800d6dc <sum_sfn>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e2d2:	f7fd ff9d 	bl	800c210 <move_window>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e2dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d11e      	bne.n	800e322 <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e6:	6918      	ldr	r0, [r3, #16]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e2ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e2f4:	f7ff f8fa 	bl	800d4ec <put_lfn>
				fs->wflag = 1;
 800e2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e2fe:	2100      	movs	r1, #0
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7fe fe9e 	bl	800d042 <dir_next>
 800e306:	4603      	mov	r3, r0
 800e308:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e30c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e310:	2b00      	cmp	r3, #0
 800e312:	d107      	bne.n	800e324 <dir_register+0x2dc>
 800e314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e316:	3b01      	subs	r3, #1
 800e318:	673b      	str	r3, [r7, #112]	; 0x70
 800e31a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1d4      	bne.n	800e2ca <dir_register+0x282>
 800e320:	e000      	b.n	800e324 <dir_register+0x2dc>
				if (res != FR_OK) break;
 800e322:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e324:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d128      	bne.n	800e37e <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e330:	4619      	mov	r1, r3
 800e332:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e334:	f7fd ff6c 	bl	800c210 <move_window>
 800e338:	4603      	mov	r3, r0
 800e33a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e33e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e342:	2b00      	cmp	r3, #0
 800e344:	d11b      	bne.n	800e37e <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e34a:	2220      	movs	r2, #32
 800e34c:	2100      	movs	r1, #0
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fd fd50 	bl	800bdf4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	3340      	adds	r3, #64	; 0x40
 800e35c:	220b      	movs	r2, #11
 800e35e:	4619      	mov	r1, r3
 800e360:	f7fd fd27 	bl	800bdb2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36e:	330c      	adds	r3, #12
 800e370:	f002 0218 	and.w	r2, r2, #24
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e37a:	2201      	movs	r2, #1
 800e37c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e37e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e382:	4618      	mov	r0, r3
 800e384:	3780      	adds	r7, #128	; 0x80
 800e386:	46bd      	mov	sp, r7
 800e388:	bdb0      	pop	{r4, r5, r7, pc}
 800e38a:	bf00      	nop
 800e38c:	88888889 	.word	0x88888889
 800e390:	4ec4ec4f 	.word	0x4ec4ec4f

0800e394 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 80d8 	beq.w	800e564 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d106      	bne.n	800e3ca <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	6839      	ldr	r1, [r7, #0]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fa12 	bl	800d7ec <get_xdir_info>
		return;
 800e3c8:	e0cd      	b.n	800e566 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d2:	d032      	beq.n	800e43a <get_fileinfo+0xa6>
			i = j = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	61bb      	str	r3, [r7, #24]
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e3dc:	e01b      	b.n	800e416 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e3de:	89fb      	ldrh	r3, [r7, #14]
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f002 f800 	bl	80103e8 <ff_convert>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e3ec:	89fb      	ldrh	r3, [r7, #14]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d102      	bne.n	800e3f8 <get_fileinfo+0x64>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	61fb      	str	r3, [r7, #28]
 800e3f6:	e01a      	b.n	800e42e <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	2bfe      	cmp	r3, #254	; 0xfe
 800e3fc:	d902      	bls.n	800e404 <get_fileinfo+0x70>
 800e3fe:	2300      	movs	r3, #0
 800e400:	61fb      	str	r3, [r7, #28]
 800e402:	e014      	b.n	800e42e <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	61fa      	str	r2, [r7, #28]
 800e40a:	89fa      	ldrh	r2, [r7, #14]
 800e40c:	b2d1      	uxtb	r1, r2
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	4413      	add	r3, r2
 800e412:	460a      	mov	r2, r1
 800e414:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	691a      	ldr	r2, [r3, #16]
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	1c59      	adds	r1, r3, #1
 800e41e:	61b9      	str	r1, [r7, #24]
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	4413      	add	r3, r2
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	81fb      	strh	r3, [r7, #14]
 800e428:	89fb      	ldrh	r3, [r7, #14]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1d7      	bne.n	800e3de <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	4413      	add	r3, r2
 800e434:	331a      	adds	r3, #26
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	61bb      	str	r3, [r7, #24]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e442:	683a      	ldr	r2, [r7, #0]
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	4413      	add	r3, r2
 800e448:	331a      	adds	r3, #26
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e44e:	e04c      	b.n	800e4ea <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	1c59      	adds	r1, r3, #1
 800e458:	61f9      	str	r1, [r7, #28]
 800e45a:	4413      	add	r3, r2
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e460:	7dfb      	ldrb	r3, [r7, #23]
 800e462:	2b20      	cmp	r3, #32
 800e464:	d100      	bne.n	800e468 <get_fileinfo+0xd4>
 800e466:	e040      	b.n	800e4ea <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e468:	7dfb      	ldrb	r3, [r7, #23]
 800e46a:	2b05      	cmp	r3, #5
 800e46c:	d101      	bne.n	800e472 <get_fileinfo+0xde>
 800e46e:	23e5      	movs	r3, #229	; 0xe5
 800e470:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	2b09      	cmp	r3, #9
 800e476:	d10f      	bne.n	800e498 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800e478:	89bb      	ldrh	r3, [r7, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d105      	bne.n	800e48a <get_fileinfo+0xf6>
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	4413      	add	r3, r2
 800e484:	331a      	adds	r3, #26
 800e486:	222e      	movs	r2, #46	; 0x2e
 800e488:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	61ba      	str	r2, [r7, #24]
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	4413      	add	r3, r2
 800e494:	222e      	movs	r2, #46	; 0x2e
 800e496:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	4413      	add	r3, r2
 800e49e:	330d      	adds	r3, #13
 800e4a0:	7dfa      	ldrb	r2, [r7, #23]
 800e4a2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e4a4:	89bb      	ldrh	r3, [r7, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d11c      	bne.n	800e4e4 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	2b40      	cmp	r3, #64	; 0x40
 800e4ae:	d913      	bls.n	800e4d8 <get_fileinfo+0x144>
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b5a      	cmp	r3, #90	; 0x5a
 800e4b4:	d810      	bhi.n	800e4d8 <get_fileinfo+0x144>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ba:	330c      	adds	r3, #12
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2b08      	cmp	r3, #8
 800e4c4:	d901      	bls.n	800e4ca <get_fileinfo+0x136>
 800e4c6:	2310      	movs	r3, #16
 800e4c8:	e000      	b.n	800e4cc <get_fileinfo+0x138>
 800e4ca:	2308      	movs	r3, #8
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
 800e4d4:	3320      	adds	r3, #32
 800e4d6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	4413      	add	r3, r2
 800e4de:	331a      	adds	r3, #26
 800e4e0:	7dfa      	ldrb	r2, [r7, #23]
 800e4e2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	2b0a      	cmp	r3, #10
 800e4ee:	d9af      	bls.n	800e450 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800e4f0:	89bb      	ldrh	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10d      	bne.n	800e512 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	331a      	adds	r3, #26
 800e4fe:	2200      	movs	r2, #0
 800e500:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e506:	330c      	adds	r3, #12
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <get_fileinfo+0x17e>
 800e50e:	2300      	movs	r3, #0
 800e510:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e512:	683a      	ldr	r2, [r7, #0]
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	4413      	add	r3, r2
 800e518:	330d      	adds	r3, #13
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e522:	7ada      	ldrb	r2, [r3, #11]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52c:	331c      	adds	r3, #28
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fd fa92 	bl	800ba58 <ld_dword>
 800e534:	4603      	mov	r3, r0
 800e536:	461a      	mov	r2, r3
 800e538:	f04f 0300 	mov.w	r3, #0
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e546:	3316      	adds	r3, #22
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fd fa85 	bl	800ba58 <ld_dword>
 800e54e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	b29a      	uxth	r2, r3
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	815a      	strh	r2, [r3, #10]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	0c1b      	lsrs	r3, r3, #16
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	811a      	strh	r2, [r3, #8]
 800e562:	e000      	b.n	800e566 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e564:	bf00      	nop
}
 800e566:	3720      	adds	r7, #32
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08a      	sub	sp, #40	; 0x28
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	613b      	str	r3, [r7, #16]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	2300      	movs	r3, #0
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	61ba      	str	r2, [r7, #24]
 800e592:	693a      	ldr	r2, [r7, #16]
 800e594:	4413      	add	r3, r2
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e59a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e59c:	2b1f      	cmp	r3, #31
 800e59e:	d940      	bls.n	800e622 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a2:	2b2f      	cmp	r3, #47	; 0x2f
 800e5a4:	d006      	beq.n	800e5b4 <create_name+0x48>
 800e5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a8:	2b5c      	cmp	r3, #92	; 0x5c
 800e5aa:	d110      	bne.n	800e5ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e5ac:	e002      	b.n	800e5b4 <create_name+0x48>
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	61bb      	str	r3, [r7, #24]
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	2b2f      	cmp	r3, #47	; 0x2f
 800e5be:	d0f6      	beq.n	800e5ae <create_name+0x42>
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b5c      	cmp	r3, #92	; 0x5c
 800e5ca:	d0f0      	beq.n	800e5ae <create_name+0x42>
			break;
 800e5cc:	e02a      	b.n	800e624 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2bfe      	cmp	r3, #254	; 0xfe
 800e5d2:	d901      	bls.n	800e5d8 <create_name+0x6c>
 800e5d4:	2306      	movs	r3, #6
 800e5d6:	e177      	b.n	800e8c8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e5d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e5de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f001 ff00 	bl	80103e8 <ff_convert>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <create_name+0x8a>
 800e5f2:	2306      	movs	r3, #6
 800e5f4:	e168      	b.n	800e8c8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5f8:	2b7f      	cmp	r3, #127	; 0x7f
 800e5fa:	d809      	bhi.n	800e610 <create_name+0xa4>
 800e5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5fe:	4619      	mov	r1, r3
 800e600:	48b3      	ldr	r0, [pc, #716]	; (800e8d0 <create_name+0x364>)
 800e602:	f7fd fc39 	bl	800be78 <chk_chr>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <create_name+0xa4>
 800e60c:	2306      	movs	r3, #6
 800e60e:	e15b      	b.n	800e8c8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	1c5a      	adds	r2, r3, #1
 800e614:	617a      	str	r2, [r7, #20]
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	4413      	add	r3, r2
 800e61c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e61e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e620:	e7b4      	b.n	800e58c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e622:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e624:	693a      	ldr	r2, [r7, #16]
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	441a      	add	r2, r3
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e62e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e630:	2b1f      	cmp	r3, #31
 800e632:	d801      	bhi.n	800e638 <create_name+0xcc>
 800e634:	2304      	movs	r3, #4
 800e636:	e000      	b.n	800e63a <create_name+0xce>
 800e638:	2300      	movs	r3, #0
 800e63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e63e:	e011      	b.n	800e664 <create_name+0xf8>
		w = lfn[di - 1];
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e646:	3b01      	subs	r3, #1
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	4413      	add	r3, r2
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e654:	2b20      	cmp	r3, #32
 800e656:	d002      	beq.n	800e65e <create_name+0xf2>
 800e658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e65a:	2b2e      	cmp	r3, #46	; 0x2e
 800e65c:	d106      	bne.n	800e66c <create_name+0x100>
		di--;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	3b01      	subs	r3, #1
 800e662:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1ea      	bne.n	800e640 <create_name+0xd4>
 800e66a:	e000      	b.n	800e66e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e66c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	4413      	add	r3, r2
 800e676:	2200      	movs	r2, #0
 800e678:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <create_name+0x118>
 800e680:	2306      	movs	r3, #6
 800e682:	e121      	b.n	800e8c8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3340      	adds	r3, #64	; 0x40
 800e688:	220b      	movs	r2, #11
 800e68a:	2120      	movs	r1, #32
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fd fbb1 	bl	800bdf4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e692:	2300      	movs	r3, #0
 800e694:	61bb      	str	r3, [r7, #24]
 800e696:	e002      	b.n	800e69e <create_name+0x132>
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	3301      	adds	r3, #1
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	2b20      	cmp	r3, #32
 800e6aa:	d0f5      	beq.n	800e698 <create_name+0x12c>
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	005b      	lsls	r3, r3, #1
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	881b      	ldrh	r3, [r3, #0]
 800e6b6:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b8:	d0ee      	beq.n	800e698 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d009      	beq.n	800e6d4 <create_name+0x168>
 800e6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c4:	f043 0303 	orr.w	r3, r3, #3
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e6cc:	e002      	b.n	800e6d4 <create_name+0x168>
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	617b      	str	r3, [r7, #20]
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d009      	beq.n	800e6ee <create_name+0x182>
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ec:	d1ef      	bne.n	800e6ce <create_name+0x162>

	i = b = 0; ni = 8;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	623b      	str	r3, [r7, #32]
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	61ba      	str	r2, [r7, #24]
 800e702:	005b      	lsls	r3, r3, #1
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	4413      	add	r3, r2
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8090 	beq.w	800e834 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e716:	2b20      	cmp	r3, #32
 800e718:	d006      	beq.n	800e728 <create_name+0x1bc>
 800e71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e71c:	2b2e      	cmp	r3, #46	; 0x2e
 800e71e:	d10a      	bne.n	800e736 <create_name+0x1ca>
 800e720:	69ba      	ldr	r2, [r7, #24]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	429a      	cmp	r2, r3
 800e726:	d006      	beq.n	800e736 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e72c:	f043 0303 	orr.w	r3, r3, #3
 800e730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e734:	e07d      	b.n	800e832 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e736:	6a3a      	ldr	r2, [r7, #32]
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d203      	bcs.n	800e746 <create_name+0x1da>
 800e73e:	69ba      	ldr	r2, [r7, #24]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	429a      	cmp	r2, r3
 800e744:	d123      	bne.n	800e78e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	2b0b      	cmp	r3, #11
 800e74a:	d106      	bne.n	800e75a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e750:	f043 0303 	orr.w	r3, r3, #3
 800e754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e758:	e06f      	b.n	800e83a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e75a:	69ba      	ldr	r2, [r7, #24]
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d005      	beq.n	800e76e <create_name+0x202>
 800e762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e766:	f043 0303 	orr.w	r3, r3, #3
 800e76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e76e:	69ba      	ldr	r2, [r7, #24]
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	429a      	cmp	r2, r3
 800e774:	d860      	bhi.n	800e838 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	61bb      	str	r3, [r7, #24]
 800e77a:	2308      	movs	r3, #8
 800e77c:	623b      	str	r3, [r7, #32]
 800e77e:	230b      	movs	r3, #11
 800e780:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e78c:	e051      	b.n	800e832 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e790:	2b7f      	cmp	r3, #127	; 0x7f
 800e792:	d914      	bls.n	800e7be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e796:	2100      	movs	r1, #0
 800e798:	4618      	mov	r0, r3
 800e79a:	f001 fe25 	bl	80103e8 <ff_convert>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d004      	beq.n	800e7b2 <create_name+0x246>
 800e7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7aa:	3b80      	subs	r3, #128	; 0x80
 800e7ac:	4a49      	ldr	r2, [pc, #292]	; (800e8d4 <create_name+0x368>)
 800e7ae:	5cd3      	ldrb	r3, [r2, r3]
 800e7b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e7b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b6:	f043 0302 	orr.w	r3, r3, #2
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e7be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d007      	beq.n	800e7d4 <create_name+0x268>
 800e7c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4843      	ldr	r0, [pc, #268]	; (800e8d8 <create_name+0x36c>)
 800e7ca:	f7fd fb55 	bl	800be78 <chk_chr>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d008      	beq.n	800e7e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e7d4:	235f      	movs	r3, #95	; 0x5f
 800e7d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7dc:	f043 0303 	orr.w	r3, r3, #3
 800e7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7e4:	e01b      	b.n	800e81e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e8:	2b40      	cmp	r3, #64	; 0x40
 800e7ea:	d909      	bls.n	800e800 <create_name+0x294>
 800e7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ee:	2b5a      	cmp	r3, #90	; 0x5a
 800e7f0:	d806      	bhi.n	800e800 <create_name+0x294>
					b |= 2;
 800e7f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7f6:	f043 0302 	orr.w	r3, r3, #2
 800e7fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7fe:	e00e      	b.n	800e81e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e802:	2b60      	cmp	r3, #96	; 0x60
 800e804:	d90b      	bls.n	800e81e <create_name+0x2b2>
 800e806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e808:	2b7a      	cmp	r3, #122	; 0x7a
 800e80a:	d808      	bhi.n	800e81e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e80c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e810:	f043 0301 	orr.w	r3, r3, #1
 800e814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e81a:	3b20      	subs	r3, #32
 800e81c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	623a      	str	r2, [r7, #32]
 800e824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e826:	b2d1      	uxtb	r1, r2
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	4413      	add	r3, r2
 800e82c:	460a      	mov	r2, r1
 800e82e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e832:	e763      	b.n	800e6fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e834:	bf00      	nop
 800e836:	e000      	b.n	800e83a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e838:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e840:	2be5      	cmp	r3, #229	; 0xe5
 800e842:	d103      	bne.n	800e84c <create_name+0x2e0>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2205      	movs	r2, #5
 800e848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	2b08      	cmp	r3, #8
 800e850:	d104      	bne.n	800e85c <create_name+0x2f0>
 800e852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e85c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e860:	f003 030c 	and.w	r3, r3, #12
 800e864:	2b0c      	cmp	r3, #12
 800e866:	d005      	beq.n	800e874 <create_name+0x308>
 800e868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e86c:	f003 0303 	and.w	r3, r3, #3
 800e870:	2b03      	cmp	r3, #3
 800e872:	d105      	bne.n	800e880 <create_name+0x314>
 800e874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e878:	f043 0302 	orr.w	r3, r3, #2
 800e87c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e884:	f003 0302 	and.w	r3, r3, #2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d117      	bne.n	800e8bc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e890:	f003 0303 	and.w	r3, r3, #3
 800e894:	2b01      	cmp	r3, #1
 800e896:	d105      	bne.n	800e8a4 <create_name+0x338>
 800e898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e89c:	f043 0310 	orr.w	r3, r3, #16
 800e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e8a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8a8:	f003 030c 	and.w	r3, r3, #12
 800e8ac:	2b04      	cmp	r3, #4
 800e8ae:	d105      	bne.n	800e8bc <create_name+0x350>
 800e8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b4:	f043 0308 	orr.w	r3, r3, #8
 800e8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800e8c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3728      	adds	r7, #40	; 0x28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	08011374 	.word	0x08011374
 800e8d4:	08013c10 	.word	0x08013c10
 800e8d8:	08011380 	.word	0x08011380

0800e8dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8f0:	e002      	b.n	800e8f8 <follow_path+0x1c>
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b2f      	cmp	r3, #47	; 0x2f
 800e8fe:	d0f8      	beq.n	800e8f2 <follow_path+0x16>
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b5c      	cmp	r3, #92	; 0x5c
 800e906:	d0f4      	beq.n	800e8f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	2200      	movs	r2, #0
 800e90c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	2200      	movs	r2, #0
 800e912:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2b1f      	cmp	r3, #31
 800e91a:	d80a      	bhi.n	800e932 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2280      	movs	r2, #128	; 0x80
 800e920:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e924:	2100      	movs	r1, #0
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7fe faf7 	bl	800cf1a <dir_sdi>
 800e92c:	4603      	mov	r3, r0
 800e92e:	75fb      	strb	r3, [r7, #23]
 800e930:	e07d      	b.n	800ea2e <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e932:	463b      	mov	r3, r7
 800e934:	4619      	mov	r1, r3
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fe18 	bl	800e56c <create_name>
 800e93c:	4603      	mov	r3, r0
 800e93e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d16e      	bne.n	800ea24 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fa54 	bl	800ddf4 <dir_find>
 800e94c:	4603      	mov	r3, r0
 800e94e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e956:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00a      	beq.n	800e974 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e95e:	7dfb      	ldrb	r3, [r7, #23]
 800e960:	2b04      	cmp	r3, #4
 800e962:	d161      	bne.n	800ea28 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e964:	7afb      	ldrb	r3, [r7, #11]
 800e966:	f003 0304 	and.w	r3, r3, #4
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d15c      	bne.n	800ea28 <follow_path+0x14c>
 800e96e:	2305      	movs	r3, #5
 800e970:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e972:	e059      	b.n	800ea28 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d156      	bne.n	800ea2c <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	799b      	ldrb	r3, [r3, #6]
 800e982:	f003 0310 	and.w	r3, r3, #16
 800e986:	2b00      	cmp	r3, #0
 800e988:	d102      	bne.n	800e990 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800e98a:	2305      	movs	r3, #5
 800e98c:	75fb      	strb	r3, [r7, #23]
 800e98e:	e04e      	b.n	800ea2e <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b04      	cmp	r3, #4
 800e996:	d130      	bne.n	800e9fa <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	689a      	ldr	r2, [r3, #8]
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	79d2      	ldrb	r2, [r2, #7]
 800e9b0:	431a      	orrs	r2, r3
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	3334      	adds	r3, #52	; 0x34
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fd f847 	bl	800ba58 <ld_dword>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	3321      	adds	r3, #33	; 0x21
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	f003 0302 	and.w	r3, r3, #2
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	695b      	ldr	r3, [r3, #20]
 800e9e6:	3338      	adds	r3, #56	; 0x38
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd f858 	bl	800ba9e <ld_qword>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	6939      	ldr	r1, [r7, #16]
 800e9f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e9f8:	e79b      	b.n	800e932 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	8992      	ldrh	r2, [r2, #12]
 800ea08:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea0c:	fb02 f200 	mul.w	r2, r2, r0
 800ea10:	1a9b      	subs	r3, r3, r2
 800ea12:	440b      	add	r3, r1
 800ea14:	4619      	mov	r1, r3
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f7fe fc55 	bl	800d2c6 <ld_clust>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea22:	e786      	b.n	800e932 <follow_path+0x56>
			if (res != FR_OK) break;
 800ea24:	bf00      	nop
 800ea26:	e002      	b.n	800ea2e <follow_path+0x152>
				break;
 800ea28:	bf00      	nop
 800ea2a:	e000      	b.n	800ea2e <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea2c:	bf00      	nop
			}
		}
	}

	return res;
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3718      	adds	r7, #24
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea40:	f04f 33ff 	mov.w	r3, #4294967295
 800ea44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d031      	beq.n	800eab2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	617b      	str	r3, [r7, #20]
 800ea54:	e002      	b.n	800ea5c <get_ldnumber+0x24>
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	617b      	str	r3, [r7, #20]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b1f      	cmp	r3, #31
 800ea62:	d903      	bls.n	800ea6c <get_ldnumber+0x34>
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b3a      	cmp	r3, #58	; 0x3a
 800ea6a:	d1f4      	bne.n	800ea56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b3a      	cmp	r3, #58	; 0x3a
 800ea72:	d11c      	bne.n	800eaae <get_ldnumber+0x76>
			tp = *path;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	60fa      	str	r2, [r7, #12]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	3b30      	subs	r3, #48	; 0x30
 800ea84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b09      	cmp	r3, #9
 800ea8a:	d80e      	bhi.n	800eaaa <get_ldnumber+0x72>
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d10a      	bne.n	800eaaa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d107      	bne.n	800eaaa <get_ldnumber+0x72>
					vol = (int)i;
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	e002      	b.n	800eab4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eaae:	2300      	movs	r3, #0
 800eab0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eab2:	693b      	ldr	r3, [r7, #16]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	371c      	adds	r7, #28
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	70da      	strb	r2, [r3, #3]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f04f 32ff 	mov.w	r2, #4294967295
 800ead6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7fd fb98 	bl	800c210 <move_window>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <check_fs+0x2a>
 800eae6:	2304      	movs	r3, #4
 800eae8:	e044      	b.n	800eb74 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	333c      	adds	r3, #60	; 0x3c
 800eaee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fc ff98 	bl	800ba28 <ld_word>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	461a      	mov	r2, r3
 800eafc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d001      	beq.n	800eb08 <check_fs+0x48>
 800eb04:	2303      	movs	r3, #3
 800eb06:	e035      	b.n	800eb74 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb0e:	2be9      	cmp	r3, #233	; 0xe9
 800eb10:	d009      	beq.n	800eb26 <check_fs+0x66>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb18:	2beb      	cmp	r3, #235	; 0xeb
 800eb1a:	d11e      	bne.n	800eb5a <check_fs+0x9a>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb22:	2b90      	cmp	r3, #144	; 0x90
 800eb24:	d119      	bne.n	800eb5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	333c      	adds	r3, #60	; 0x3c
 800eb2a:	3336      	adds	r3, #54	; 0x36
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fc ff93 	bl	800ba58 <ld_dword>
 800eb32:	4603      	mov	r3, r0
 800eb34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb38:	4a10      	ldr	r2, [pc, #64]	; (800eb7c <check_fs+0xbc>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d101      	bne.n	800eb42 <check_fs+0x82>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e018      	b.n	800eb74 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	333c      	adds	r3, #60	; 0x3c
 800eb46:	3352      	adds	r3, #82	; 0x52
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fc ff85 	bl	800ba58 <ld_dword>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4a0b      	ldr	r2, [pc, #44]	; (800eb80 <check_fs+0xc0>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d101      	bne.n	800eb5a <check_fs+0x9a>
 800eb56:	2300      	movs	r3, #0
 800eb58:	e00c      	b.n	800eb74 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	333c      	adds	r3, #60	; 0x3c
 800eb5e:	220b      	movs	r2, #11
 800eb60:	4908      	ldr	r1, [pc, #32]	; (800eb84 <check_fs+0xc4>)
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fd f961 	bl	800be2a <mem_cmp>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d101      	bne.n	800eb72 <check_fs+0xb2>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e000      	b.n	800eb74 <check_fs+0xb4>
#endif
	return 2;
 800eb72:	2302      	movs	r3, #2
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	00544146 	.word	0x00544146
 800eb80:	33544146 	.word	0x33544146
 800eb84:	08011388 	.word	0x08011388

0800eb88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eb8c:	b098      	sub	sp, #96	; 0x60
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	60f8      	str	r0, [r7, #12]
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	4613      	mov	r3, r2
 800eb96:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff ff4a 	bl	800ea38 <get_ldnumber>
 800eba4:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800eba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	da01      	bge.n	800ebb0 <find_volume+0x28>
 800ebac:	230b      	movs	r3, #11
 800ebae:	e365      	b.n	800f27c <find_volume+0x6f4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ebb0:	4aa9      	ldr	r2, [pc, #676]	; (800ee58 <find_volume+0x2d0>)
 800ebb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebb8:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ebba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <find_volume+0x3c>
 800ebc0:	230c      	movs	r3, #12
 800ebc2:	e35b      	b.n	800f27c <find_volume+0x6f4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebc8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ebca:	79fb      	ldrb	r3, [r7, #7]
 800ebcc:	f023 0301 	bic.w	r3, r3, #1
 800ebd0:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ebd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d01a      	beq.n	800ec10 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ebda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebdc:	785b      	ldrb	r3, [r3, #1]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fc fe84 	bl	800b8ec <disk_status>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ebea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ebee:	f003 0301 	and.w	r3, r3, #1
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10c      	bne.n	800ec10 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ebf6:	79fb      	ldrb	r3, [r7, #7]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d007      	beq.n	800ec0c <find_volume+0x84>
 800ebfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec00:	f003 0304 	and.w	r3, r3, #4
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d001      	beq.n	800ec0c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800ec08:	230a      	movs	r3, #10
 800ec0a:	e337      	b.n	800f27c <find_volume+0x6f4>
			}
			return FR_OK;				/* The file system object is valid */
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	e335      	b.n	800f27c <find_volume+0x6f4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec20:	785b      	ldrb	r3, [r3, #1]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fc fe7c 	bl	800b920 <disk_initialize>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ec2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e31e      	b.n	800f27c <find_volume+0x6f4>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec3e:	79fb      	ldrb	r3, [r7, #7]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d007      	beq.n	800ec54 <find_volume+0xcc>
 800ec44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800ec50:	230a      	movs	r3, #10
 800ec52:	e313      	b.n	800f27c <find_volume+0x6f4>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ec54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec56:	7858      	ldrb	r0, [r3, #1]
 800ec58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec5a:	330c      	adds	r3, #12
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	2102      	movs	r1, #2
 800ec60:	f7fc fec4 	bl	800b9ec <disk_ioctl>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <find_volume+0xe6>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e306      	b.n	800f27c <find_volume+0x6f4>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ec6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec70:	899b      	ldrh	r3, [r3, #12]
 800ec72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec76:	d80d      	bhi.n	800ec94 <find_volume+0x10c>
 800ec78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7a:	899b      	ldrh	r3, [r3, #12]
 800ec7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec80:	d308      	bcc.n	800ec94 <find_volume+0x10c>
 800ec82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec84:	899b      	ldrh	r3, [r3, #12]
 800ec86:	461a      	mov	r2, r3
 800ec88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8a:	899b      	ldrh	r3, [r3, #12]
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	4013      	ands	r3, r2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d001      	beq.n	800ec98 <find_volume+0x110>
 800ec94:	2301      	movs	r3, #1
 800ec96:	e2f1      	b.n	800f27c <find_volume+0x6f4>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ec9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eca0:	f7ff ff0e 	bl	800eac0 <check_fs>
 800eca4:	4603      	mov	r3, r0
 800eca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ecaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d14b      	bne.n	800ed4a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecb6:	e01f      	b.n	800ecf8 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ecb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ecbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecc0:	011b      	lsls	r3, r3, #4
 800ecc2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ecc6:	4413      	add	r3, r2
 800ecc8:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ecca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eccc:	3304      	adds	r3, #4
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <find_volume+0x15a>
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fc febd 	bl	800ba58 <ld_dword>
 800ecde:	4602      	mov	r2, r0
 800ece0:	e000      	b.n	800ece4 <find_volume+0x15c>
 800ece2:	2200      	movs	r2, #0
 800ece4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ecec:	440b      	add	r3, r1
 800ecee:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecfa:	2b03      	cmp	r3, #3
 800ecfc:	d9dc      	bls.n	800ecb8 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ecfe:	2300      	movs	r3, #0
 800ed00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800ed02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <find_volume+0x186>
 800ed08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ed0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ed16:	4413      	add	r3, r2
 800ed18:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ed1c:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ed1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d005      	beq.n	800ed30 <find_volume+0x1a8>
 800ed24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ed28:	f7ff feca 	bl	800eac0 <check_fs>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	e000      	b.n	800ed32 <find_volume+0x1aa>
 800ed30:	2303      	movs	r3, #3
 800ed32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ed36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d905      	bls.n	800ed4a <find_volume+0x1c2>
 800ed3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed40:	3301      	adds	r3, #1
 800ed42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	d9e1      	bls.n	800ed0e <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ed4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d101      	bne.n	800ed56 <find_volume+0x1ce>
 800ed52:	2301      	movs	r3, #1
 800ed54:	e292      	b.n	800f27c <find_volume+0x6f4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ed56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d901      	bls.n	800ed62 <find_volume+0x1da>
 800ed5e:	230d      	movs	r3, #13
 800ed60:	e28c      	b.n	800f27c <find_volume+0x6f4>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ed62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	f040 80fe 	bne.w	800ef68 <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ed6c:	230b      	movs	r3, #11
 800ed6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed70:	e002      	b.n	800ed78 <find_volume+0x1f0>
 800ed72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed74:	3301      	adds	r3, #1
 800ed76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7a:	2b3f      	cmp	r3, #63	; 0x3f
 800ed7c:	d806      	bhi.n	800ed8c <find_volume+0x204>
 800ed7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed82:	4413      	add	r3, r2
 800ed84:	333c      	adds	r3, #60	; 0x3c
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0f2      	beq.n	800ed72 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ed8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8e:	2b3f      	cmp	r3, #63	; 0x3f
 800ed90:	d801      	bhi.n	800ed96 <find_volume+0x20e>
 800ed92:	230d      	movs	r3, #13
 800ed94:	e272      	b.n	800f27c <find_volume+0x6f4>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ed96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed98:	333c      	adds	r3, #60	; 0x3c
 800ed9a:	3368      	adds	r3, #104	; 0x68
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fc fe43 	bl	800ba28 <ld_word>
 800eda2:	4603      	mov	r3, r0
 800eda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eda8:	d001      	beq.n	800edae <find_volume+0x226>
 800edaa:	230d      	movs	r3, #13
 800edac:	e266      	b.n	800f27c <find_volume+0x6f4>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800edae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800edb4:	461a      	mov	r2, r3
 800edb6:	2301      	movs	r3, #1
 800edb8:	4093      	lsls	r3, r2
 800edba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edbc:	8992      	ldrh	r2, [r2, #12]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d001      	beq.n	800edc6 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800edc2:	230d      	movs	r3, #13
 800edc4:	e25a      	b.n	800f27c <find_volume+0x6f4>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800edc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc8:	333c      	adds	r3, #60	; 0x3c
 800edca:	3348      	adds	r3, #72	; 0x48
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fc fe66 	bl	800ba9e <ld_qword>
 800edd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edd4:	461a      	mov	r2, r3
 800edd6:	f04f 0300 	mov.w	r3, #0
 800edda:	eb10 0802 	adds.w	r8, r0, r2
 800edde:	eb41 0903 	adc.w	r9, r1, r3
 800ede2:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ede6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edea:	2b01      	cmp	r3, #1
 800edec:	bf08      	it	eq
 800edee:	2a00      	cmpeq	r2, #0
 800edf0:	d301      	bcc.n	800edf6 <find_volume+0x26e>
 800edf2:	230d      	movs	r3, #13
 800edf4:	e242      	b.n	800f27c <find_volume+0x6f4>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800edf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf8:	333c      	adds	r3, #60	; 0x3c
 800edfa:	3354      	adds	r3, #84	; 0x54
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fc fe2b 	bl	800ba58 <ld_dword>
 800ee02:	4602      	mov	r2, r0
 800ee04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee06:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ee08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee0a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800ee0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee10:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ee12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee14:	789b      	ldrb	r3, [r3, #2]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d001      	beq.n	800ee1e <find_volume+0x296>
 800ee1a:	230d      	movs	r3, #13
 800ee1c:	e22e      	b.n	800f27c <find_volume+0x6f4>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ee1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee20:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800ee24:	461a      	mov	r2, r3
 800ee26:	2301      	movs	r3, #1
 800ee28:	4093      	lsls	r3, r2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800ee30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee32:	895b      	ldrh	r3, [r3, #10]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <find_volume+0x2b4>
 800ee38:	230d      	movs	r3, #13
 800ee3a:	e21f      	b.n	800f27c <find_volume+0x6f4>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800ee3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee3e:	333c      	adds	r3, #60	; 0x3c
 800ee40:	335c      	adds	r3, #92	; 0x5c
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fc fe08 	bl	800ba58 <ld_dword>
 800ee48:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	4a03      	ldr	r2, [pc, #12]	; (800ee5c <find_volume+0x2d4>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d906      	bls.n	800ee60 <find_volume+0x2d8>
 800ee52:	230d      	movs	r3, #13
 800ee54:	e212      	b.n	800f27c <find_volume+0x6f4>
 800ee56:	bf00      	nop
 800ee58:	200004d8 	.word	0x200004d8
 800ee5c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800ee60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee62:	1c9a      	adds	r2, r3, #2
 800ee64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee66:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800ee68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee6c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800ee6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee70:	333c      	adds	r3, #60	; 0x3c
 800ee72:	3358      	adds	r3, #88	; 0x58
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fc fdef 	bl	800ba58 <ld_dword>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee7e:	441a      	add	r2, r3
 800ee80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee82:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800ee84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee86:	333c      	adds	r3, #60	; 0x3c
 800ee88:	3350      	adds	r3, #80	; 0x50
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fc fde4 	bl	800ba58 <ld_dword>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee94:	441a      	add	r2, r3
 800ee96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee98:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ee9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f04f 0100 	mov.w	r1, #0
 800eea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea6:	895b      	ldrh	r3, [r3, #10]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	fb03 f302 	mul.w	r3, r3, r2
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	f04f 0300 	mov.w	r3, #0
 800eeb6:	1884      	adds	r4, r0, r2
 800eeb8:	eb41 0503 	adc.w	r5, r1, r3
 800eebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eec0:	42ab      	cmp	r3, r5
 800eec2:	bf08      	it	eq
 800eec4:	42a2      	cmpeq	r2, r4
 800eec6:	d201      	bcs.n	800eecc <find_volume+0x344>
 800eec8:	230d      	movs	r3, #13
 800eeca:	e1d7      	b.n	800f27c <find_volume+0x6f4>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800eecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eece:	333c      	adds	r3, #60	; 0x3c
 800eed0:	3360      	adds	r3, #96	; 0x60
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fc fdc0 	bl	800ba58 <ld_dword>
 800eed8:	4602      	mov	r2, r0
 800eeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eedc:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800eede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee2:	4619      	mov	r1, r3
 800eee4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eee6:	f7fd fa31 	bl	800c34c <clust2sect>
 800eeea:	4603      	mov	r3, r0
 800eeec:	4619      	mov	r1, r3
 800eeee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eef0:	f7fd f98e 	bl	800c210 <move_window>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <find_volume+0x376>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e1be      	b.n	800f27c <find_volume+0x6f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800eefe:	2300      	movs	r3, #0
 800ef00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef02:	e015      	b.n	800ef30 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ef04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef08:	4413      	add	r3, r2
 800ef0a:	333c      	adds	r3, #60	; 0x3c
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b81      	cmp	r3, #129	; 0x81
 800ef10:	d10b      	bne.n	800ef2a <find_volume+0x3a2>
 800ef12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef14:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ef18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef1a:	3314      	adds	r3, #20
 800ef1c:	4413      	add	r3, r2
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fc fd9a 	bl	800ba58 <ld_dword>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d009      	beq.n	800ef3e <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ef2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef2c:	3320      	adds	r3, #32
 800ef2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef32:	899b      	ldrh	r3, [r3, #12]
 800ef34:	461a      	mov	r2, r3
 800ef36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d3e3      	bcc.n	800ef04 <find_volume+0x37c>
 800ef3c:	e000      	b.n	800ef40 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ef3e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ef40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef42:	899b      	ldrh	r3, [r3, #12]
 800ef44:	461a      	mov	r2, r3
 800ef46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d101      	bne.n	800ef50 <find_volume+0x3c8>
 800ef4c:	230d      	movs	r3, #13
 800ef4e:	e195      	b.n	800f27c <find_volume+0x6f4>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef52:	f04f 32ff 	mov.w	r2, #4294967295
 800ef56:	61da      	str	r2, [r3, #28]
 800ef58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5a:	69da      	ldr	r2, [r3, #28]
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ef60:	2304      	movs	r3, #4
 800ef62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef66:	e177      	b.n	800f258 <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ef68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6a:	333c      	adds	r3, #60	; 0x3c
 800ef6c:	330b      	adds	r3, #11
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fc fd5a 	bl	800ba28 <ld_word>
 800ef74:	4603      	mov	r3, r0
 800ef76:	461a      	mov	r2, r3
 800ef78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef7a:	899b      	ldrh	r3, [r3, #12]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d001      	beq.n	800ef84 <find_volume+0x3fc>
 800ef80:	230d      	movs	r3, #13
 800ef82:	e17b      	b.n	800f27c <find_volume+0x6f4>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ef84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef86:	333c      	adds	r3, #60	; 0x3c
 800ef88:	3316      	adds	r3, #22
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fc fd4c 	bl	800ba28 <ld_word>
 800ef90:	4603      	mov	r3, r0
 800ef92:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d106      	bne.n	800efa8 <find_volume+0x420>
 800ef9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9c:	333c      	adds	r3, #60	; 0x3c
 800ef9e:	3324      	adds	r3, #36	; 0x24
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fc fd59 	bl	800ba58 <ld_dword>
 800efa6:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800efa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efac:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800efae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800efb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800efb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efba:	789b      	ldrb	r3, [r3, #2]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d005      	beq.n	800efcc <find_volume+0x444>
 800efc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc2:	789b      	ldrb	r3, [r3, #2]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d001      	beq.n	800efcc <find_volume+0x444>
 800efc8:	230d      	movs	r3, #13
 800efca:	e157      	b.n	800f27c <find_volume+0x6f4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800efcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efce:	789b      	ldrb	r3, [r3, #2]
 800efd0:	461a      	mov	r2, r3
 800efd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd4:	fb02 f303 	mul.w	r3, r2, r3
 800efd8:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800efda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efdc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800efe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe8:	895b      	ldrh	r3, [r3, #10]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d008      	beq.n	800f000 <find_volume+0x478>
 800efee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff0:	895b      	ldrh	r3, [r3, #10]
 800eff2:	461a      	mov	r2, r3
 800eff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff6:	895b      	ldrh	r3, [r3, #10]
 800eff8:	3b01      	subs	r3, #1
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <find_volume+0x47c>
 800f000:	230d      	movs	r3, #13
 800f002:	e13b      	b.n	800f27c <find_volume+0x6f4>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f006:	333c      	adds	r3, #60	; 0x3c
 800f008:	3311      	adds	r3, #17
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fc fd0c 	bl	800ba28 <ld_word>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f016:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f01a:	891b      	ldrh	r3, [r3, #8]
 800f01c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f01e:	8992      	ldrh	r2, [r2, #12]
 800f020:	0952      	lsrs	r2, r2, #5
 800f022:	b292      	uxth	r2, r2
 800f024:	fbb3 f1f2 	udiv	r1, r3, r2
 800f028:	fb02 f201 	mul.w	r2, r2, r1
 800f02c:	1a9b      	subs	r3, r3, r2
 800f02e:	b29b      	uxth	r3, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <find_volume+0x4b0>
 800f034:	230d      	movs	r3, #13
 800f036:	e121      	b.n	800f27c <find_volume+0x6f4>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f03a:	333c      	adds	r3, #60	; 0x3c
 800f03c:	3313      	adds	r3, #19
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fc fcf2 	bl	800ba28 <ld_word>
 800f044:	4603      	mov	r3, r0
 800f046:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <find_volume+0x4d4>
 800f04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f050:	333c      	adds	r3, #60	; 0x3c
 800f052:	3320      	adds	r3, #32
 800f054:	4618      	mov	r0, r3
 800f056:	f7fc fcff 	bl	800ba58 <ld_dword>
 800f05a:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f05e:	333c      	adds	r3, #60	; 0x3c
 800f060:	330e      	adds	r3, #14
 800f062:	4618      	mov	r0, r3
 800f064:	f7fc fce0 	bl	800ba28 <ld_word>
 800f068:	4603      	mov	r3, r0
 800f06a:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f06c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <find_volume+0x4ee>
 800f072:	230d      	movs	r3, #13
 800f074:	e102      	b.n	800f27c <find_volume+0x6f4>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f076:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f07a:	4413      	add	r3, r2
 800f07c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f07e:	8911      	ldrh	r1, [r2, #8]
 800f080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f082:	8992      	ldrh	r2, [r2, #12]
 800f084:	0952      	lsrs	r2, r2, #5
 800f086:	b292      	uxth	r2, r2
 800f088:	fbb1 f2f2 	udiv	r2, r1, r2
 800f08c:	b292      	uxth	r2, r2
 800f08e:	4413      	add	r3, r2
 800f090:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f096:	429a      	cmp	r2, r3
 800f098:	d201      	bcs.n	800f09e <find_volume+0x516>
 800f09a:	230d      	movs	r3, #13
 800f09c:	e0ee      	b.n	800f27c <find_volume+0x6f4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f09e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0a6:	8952      	ldrh	r2, [r2, #10]
 800f0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <find_volume+0x530>
 800f0b4:	230d      	movs	r3, #13
 800f0b6:	e0e1      	b.n	800f27c <find_volume+0x6f4>
		fmt = FS_FAT32;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d802      	bhi.n	800f0ce <find_volume+0x546>
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d802      	bhi.n	800f0de <find_volume+0x556>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	1c9a      	adds	r2, r3, #2
 800f0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e4:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0ea:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f0ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0f0:	441a      	add	r2, r3
 800f0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f0f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fa:	441a      	add	r2, r3
 800f0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0fe:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f104:	2b03      	cmp	r3, #3
 800f106:	d11e      	bne.n	800f146 <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10a:	333c      	adds	r3, #60	; 0x3c
 800f10c:	332a      	adds	r3, #42	; 0x2a
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fc fc8a 	bl	800ba28 <ld_word>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <find_volume+0x596>
 800f11a:	230d      	movs	r3, #13
 800f11c:	e0ae      	b.n	800f27c <find_volume+0x6f4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f120:	891b      	ldrh	r3, [r3, #8]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <find_volume+0x5a2>
 800f126:	230d      	movs	r3, #13
 800f128:	e0a8      	b.n	800f27c <find_volume+0x6f4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f12c:	333c      	adds	r3, #60	; 0x3c
 800f12e:	332c      	adds	r3, #44	; 0x2c
 800f130:	4618      	mov	r0, r3
 800f132:	f7fc fc91 	bl	800ba58 <ld_dword>
 800f136:	4602      	mov	r2, r0
 800f138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13e:	6a1b      	ldr	r3, [r3, #32]
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f144:	e01f      	b.n	800f186 <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f148:	891b      	ldrh	r3, [r3, #8]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <find_volume+0x5ca>
 800f14e:	230d      	movs	r3, #13
 800f150:	e094      	b.n	800f27c <find_volume+0x6f4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f158:	441a      	add	r2, r3
 800f15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f15c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f15e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f162:	2b02      	cmp	r3, #2
 800f164:	d103      	bne.n	800f16e <find_volume+0x5e6>
 800f166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	e00a      	b.n	800f184 <find_volume+0x5fc>
 800f16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f170:	6a1a      	ldr	r2, [r3, #32]
 800f172:	4613      	mov	r3, r2
 800f174:	005b      	lsls	r3, r3, #1
 800f176:	4413      	add	r3, r2
 800f178:	085a      	lsrs	r2, r3, #1
 800f17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f184:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f18c:	899b      	ldrh	r3, [r3, #12]
 800f18e:	4619      	mov	r1, r3
 800f190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f192:	440b      	add	r3, r1
 800f194:	3b01      	subs	r3, #1
 800f196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f198:	8989      	ldrh	r1, [r1, #12]
 800f19a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d201      	bcs.n	800f1a6 <find_volume+0x61e>
 800f1a2:	230d      	movs	r3, #13
 800f1a4:	e06a      	b.n	800f27c <find_volume+0x6f4>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ac:	61da      	str	r2, [r3, #28]
 800f1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b0:	69da      	ldr	r2, [r3, #28]
 800f1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b8:	2280      	movs	r2, #128	; 0x80
 800f1ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d149      	bne.n	800f258 <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c6:	333c      	adds	r3, #60	; 0x3c
 800f1c8:	3330      	adds	r3, #48	; 0x30
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fc fc2c 	bl	800ba28 <ld_word>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d140      	bne.n	800f258 <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f1d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1d8:	3301      	adds	r3, #1
 800f1da:	4619      	mov	r1, r3
 800f1dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f1de:	f7fd f817 	bl	800c210 <move_window>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d137      	bne.n	800f258 <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800f1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f0:	333c      	adds	r3, #60	; 0x3c
 800f1f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fc fc16 	bl	800ba28 <ld_word>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	461a      	mov	r2, r3
 800f200:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f204:	429a      	cmp	r2, r3
 800f206:	d127      	bne.n	800f258 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f20a:	333c      	adds	r3, #60	; 0x3c
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fc fc23 	bl	800ba58 <ld_dword>
 800f212:	4603      	mov	r3, r0
 800f214:	4a1c      	ldr	r2, [pc, #112]	; (800f288 <find_volume+0x700>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d11e      	bne.n	800f258 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f21c:	333c      	adds	r3, #60	; 0x3c
 800f21e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f222:	4618      	mov	r0, r3
 800f224:	f7fc fc18 	bl	800ba58 <ld_dword>
 800f228:	4603      	mov	r3, r0
 800f22a:	4a18      	ldr	r2, [pc, #96]	; (800f28c <find_volume+0x704>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d113      	bne.n	800f258 <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f232:	333c      	adds	r3, #60	; 0x3c
 800f234:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fc fc0d 	bl	800ba58 <ld_dword>
 800f23e:	4602      	mov	r2, r0
 800f240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f242:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f246:	333c      	adds	r3, #60	; 0x3c
 800f248:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fc fc03 	bl	800ba58 <ld_dword>
 800f252:	4602      	mov	r2, r0
 800f254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f256:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f25a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f25e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f260:	4b0b      	ldr	r3, [pc, #44]	; (800f290 <find_volume+0x708>)
 800f262:	881b      	ldrh	r3, [r3, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	b29a      	uxth	r2, r3
 800f268:	4b09      	ldr	r3, [pc, #36]	; (800f290 <find_volume+0x708>)
 800f26a:	801a      	strh	r2, [r3, #0]
 800f26c:	4b08      	ldr	r3, [pc, #32]	; (800f290 <find_volume+0x708>)
 800f26e:	881a      	ldrh	r2, [r3, #0]
 800f270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f272:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f274:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f276:	f7fc ff63 	bl	800c140 <clear_lock>
#endif
	return FR_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3760      	adds	r7, #96	; 0x60
 800f280:	46bd      	mov	sp, r7
 800f282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f286:	bf00      	nop
 800f288:	41615252 	.word	0x41615252
 800f28c:	61417272 	.word	0x61417272
 800f290:	200004dc 	.word	0x200004dc

0800f294 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f29e:	2309      	movs	r3, #9
 800f2a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d01c      	beq.n	800f2e2 <validate+0x4e>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d018      	beq.n	800f2e2 <validate+0x4e>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d013      	beq.n	800f2e2 <validate+0x4e>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	889a      	ldrh	r2, [r3, #4]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	88db      	ldrh	r3, [r3, #6]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d10c      	bne.n	800f2e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	785b      	ldrb	r3, [r3, #1]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fb0c 	bl	800b8ec <disk_status>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <validate+0x4e>
			res = FR_OK;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <validate+0x5a>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	e000      	b.n	800f2f0 <validate+0x5c>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	6013      	str	r3, [r2, #0]
	return res;
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	4613      	mov	r3, r2
 800f30c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f312:	f107 0310 	add.w	r3, r7, #16
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fb8e 	bl	800ea38 <get_ldnumber>
 800f31c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	2b00      	cmp	r3, #0
 800f322:	da01      	bge.n	800f328 <f_mount+0x28>
 800f324:	230b      	movs	r3, #11
 800f326:	e02b      	b.n	800f380 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f328:	4a17      	ldr	r2, [pc, #92]	; (800f388 <f_mount+0x88>)
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f330:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f338:	69b8      	ldr	r0, [r7, #24]
 800f33a:	f7fc ff01 	bl	800c140 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	2200      	movs	r2, #0
 800f342:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	490d      	ldr	r1, [pc, #52]	; (800f388 <f_mount+0x88>)
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d002      	beq.n	800f366 <f_mount+0x66>
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d001      	beq.n	800f36a <f_mount+0x6a>
 800f366:	2300      	movs	r3, #0
 800f368:	e00a      	b.n	800f380 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f36a:	f107 010c 	add.w	r1, r7, #12
 800f36e:	f107 0308 	add.w	r3, r7, #8
 800f372:	2200      	movs	r2, #0
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff fc07 	bl	800eb88 <find_volume>
 800f37a:	4603      	mov	r3, r0
 800f37c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3720      	adds	r7, #32
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	200004d8 	.word	0x200004d8

0800f38c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f38c:	b5b0      	push	{r4, r5, r7, lr}
 800f38e:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 800f392:	af00      	add	r7, sp, #0
 800f394:	f107 030c 	add.w	r3, r7, #12
 800f398:	6018      	str	r0, [r3, #0]
 800f39a:	f107 0308 	add.w	r3, r7, #8
 800f39e:	6019      	str	r1, [r3, #0]
 800f3a0:	1dfb      	adds	r3, r7, #7
 800f3a2:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f3a4:	f107 030c 	add.w	r3, r7, #12
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <f_open+0x26>
 800f3ae:	2309      	movs	r3, #9
 800f3b0:	e361      	b.n	800fa76 <f_open+0x6ea>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f3b2:	1dfb      	adds	r3, r7, #7
 800f3b4:	1dfa      	adds	r2, r7, #7
 800f3b6:	7812      	ldrb	r2, [r2, #0]
 800f3b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f3bc:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f3be:	1dfb      	adds	r3, r7, #7
 800f3c0:	781a      	ldrb	r2, [r3, #0]
 800f3c2:	f207 4174 	addw	r1, r7, #1140	; 0x474
 800f3c6:	f107 0308 	add.w	r3, r7, #8
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fbdc 	bl	800eb88 <find_volume>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res == FR_OK) {
 800f3d6:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f040 8340 	bne.w	800fa60 <f_open+0x6d4>
		dj.obj.fs = fs;
 800f3e0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f3e4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 800f3e8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f3ec:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800f3f0:	611a      	str	r2, [r3, #16]
 800f3f2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f3f6:	f107 0214 	add.w	r2, r7, #20
 800f3fa:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f3fc:	f107 0308 	add.w	r3, r7, #8
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff fa67 	bl	800e8dc <follow_path>
 800f40e:	4603      	mov	r3, r0
 800f410:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f414:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d11b      	bne.n	800f454 <f_open+0xc8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f41c:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 800f420:	b25b      	sxtb	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	da03      	bge.n	800f42e <f_open+0xa2>
				res = FR_INVALID_NAME;
 800f426:	2306      	movs	r3, #6
 800f428:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800f42c:	e012      	b.n	800f454 <f_open+0xc8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f42e:	1dfb      	adds	r3, r7, #7
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f023 0301 	bic.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	bf14      	ite	ne
 800f43a:	2301      	movne	r3, #1
 800f43c:	2300      	moveq	r3, #0
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	461a      	mov	r2, r3
 800f442:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f446:	4611      	mov	r1, r2
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fc fd31 	bl	800beb0 <chk_lock>
 800f44e:	4603      	mov	r3, r0
 800f450:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f454:	1dfb      	adds	r3, r7, #7
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 031c 	and.w	r3, r3, #28
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 8148 	beq.w	800f6f2 <f_open+0x366>
			if (res != FR_OK) {					/* No file, create new */
 800f462:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f466:	2b00      	cmp	r3, #0
 800f468:	d019      	beq.n	800f49e <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f46a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f46e:	2b04      	cmp	r3, #4
 800f470:	d10e      	bne.n	800f490 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f472:	f7fc fd79 	bl	800bf68 <enq_lock>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d006      	beq.n	800f48a <f_open+0xfe>
 800f47c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe fde1 	bl	800e048 <dir_register>
 800f486:	4603      	mov	r3, r0
 800f488:	e000      	b.n	800f48c <f_open+0x100>
 800f48a:	2312      	movs	r3, #18
 800f48c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f490:	1dfb      	adds	r3, r7, #7
 800f492:	1dfa      	adds	r2, r7, #7
 800f494:	7812      	ldrb	r2, [r2, #0]
 800f496:	f042 0208 	orr.w	r2, r2, #8
 800f49a:	701a      	strb	r2, [r3, #0]
 800f49c:	e012      	b.n	800f4c4 <f_open+0x138>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f49e:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800f4a2:	f003 0311 	and.w	r3, r3, #17
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d003      	beq.n	800f4b2 <f_open+0x126>
					res = FR_DENIED;
 800f4aa:	2307      	movs	r3, #7
 800f4ac:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800f4b0:	e008      	b.n	800f4c4 <f_open+0x138>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f4b2:	1dfb      	adds	r3, r7, #7
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	f003 0304 	and.w	r3, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <f_open+0x138>
 800f4be:	2308      	movs	r3, #8
 800f4c0:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f4c4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f040 812f 	bne.w	800f72c <f_open+0x3a0>
 800f4ce:	1dfb      	adds	r3, r7, #7
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	f003 0308 	and.w	r3, r3, #8
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 8128 	beq.w	800f72c <f_open+0x3a0>
				dw = GET_FATTIME();
 800f4dc:	f7f9 fa0a 	bl	80088f4 <get_fattime>
 800f4e0:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f4e4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	f040 80a6 	bne.w	800f63c <f_open+0x2b0>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f4f0:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800f4f4:	f107 030c 	add.w	r3, r7, #12
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f4fc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	3334      	adds	r3, #52	; 0x34
 800f504:	4618      	mov	r0, r3
 800f506:	f7fc faa7 	bl	800ba58 <ld_dword>
 800f50a:	4602      	mov	r2, r0
 800f50c:	f107 030c 	add.w	r3, r7, #12
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f514:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f518:	695b      	ldr	r3, [r3, #20]
 800f51a:	3338      	adds	r3, #56	; 0x38
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fc fabe 	bl	800ba9e <ld_qword>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	f107 010c 	add.w	r1, r7, #12
 800f52a:	6809      	ldr	r1, [r1, #0]
 800f52c:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f530:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	3321      	adds	r3, #33	; 0x21
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	f003 0302 	and.w	r3, r3, #2
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	f107 030c 	add.w	r3, r7, #12
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f548:	f107 030c 	add.w	r3, r7, #12
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2200      	movs	r2, #0
 800f550:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f552:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f556:	695b      	ldr	r3, [r3, #20]
 800f558:	3308      	adds	r3, #8
 800f55a:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fc fb73 	bl	800bc4a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f564:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f568:	695b      	ldr	r3, [r3, #20]
 800f56a:	3314      	adds	r3, #20
 800f56c:	2200      	movs	r2, #0
 800f56e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f570:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	330c      	adds	r3, #12
 800f578:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fc fb64 	bl	800bc4a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f582:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f586:	695b      	ldr	r3, [r3, #20]
 800f588:	3315      	adds	r3, #21
 800f58a:	2200      	movs	r2, #0
 800f58c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f58e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	3304      	adds	r3, #4
 800f596:	2220      	movs	r2, #32
 800f598:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f59a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f59e:	695b      	ldr	r3, [r3, #20]
 800f5a0:	3334      	adds	r3, #52	; 0x34
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fc fb50 	bl	800bc4a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f5aa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f5ae:	695b      	ldr	r3, [r3, #20]
 800f5b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5b4:	f04f 0200 	mov.w	r2, #0
 800f5b8:	f04f 0300 	mov.w	r3, #0
 800f5bc:	4608      	mov	r0, r1
 800f5be:	f7fc fb70 	bl	800bca2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f5c2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f5c6:	695b      	ldr	r3, [r3, #20]
 800f5c8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f5cc:	f04f 0200 	mov.w	r2, #0
 800f5d0:	f04f 0300 	mov.w	r3, #0
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	f7fc fb64 	bl	800bca2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f5da:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f5de:	695b      	ldr	r3, [r3, #20]
 800f5e0:	3321      	adds	r3, #33	; 0x21
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f5e6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fe fa79 	bl	800dae2 <store_xdir>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f5f6:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f040 8096 	bne.w	800f72c <f_open+0x3a0>
 800f600:	f107 030c 	add.w	r3, r7, #12
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f000 808f 	beq.w	800f72c <f_open+0x3a0>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f60e:	f107 030c 	add.w	r3, r7, #12
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	f107 030c 	add.w	r3, r7, #12
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	2200      	movs	r2, #0
 800f61e:	4619      	mov	r1, r3
 800f620:	f7fd fa82 	bl	800cb28 <remove_chain>
 800f624:	4603      	mov	r3, r0
 800f626:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f62a:	f107 030c 	add.w	r3, r7, #12
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	689a      	ldr	r2, [r3, #8]
 800f632:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f636:	3a01      	subs	r2, #1
 800f638:	619a      	str	r2, [r3, #24]
 800f63a:	e077      	b.n	800f72c <f_open+0x3a0>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f63c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f640:	330e      	adds	r3, #14
 800f642:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800f646:	4618      	mov	r0, r3
 800f648:	f7fc faff 	bl	800bc4a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f64c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f650:	3316      	adds	r3, #22
 800f652:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800f656:	4618      	mov	r0, r3
 800f658:	f7fc faf7 	bl	800bc4a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f65c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f660:	330b      	adds	r3, #11
 800f662:	2220      	movs	r2, #32
 800f664:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f666:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f66a:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800f66e:	4611      	mov	r1, r2
 800f670:	4618      	mov	r0, r3
 800f672:	f7fd fe28 	bl	800d2c6 <ld_clust>
 800f676:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f67a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f67e:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 800f682:	2200      	movs	r2, #0
 800f684:	4618      	mov	r0, r3
 800f686:	f7fd fe3d 	bl	800d304 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f68a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f68e:	331c      	adds	r3, #28
 800f690:	2100      	movs	r1, #0
 800f692:	4618      	mov	r0, r3
 800f694:	f7fc fad9 	bl	800bc4a <st_dword>
					fs->wflag = 1;
 800f698:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f69c:	2201      	movs	r2, #1
 800f69e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f6a0:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d041      	beq.n	800f72c <f_open+0x3a0>
						dw = fs->winsect;
 800f6a8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ae:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
						res = remove_chain(&dj.obj, cl, 0);
 800f6b2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fd fa33 	bl	800cb28 <remove_chain>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						if (res == FR_OK) {
 800f6c8:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d12d      	bne.n	800f72c <f_open+0x3a0>
							res = move_window(fs, dw);
 800f6d0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f6d4:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fc fd99 	bl	800c210 <move_window>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f6e4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f6e8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800f6ec:	3a01      	subs	r2, #1
 800f6ee:	619a      	str	r2, [r3, #24]
 800f6f0:	e01c      	b.n	800f72c <f_open+0x3a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f6f2:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d118      	bne.n	800f72c <f_open+0x3a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f6fa:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800f6fe:	f003 0310 	and.w	r3, r3, #16
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <f_open+0x382>
					res = FR_NO_FILE;
 800f706:	2304      	movs	r3, #4
 800f708:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800f70c:	e00e      	b.n	800f72c <f_open+0x3a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f70e:	1dfb      	adds	r3, r7, #7
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 0302 	and.w	r3, r3, #2
 800f716:	2b00      	cmp	r3, #0
 800f718:	d008      	beq.n	800f72c <f_open+0x3a0>
 800f71a:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800f71e:	f003 0301 	and.w	r3, r3, #1
 800f722:	2b00      	cmp	r3, #0
 800f724:	d002      	beq.n	800f72c <f_open+0x3a0>
						res = FR_DENIED;
 800f726:	2307      	movs	r3, #7
 800f728:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					}
				}
			}
		}
		if (res == FR_OK) {
 800f72c:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f730:	2b00      	cmp	r3, #0
 800f732:	d136      	bne.n	800f7a2 <f_open+0x416>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f734:	1dfb      	adds	r3, r7, #7
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	f003 0308 	and.w	r3, r3, #8
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d005      	beq.n	800f74c <f_open+0x3c0>
				mode |= FA_MODIFIED;
 800f740:	1dfb      	adds	r3, r7, #7
 800f742:	1dfa      	adds	r2, r7, #7
 800f744:	7812      	ldrb	r2, [r2, #0]
 800f746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f74a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f74c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f752:	f107 030c 	add.w	r3, r7, #12
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800f75a:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800f75e:	f107 030c 	add.w	r3, r7, #12
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f766:	1dfb      	adds	r3, r7, #7
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	f023 0301 	bic.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bf14      	ite	ne
 800f772:	2301      	movne	r3, #1
 800f774:	2300      	moveq	r3, #0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	461a      	mov	r2, r3
 800f77a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f77e:	4611      	mov	r1, r2
 800f780:	4618      	mov	r0, r3
 800f782:	f7fc fc13 	bl	800bfac <inc_lock>
 800f786:	4602      	mov	r2, r0
 800f788:	f107 030c 	add.w	r3, r7, #12
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f790:	f107 030c 	add.w	r3, r7, #12
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d102      	bne.n	800f7a2 <f_open+0x416>
 800f79c:	2302      	movs	r3, #2
 800f79e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f7a2:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f040 815a 	bne.w	800fa60 <f_open+0x6d4>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f7ac:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d140      	bne.n	800f838 <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f7b6:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800f7ba:	f107 030c 	add.w	r3, r7, #12
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f7c2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	4613      	mov	r3, r2
 800f7cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f7d0:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 800f7d4:	431a      	orrs	r2, r3
 800f7d6:	f107 030c 	add.w	r3, r7, #12
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f7de:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 800f7e2:	f107 030c 	add.w	r3, r7, #12
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f7ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f7ee:	695b      	ldr	r3, [r3, #20]
 800f7f0:	3334      	adds	r3, #52	; 0x34
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fc f930 	bl	800ba58 <ld_dword>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	f107 030c 	add.w	r3, r7, #12
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f802:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f806:	695b      	ldr	r3, [r3, #20]
 800f808:	3338      	adds	r3, #56	; 0x38
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fc f947 	bl	800ba9e <ld_qword>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	f107 010c 	add.w	r1, r7, #12
 800f818:	6809      	ldr	r1, [r1, #0]
 800f81a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f81e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	3321      	adds	r3, #33	; 0x21
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	b2da      	uxtb	r2, r3
 800f82e:	f107 030c 	add.w	r3, r7, #12
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	71da      	strb	r2, [r3, #7]
 800f836:	e01b      	b.n	800f870 <f_open+0x4e4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f838:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f83c:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7fd fd3f 	bl	800d2c6 <ld_clust>
 800f848:	4602      	mov	r2, r0
 800f84a:	f107 030c 	add.w	r3, r7, #12
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f852:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f856:	331c      	adds	r3, #28
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fc f8fd 	bl	800ba58 <ld_dword>
 800f85e:	4603      	mov	r3, r0
 800f860:	461a      	mov	r2, r3
 800f862:	f04f 0300 	mov.w	r3, #0
 800f866:	f107 010c 	add.w	r1, r7, #12
 800f86a:	6809      	ldr	r1, [r1, #0]
 800f86c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f870:	f107 030c 	add.w	r3, r7, #12
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2200      	movs	r2, #0
 800f878:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f87a:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800f87e:	f107 030c 	add.w	r3, r7, #12
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f886:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f88a:	88da      	ldrh	r2, [r3, #6]
 800f88c:	f107 030c 	add.w	r3, r7, #12
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f894:	f107 030c 	add.w	r3, r7, #12
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	1dfa      	adds	r2, r7, #7
 800f89c:	7812      	ldrb	r2, [r2, #0]
 800f89e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800f8a2:	f107 030c 	add.w	r3, r7, #12
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f8ae:	f107 030c 	add.w	r3, r7, #12
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f8b8:	f107 030c 	add.w	r3, r7, #12
 800f8bc:	6819      	ldr	r1, [r3, #0]
 800f8be:	f04f 0200 	mov.w	r2, #0
 800f8c2:	f04f 0300 	mov.w	r3, #0
 800f8c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f8ca:	f107 030c 	add.w	r3, r7, #12
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3354      	adds	r3, #84	; 0x54
 800f8d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fc fa8b 	bl	800bdf4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f8de:	1dfb      	adds	r3, r7, #7
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	f003 0320 	and.w	r3, r3, #32
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f000 80ba 	beq.w	800fa60 <f_open+0x6d4>
 800f8ec:	f107 030c 	add.w	r3, r7, #12
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	f000 80b2 	beq.w	800fa60 <f_open+0x6d4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f8fc:	f107 030c 	add.w	r3, r7, #12
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f906:	f107 010c 	add.w	r1, r7, #12
 800f90a:	6809      	ldr	r1, [r1, #0]
 800f90c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f910:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f914:	895b      	ldrh	r3, [r3, #10]
 800f916:	461a      	mov	r2, r3
 800f918:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f91c:	899b      	ldrh	r3, [r3, #12]
 800f91e:	fb03 f302 	mul.w	r3, r3, r2
 800f922:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f926:	f107 030c 	add.w	r3, r7, #12
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f932:	f107 030c 	add.w	r3, r7, #12
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f93c:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800f940:	e9c1 2300 	strd	r2, r3, [r1]
 800f944:	e028      	b.n	800f998 <f_open+0x60c>
					clst = get_fat(&fp->obj, clst);
 800f946:	f107 030c 	add.w	r3, r7, #12
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800f950:	4618      	mov	r0, r3
 800f952:	f7fc fd1b 	bl	800c38c <get_fat>
 800f956:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
					if (clst <= 1) res = FR_INT_ERR;
 800f95a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d802      	bhi.n	800f968 <f_open+0x5dc>
 800f962:	2302      	movs	r3, #2
 800f964:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f968:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800f96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f970:	d102      	bne.n	800f978 <f_open+0x5ec>
 800f972:	2301      	movs	r3, #1
 800f974:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f978:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800f97c:	461a      	mov	r2, r3
 800f97e:	f04f 0300 	mov.w	r3, #0
 800f982:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800f986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f98a:	1a84      	subs	r4, r0, r2
 800f98c:	eb61 0503 	sbc.w	r5, r1, r3
 800f990:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f994:	e9c3 4500 	strd	r4, r5, [r3]
 800f998:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d10c      	bne.n	800f9ba <f_open+0x62e>
 800f9a0:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f04f 0100 	mov.w	r1, #0
 800f9aa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	4299      	cmp	r1, r3
 800f9b4:	bf08      	it	eq
 800f9b6:	4290      	cmpeq	r0, r2
 800f9b8:	d3c5      	bcc.n	800f946 <f_open+0x5ba>
				}
				fp->clust = clst;
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 800f9c4:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f9c6:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d148      	bne.n	800fa60 <f_open+0x6d4>
 800f9ce:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f9d2:	899b      	ldrh	r3, [r3, #12]
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	f04f 0300 	mov.w	r3, #0
 800f9da:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800f9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9e2:	f7f0 fc0b 	bl	80001fc <__aeabi_uldivmod>
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	d03a      	beq.n	800fa60 <f_open+0x6d4>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f9ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800f9ee:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fc fcaa 	bl	800c34c <clust2sect>
 800f9f8:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 800f9fc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <f_open+0x680>
						res = FR_INT_ERR;
 800fa04:	2302      	movs	r3, #2
 800fa06:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800fa0a:	e029      	b.n	800fa60 <f_open+0x6d4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa0c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	f04f 0300 	mov.w	r3, #0
 800fa18:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800fa1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa20:	f7f0 fbec 	bl	80001fc <__aeabi_uldivmod>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800fa2c:	441a      	add	r2, r3
 800fa2e:	f107 030c 	add.w	r3, r7, #12
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa36:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fa3a:	7858      	ldrb	r0, [r3, #1]
 800fa3c:	f107 030c 	add.w	r3, r7, #12
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fa46:	f107 030c 	add.w	r3, r7, #12
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa4e:	2301      	movs	r3, #1
 800fa50:	f7fb ff8c 	bl	800b96c <disk_read>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <f_open+0x6d4>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa60:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d004      	beq.n	800fa72 <f_open+0x6e6>
 800fa68:	f107 030c 	add.w	r3, r7, #12
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa72:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bdb0      	pop	{r4, r5, r7, pc}

0800fa80 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fa80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa84:	b091      	sub	sp, #68	; 0x44
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	60f8      	str	r0, [r7, #12]
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
 800fa8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f107 0214 	add.w	r2, r7, #20
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff fbf6 	bl	800f294 <validate>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800faae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d108      	bne.n	800fac8 <f_read+0x48>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fabc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <f_read+0x4e>
 800fac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800facc:	e15f      	b.n	800fd8e <f_read+0x30e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fad4:	f003 0301 	and.w	r3, r3, #1
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <f_read+0x60>
 800fadc:	2307      	movs	r3, #7
 800fade:	e156      	b.n	800fd8e <f_read+0x30e>
	remain = fp->obj.objsize - fp->fptr;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800faec:	ebb0 0802 	subs.w	r8, r0, r2
 800faf0:	eb61 0903 	sbc.w	r9, r1, r3
 800faf4:	e9c7 8908 	strd	r8, r9, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f04f 0300 	mov.w	r3, #0
 800fb00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fb04:	4299      	cmp	r1, r3
 800fb06:	bf08      	it	eq
 800fb08:	4290      	cmpeq	r0, r2
 800fb0a:	f080 813b 	bcs.w	800fd84 <f_read+0x304>
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fb12:	e137      	b.n	800fd84 <f_read+0x304>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	f04f 0300 	mov.w	r3, #0
 800fb24:	f7f0 fb6a 	bl	80001fc <__aeabi_uldivmod>
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	f040 80e6 	bne.w	800fcfa <f_read+0x27a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	f04f 0300 	mov.w	r3, #0
 800fb3e:	f7f0 fb5d 	bl	80001fc <__aeabi_uldivmod>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	895b      	ldrh	r3, [r3, #10]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d132      	bne.n	800fbbc <f_read+0x13c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	d103      	bne.n	800fb68 <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb66:	e013      	b.n	800fb90 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d007      	beq.n	800fb80 <f_read+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	f7fd f98b 	bl	800ce92 <clmt_clust>
 800fb7c:	63b8      	str	r0, [r7, #56]	; 0x38
 800fb7e:	e007      	b.n	800fb90 <f_read+0x110>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb86:	4619      	mov	r1, r3
 800fb88:	4610      	mov	r0, r2
 800fb8a:	f7fc fbff 	bl	800c38c <get_fat>
 800fb8e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d805      	bhi.n	800fba2 <f_read+0x122>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2202      	movs	r2, #2
 800fb9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fb9e:	2302      	movs	r3, #2
 800fba0:	e0f5      	b.n	800fd8e <f_read+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba8:	d105      	bne.n	800fbb6 <f_read+0x136>
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e0eb      	b.n	800fd8e <f_read+0x30e>
				fp->clust = clst;				/* Update current cluster */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbba:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	4610      	mov	r0, r2
 800fbc6:	f7fc fbc1 	bl	800c34c <clust2sect>
 800fbca:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d105      	bne.n	800fbde <f_read+0x15e>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2202      	movs	r2, #2
 800fbd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fbda:	2302      	movs	r3, #2
 800fbdc:	e0d7      	b.n	800fd8e <f_read+0x30e>
			sect += csect;
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	899b      	ldrh	r3, [r3, #12]
 800fbea:	461a      	mov	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbf2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d043      	beq.n	800fc82 <f_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fbfa:	69fa      	ldr	r2, [r7, #28]
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	4413      	add	r3, r2
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	8952      	ldrh	r2, [r2, #10]
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d905      	bls.n	800fc14 <f_read+0x194>
					cc = fs->csize - csect;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	895b      	ldrh	r3, [r3, #10]
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	7858      	ldrb	r0, [r3, #1]
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	69ba      	ldr	r2, [r7, #24]
 800fc1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc1e:	f7fb fea5 	bl	800b96c <disk_read>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d005      	beq.n	800fc34 <f_read+0x1b4>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fc30:	2301      	movs	r3, #1
 800fc32:	e0ac      	b.n	800fd8e <f_read+0x30e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc3a:	b25b      	sxtb	r3, r3
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	da18      	bge.n	800fc72 <f_read+0x1f2>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d911      	bls.n	800fc72 <f_read+0x1f2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	8992      	ldrh	r2, [r2, #12]
 800fc5a:	fb02 f303 	mul.w	r3, r2, r3
 800fc5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc60:	18d0      	adds	r0, r2, r3
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	f7fc f8a0 	bl	800bdb2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	899b      	ldrh	r3, [r3, #12]
 800fc76:	461a      	mov	r2, r3
 800fc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7a:	fb02 f303 	mul.w	r3, r2, r3
 800fc7e:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800fc80:	e065      	b.n	800fd4e <f_read+0x2ce>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d033      	beq.n	800fcf4 <f_read+0x274>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc92:	b25b      	sxtb	r3, r3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	da1b      	bge.n	800fcd0 <f_read+0x250>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	7858      	ldrb	r0, [r3, #1]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fca6:	2301      	movs	r3, #1
 800fca8:	f7fb fe80 	bl	800b9ac <disk_write>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d005      	beq.n	800fcbe <f_read+0x23e>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e067      	b.n	800fd8e <f_read+0x30e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	7858      	ldrb	r0, [r3, #1]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fcda:	2301      	movs	r3, #1
 800fcdc:	69ba      	ldr	r2, [r7, #24]
 800fcde:	f7fb fe45 	bl	800b96c <disk_read>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d005      	beq.n	800fcf4 <f_read+0x274>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e04c      	b.n	800fd8e <f_read+0x30e>
			}
#endif
			fp->sect = sect;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	69ba      	ldr	r2, [r7, #24]
 800fcf8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	899b      	ldrh	r3, [r3, #12]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd06:	4613      	mov	r3, r2
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	8992      	ldrh	r2, [r2, #12]
 800fd0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd10:	fb02 f201 	mul.w	r2, r2, r1
 800fd14:	1a9b      	subs	r3, r3, r2
 800fd16:	1ac3      	subs	r3, r0, r3
 800fd18:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d901      	bls.n	800fd26 <f_read+0x2a6>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	f04f 0300 	mov.w	r3, #0
 800fd3c:	f7f0 fa5e 	bl	80001fc <__aeabi_uldivmod>
 800fd40:	4613      	mov	r3, r2
 800fd42:	4433      	add	r3, r6
 800fd44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd46:	4619      	mov	r1, r3
 800fd48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd4a:	f7fc f832 	bl	800bdb2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fd4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd52:	4413      	add	r3, r2
 800fd54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f04f 0300 	mov.w	r3, #0
 800fd64:	1884      	adds	r4, r0, r2
 800fd66:	eb41 0503 	adc.w	r5, r1, r3
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd76:	441a      	add	r2, r3
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	601a      	str	r2, [r3, #0]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f47f aec4 	bne.w	800fb14 <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3744      	adds	r7, #68	; 0x44
 800fd92:	46bd      	mov	sp, r7
 800fd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fd98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	f5ad 6d99 	sub.w	sp, sp, #1224	; 0x4c8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	1d3b      	adds	r3, r7, #4
 800fda2:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fda4:	1d3b      	adds	r3, r7, #4
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff fa70 	bl	800f294 <validate>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
	if (res == FR_OK) {
 800fdba:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f040 813f 	bne.w	8010042 <f_sync+0x2aa>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fdc4:	1d3b      	adds	r3, r7, #4
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 8136 	beq.w	8010042 <f_sync+0x2aa>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fdd6:	1d3b      	adds	r3, r7, #4
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdde:	b25b      	sxtb	r3, r3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	da1c      	bge.n	800fe1e <f_sync+0x86>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fde4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fde8:	7858      	ldrb	r0, [r3, #1]
 800fdea:	1d3b      	adds	r3, r7, #4
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fdf2:	1d3b      	adds	r3, r7, #4
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	f7fb fdd7 	bl	800b9ac <disk_write>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <f_sync+0x70>
 800fe04:	2301      	movs	r3, #1
 800fe06:	e11e      	b.n	8010046 <f_sync+0x2ae>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe08:	1d3b      	adds	r3, r7, #4
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	1d3b      	adds	r3, r7, #4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fe1e:	f7f8 fd69 	bl	80088f4 <get_fattime>
 800fe22:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fe26:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b04      	cmp	r3, #4
 800fe2e:	f040 80ab 	bne.w	800ff88 <f_sync+0x1f0>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800fe32:	1d3b      	adds	r3, r7, #4
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fc fe16 	bl	800ca68 <fill_first_frag>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 800fe42:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d10c      	bne.n	800fe64 <f_sync+0xcc>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fe4a:	1d3b      	adds	r3, r7, #4
 800fe4c:	6818      	ldr	r0, [r3, #0]
 800fe4e:	1d3b      	adds	r3, r7, #4
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe54:	f04f 32ff 	mov.w	r2, #4294967295
 800fe58:	4619      	mov	r1, r3
 800fe5a:	f7fc fe34 	bl	800cac6 <fill_last_frag>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				}
				if (res == FR_OK) {
 800fe64:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f040 80ea 	bne.w	8010042 <f_sync+0x2aa>
					INIT_NAMBUF(fs);
 800fe6e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fe72:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800fe76:	611a      	str	r2, [r3, #16]
 800fe78:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fe7c:	f107 0208 	add.w	r2, r7, #8
 800fe80:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800fe82:	1d3b      	adds	r3, r7, #4
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fd fded 	bl	800da6c <load_obj_dir>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					if (res == FR_OK) {
 800fe98:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f040 80d0 	bne.w	8010042 <f_sync+0x2aa>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800fea2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fea6:	695b      	ldr	r3, [r3, #20]
 800fea8:	3304      	adds	r3, #4
 800feaa:	781a      	ldrb	r2, [r3, #0]
 800feac:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800feb0:	695b      	ldr	r3, [r3, #20]
 800feb2:	3304      	adds	r3, #4
 800feb4:	f042 0220 	orr.w	r2, r2, #32
 800feb8:	b2d2      	uxtb	r2, r2
 800feba:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800febc:	1d3b      	adds	r3, r7, #4
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	79da      	ldrb	r2, [r3, #7]
 800fec2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fec6:	695b      	ldr	r3, [r3, #20]
 800fec8:	3321      	adds	r3, #33	; 0x21
 800feca:	f042 0201 	orr.w	r2, r2, #1
 800fece:	b2d2      	uxtb	r2, r2
 800fed0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800fed2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fedc:	1d3b      	adds	r3, r7, #4
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	4619      	mov	r1, r3
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7fb feb0 	bl	800bc4a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800feea:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800feee:	695b      	ldr	r3, [r3, #20]
 800fef0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fef4:	1d3b      	adds	r3, r7, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fefc:	4608      	mov	r0, r1
 800fefe:	f7fb fed0 	bl	800bca2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800ff02:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ff0c:	1d3b      	adds	r3, r7, #4
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff14:	4608      	mov	r0, r1
 800ff16:	f7fb fec4 	bl	800bca2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ff1a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ff1e:	695b      	ldr	r3, [r3, #20]
 800ff20:	330c      	adds	r3, #12
 800ff22:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb fe8f 	bl	800bc4a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ff2c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ff30:	695b      	ldr	r3, [r3, #20]
 800ff32:	3315      	adds	r3, #21
 800ff34:	2200      	movs	r2, #0
 800ff36:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ff38:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ff3c:	695b      	ldr	r3, [r3, #20]
 800ff3e:	3310      	adds	r3, #16
 800ff40:	2100      	movs	r1, #0
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb fe81 	bl	800bc4a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ff48:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd fdc8 	bl	800dae2 <store_xdir>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
						if (res == FR_OK) {
 800ff58:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d170      	bne.n	8010042 <f_sync+0x2aa>
							res = sync_fs(fs);
 800ff60:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fc f981 	bl	800c26c <sync_fs>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ff70:	1d3b      	adds	r3, r7, #4
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	1d3b      	adds	r3, r7, #4
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff86:	e05c      	b.n	8010042 <f_sync+0x2aa>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff88:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800ff8c:	1d3b      	adds	r3, r7, #4
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff92:	4619      	mov	r1, r3
 800ff94:	4610      	mov	r0, r2
 800ff96:	f7fc f93b 	bl	800c210 <move_window>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 800ffa0:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d14c      	bne.n	8010042 <f_sync+0x2aa>
					dir = fp->dir_ptr;
 800ffa8:	1d3b      	adds	r3, r7, #4
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffae:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffb2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ffb6:	330b      	adds	r3, #11
 800ffb8:	781a      	ldrb	r2, [r3, #0]
 800ffba:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ffbe:	330b      	adds	r3, #11
 800ffc0:	f042 0220 	orr.w	r2, r2, #32
 800ffc4:	b2d2      	uxtb	r2, r2
 800ffc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ffc8:	1d3b      	adds	r3, r7, #4
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6818      	ldr	r0, [r3, #0]
 800ffce:	1d3b      	adds	r3, r7, #4
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 800ffda:	f7fd f993 	bl	800d304 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ffde:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ffe2:	f103 001c 	add.w	r0, r3, #28
 800ffe6:	1d3b      	adds	r3, r7, #4
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ffee:	4613      	mov	r3, r2
 800fff0:	4619      	mov	r1, r3
 800fff2:	f7fb fe2a 	bl	800bc4a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fff6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800fffa:	3316      	adds	r3, #22
 800fffc:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8010000:	4618      	mov	r0, r3
 8010002:	f7fb fe22 	bl	800bc4a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010006:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801000a:	3312      	adds	r3, #18
 801000c:	2100      	movs	r1, #0
 801000e:	4618      	mov	r0, r3
 8010010:	f7fb fe00 	bl	800bc14 <st_word>
					fs->wflag = 1;
 8010014:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010018:	2201      	movs	r2, #1
 801001a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801001c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010020:	4618      	mov	r0, r3
 8010022:	f7fc f923 	bl	800c26c <sync_fs>
 8010026:	4603      	mov	r3, r0
 8010028:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 801002c:	1d3b      	adds	r3, r7, #4
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010038:	b2da      	uxtb	r2, r3
 801003a:	1d3b      	adds	r3, r7, #4
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010042:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
}
 8010046:	4618      	mov	r0, r3
 8010048:	f507 6799 	add.w	r7, r7, #1224	; 0x4c8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff fe9d 	bl	800fd98 <f_sync>
 801005e:	4603      	mov	r3, r0
 8010060:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010062:	7bfb      	ldrb	r3, [r7, #15]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d118      	bne.n	801009a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f107 0208 	add.w	r2, r7, #8
 801006e:	4611      	mov	r1, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff f90f 	bl	800f294 <validate>
 8010076:	4603      	mov	r3, r0
 8010078:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801007a:	7bfb      	ldrb	r3, [r7, #15]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10c      	bne.n	801009a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010084:	4618      	mov	r0, r3
 8010086:	f7fc f81f 	bl	800c0c8 <dec_lock>
 801008a:	4603      	mov	r3, r0
 801008c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801008e:	7bfb      	ldrb	r3, [r7, #15]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d102      	bne.n	801009a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801009a:	7bfb      	ldrb	r3, [r7, #15]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	1d3b      	adds	r3, r7, #4
 80100ae:	6018      	str	r0, [r3, #0]
 80100b0:	463b      	mov	r3, r7
 80100b2:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80100b4:	1d3b      	adds	r3, r7, #4
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d101      	bne.n	80100c0 <f_opendir+0x1c>
 80100bc:	2309      	movs	r3, #9
 80100be:	e0d4      	b.n	801026a <f_opendir+0x1c6>

	/* Get logical drive */
	obj = &dp->obj;
 80100c0:	1d3b      	adds	r3, r7, #4
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	res = find_volume(&path, &fs, 0);
 80100c8:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 80100cc:	463b      	mov	r3, r7
 80100ce:	2200      	movs	r2, #0
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fe fd59 	bl	800eb88 <find_volume>
 80100d6:	4603      	mov	r3, r0
 80100d8:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if (res == FR_OK) {
 80100dc:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f040 80b8 	bne.w	8010256 <f_opendir+0x1b2>
		obj->fs = fs;
 80100e6:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80100ea:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80100ee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80100f0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80100f4:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 80100f8:	611a      	str	r2, [r3, #16]
 80100fa:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80100fe:	f107 020c 	add.w	r2, r7, #12
 8010102:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010104:	463b      	mov	r3, r7
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	1d3b      	adds	r3, r7, #4
 801010a:	4611      	mov	r1, r2
 801010c:	6818      	ldr	r0, [r3, #0]
 801010e:	f7fe fbe5 	bl	800e8dc <follow_path>
 8010112:	4603      	mov	r3, r0
 8010114:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		if (res == FR_OK) {						/* Follow completed */
 8010118:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801011c:	2b00      	cmp	r3, #0
 801011e:	f040 8093 	bne.w	8010248 <f_opendir+0x1a4>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010122:	1d3b      	adds	r3, r7, #4
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801012a:	b25b      	sxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	db5a      	blt.n	80101e6 <f_opendir+0x142>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010130:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010134:	799b      	ldrb	r3, [r3, #6]
 8010136:	f003 0310 	and.w	r3, r3, #16
 801013a:	2b00      	cmp	r3, #0
 801013c:	d050      	beq.n	80101e0 <f_opendir+0x13c>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 801013e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b04      	cmp	r3, #4
 8010146:	d13d      	bne.n	80101c4 <f_opendir+0x120>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8010148:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801014c:	689a      	ldr	r2, [r3, #8]
 801014e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010152:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8010154:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010158:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801015c:	4613      	mov	r3, r2
 801015e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010162:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8010166:	79d2      	ldrb	r2, [r2, #7]
 8010168:	431a      	orrs	r2, r3
 801016a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801016e:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 8010170:	1d3b      	adds	r3, r7, #4
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010176:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801017a:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801017c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8010180:	695b      	ldr	r3, [r3, #20]
 8010182:	3334      	adds	r3, #52	; 0x34
 8010184:	4618      	mov	r0, r3
 8010186:	f7fb fc67 	bl	800ba58 <ld_dword>
 801018a:	4602      	mov	r2, r0
 801018c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010190:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010192:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	3338      	adds	r3, #56	; 0x38
 801019a:	4618      	mov	r0, r3
 801019c:	f7fb fc7f 	bl	800ba9e <ld_qword>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80101a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80101ac:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	3321      	adds	r3, #33	; 0x21
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	f003 0302 	and.w	r3, r3, #2
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80101c0:	71da      	strb	r2, [r3, #7]
 80101c2:	e010      	b.n	80101e6 <f_opendir+0x142>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80101c4:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 80101c8:	1d3b      	adds	r3, r7, #4
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ce:	4619      	mov	r1, r3
 80101d0:	4610      	mov	r0, r2
 80101d2:	f7fd f878 	bl	800d2c6 <ld_clust>
 80101d6:	4602      	mov	r2, r0
 80101d8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80101dc:	609a      	str	r2, [r3, #8]
 80101de:	e002      	b.n	80101e6 <f_opendir+0x142>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80101e0:	2305      	movs	r3, #5
 80101e2:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
				}
			}
			if (res == FR_OK) {
 80101e6:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d12c      	bne.n	8010248 <f_opendir+0x1a4>
				obj->id = fs->id;
 80101ee:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80101f2:	88da      	ldrh	r2, [r3, #6]
 80101f4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80101f8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80101fa:	1d3b      	adds	r3, r7, #4
 80101fc:	2100      	movs	r1, #0
 80101fe:	6818      	ldr	r0, [r3, #0]
 8010200:	f7fc fe8b 	bl	800cf1a <dir_sdi>
 8010204:	4603      	mov	r3, r0
 8010206:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801020a:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801020e:	2b00      	cmp	r3, #0
 8010210:	d11a      	bne.n	8010248 <f_opendir+0x1a4>
					if (obj->sclust) {
 8010212:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d011      	beq.n	8010240 <f_opendir+0x19c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801021c:	1d3b      	adds	r3, r7, #4
 801021e:	2100      	movs	r1, #0
 8010220:	6818      	ldr	r0, [r3, #0]
 8010222:	f7fb fec3 	bl	800bfac <inc_lock>
 8010226:	4602      	mov	r2, r0
 8010228:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801022c:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801022e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d107      	bne.n	8010248 <f_opendir+0x1a4>
 8010238:	2312      	movs	r3, #18
 801023a:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 801023e:	e003      	b.n	8010248 <f_opendir+0x1a4>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010240:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010244:	2200      	movs	r2, #0
 8010246:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010248:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801024c:	2b04      	cmp	r3, #4
 801024e:	d102      	bne.n	8010256 <f_opendir+0x1b2>
 8010250:	2305      	movs	r3, #5
 8010252:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010256:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <f_opendir+0x1c2>
 801025e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8010262:	2200      	movs	r2, #0
 8010264:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010266:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
}
 801026a:	4618      	mov	r0, r3
 801026c:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801027a:	af00      	add	r7, sp, #0
 801027c:	1d3b      	adds	r3, r7, #4
 801027e:	6018      	str	r0, [r3, #0]
 8010280:	463b      	mov	r3, r7
 8010282:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010284:	1d3b      	adds	r3, r7, #4
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff f800 	bl	800f294 <validate>
 8010294:	4603      	mov	r3, r0
 8010296:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	if (res == FR_OK) {
 801029a:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d13e      	bne.n	8010320 <f_readdir+0xac>
		if (!fno) {
 80102a2:	463b      	mov	r3, r7
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d108      	bne.n	80102bc <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80102aa:	1d3b      	adds	r3, r7, #4
 80102ac:	2100      	movs	r1, #0
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	f7fc fe33 	bl	800cf1a <dir_sdi>
 80102b4:	4603      	mov	r3, r0
 80102b6:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 80102ba:	e031      	b.n	8010320 <f_readdir+0xac>
		} else {
			INIT_NAMBUF(fs);
 80102bc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80102c0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80102c4:	611a      	str	r2, [r3, #16]
 80102c6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80102ca:	f107 0208 	add.w	r2, r7, #8
 80102ce:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 80102d0:	1d3b      	adds	r3, r7, #4
 80102d2:	2100      	movs	r1, #0
 80102d4:	6818      	ldr	r0, [r3, #0]
 80102d6:	f7fd fcc6 	bl	800dc66 <dir_read>
 80102da:	4603      	mov	r3, r0
 80102dc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80102e0:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d102      	bne.n	80102ee <f_readdir+0x7a>
 80102e8:	2300      	movs	r3, #0
 80102ea:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 80102ee:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d114      	bne.n	8010320 <f_readdir+0xac>
				get_fileinfo(dp, fno);		/* Get the object information */
 80102f6:	463a      	mov	r2, r7
 80102f8:	1d3b      	adds	r3, r7, #4
 80102fa:	6811      	ldr	r1, [r2, #0]
 80102fc:	6818      	ldr	r0, [r3, #0]
 80102fe:	f7fe f849 	bl	800e394 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010302:	1d3b      	adds	r3, r7, #4
 8010304:	2100      	movs	r1, #0
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	f7fc fe9b 	bl	800d042 <dir_next>
 801030c:	4603      	mov	r3, r0
 801030e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010312:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8010316:	2b04      	cmp	r3, #4
 8010318:	d102      	bne.n	8010320 <f_readdir+0xac>
 801031a:	2300      	movs	r3, #0
 801031c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010320:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
}
 8010324:	4618      	mov	r0, r3
 8010326:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
	...

08010330 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010330:	b480      	push	{r7}
 8010332:	b087      	sub	sp, #28
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	4613      	mov	r3, r2
 801033c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801033e:	2301      	movs	r3, #1
 8010340:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010346:	4b1f      	ldr	r3, [pc, #124]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010348:	7a5b      	ldrb	r3, [r3, #9]
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	d131      	bne.n	80103b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010350:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010352:	7a5b      	ldrb	r3, [r3, #9]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	461a      	mov	r2, r3
 8010358:	4b1a      	ldr	r3, [pc, #104]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 801035a:	2100      	movs	r1, #0
 801035c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801035e:	4b19      	ldr	r3, [pc, #100]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010360:	7a5b      	ldrb	r3, [r3, #9]
 8010362:	b2db      	uxtb	r3, r3
 8010364:	4a17      	ldr	r2, [pc, #92]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	4413      	add	r3, r2
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801036e:	4b15      	ldr	r3, [pc, #84]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010370:	7a5b      	ldrb	r3, [r3, #9]
 8010372:	b2db      	uxtb	r3, r3
 8010374:	461a      	mov	r2, r3
 8010376:	4b13      	ldr	r3, [pc, #76]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010378:	4413      	add	r3, r2
 801037a:	79fa      	ldrb	r2, [r7, #7]
 801037c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801037e:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 8010380:	7a5b      	ldrb	r3, [r3, #9]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	b2d1      	uxtb	r1, r2
 8010388:	4a0e      	ldr	r2, [pc, #56]	; (80103c4 <FATFS_LinkDriverEx+0x94>)
 801038a:	7251      	strb	r1, [r2, #9]
 801038c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801038e:	7dbb      	ldrb	r3, [r7, #22]
 8010390:	3330      	adds	r3, #48	; 0x30
 8010392:	b2da      	uxtb	r2, r3
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	3301      	adds	r3, #1
 801039c:	223a      	movs	r2, #58	; 0x3a
 801039e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	3302      	adds	r3, #2
 80103a4:	222f      	movs	r2, #47	; 0x2f
 80103a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	3303      	adds	r3, #3
 80103ac:	2200      	movs	r2, #0
 80103ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	371c      	adds	r7, #28
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	20000500 	.word	0x20000500

080103c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80103d2:	2200      	movs	r2, #0
 80103d4:	6839      	ldr	r1, [r7, #0]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7ff ffaa 	bl	8010330 <FATFS_LinkDriverEx>
 80103dc:	4603      	mov	r3, r0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
	...

080103e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	6039      	str	r1, [r7, #0]
 80103f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	2b7f      	cmp	r3, #127	; 0x7f
 80103f8:	d802      	bhi.n	8010400 <ff_convert+0x18>
		c = chr;
 80103fa:	88fb      	ldrh	r3, [r7, #6]
 80103fc:	81fb      	strh	r3, [r7, #14]
 80103fe:	e025      	b.n	801044c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00b      	beq.n	801041e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010406:	88fb      	ldrh	r3, [r7, #6]
 8010408:	2bff      	cmp	r3, #255	; 0xff
 801040a:	d805      	bhi.n	8010418 <ff_convert+0x30>
 801040c:	88fb      	ldrh	r3, [r7, #6]
 801040e:	3b80      	subs	r3, #128	; 0x80
 8010410:	4a12      	ldr	r2, [pc, #72]	; (801045c <ff_convert+0x74>)
 8010412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010416:	e000      	b.n	801041a <ff_convert+0x32>
 8010418:	2300      	movs	r3, #0
 801041a:	81fb      	strh	r3, [r7, #14]
 801041c:	e016      	b.n	801044c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801041e:	2300      	movs	r3, #0
 8010420:	81fb      	strh	r3, [r7, #14]
 8010422:	e009      	b.n	8010438 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	4a0d      	ldr	r2, [pc, #52]	; (801045c <ff_convert+0x74>)
 8010428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801042c:	88fa      	ldrh	r2, [r7, #6]
 801042e:	429a      	cmp	r2, r3
 8010430:	d006      	beq.n	8010440 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010432:	89fb      	ldrh	r3, [r7, #14]
 8010434:	3301      	adds	r3, #1
 8010436:	81fb      	strh	r3, [r7, #14]
 8010438:	89fb      	ldrh	r3, [r7, #14]
 801043a:	2b7f      	cmp	r3, #127	; 0x7f
 801043c:	d9f2      	bls.n	8010424 <ff_convert+0x3c>
 801043e:	e000      	b.n	8010442 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010440:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010442:	89fb      	ldrh	r3, [r7, #14]
 8010444:	3380      	adds	r3, #128	; 0x80
 8010446:	b29b      	uxth	r3, r3
 8010448:	b2db      	uxtb	r3, r3
 801044a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801044c:	89fb      	ldrh	r3, [r7, #14]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	08013ca0 	.word	0x08013ca0

08010460 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010460:	b480      	push	{r7}
 8010462:	b087      	sub	sp, #28
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801046a:	88fb      	ldrh	r3, [r7, #6]
 801046c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010470:	d201      	bcs.n	8010476 <ff_wtoupper+0x16>
 8010472:	4b3e      	ldr	r3, [pc, #248]	; (801056c <ff_wtoupper+0x10c>)
 8010474:	e000      	b.n	8010478 <ff_wtoupper+0x18>
 8010476:	4b3e      	ldr	r3, [pc, #248]	; (8010570 <ff_wtoupper+0x110>)
 8010478:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	1c9a      	adds	r2, r3, #2
 801047e:	617a      	str	r2, [r7, #20]
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010484:	8a7b      	ldrh	r3, [r7, #18]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d068      	beq.n	801055c <ff_wtoupper+0xfc>
 801048a:	88fa      	ldrh	r2, [r7, #6]
 801048c:	8a7b      	ldrh	r3, [r7, #18]
 801048e:	429a      	cmp	r2, r3
 8010490:	d364      	bcc.n	801055c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	1c9a      	adds	r2, r3, #2
 8010496:	617a      	str	r2, [r7, #20]
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	823b      	strh	r3, [r7, #16]
 801049c:	8a3b      	ldrh	r3, [r7, #16]
 801049e:	0a1b      	lsrs	r3, r3, #8
 80104a0:	81fb      	strh	r3, [r7, #14]
 80104a2:	8a3b      	ldrh	r3, [r7, #16]
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80104a8:	88fa      	ldrh	r2, [r7, #6]
 80104aa:	8a79      	ldrh	r1, [r7, #18]
 80104ac:	8a3b      	ldrh	r3, [r7, #16]
 80104ae:	440b      	add	r3, r1
 80104b0:	429a      	cmp	r2, r3
 80104b2:	da49      	bge.n	8010548 <ff_wtoupper+0xe8>
			switch (cmd) {
 80104b4:	89fb      	ldrh	r3, [r7, #14]
 80104b6:	2b08      	cmp	r3, #8
 80104b8:	d84f      	bhi.n	801055a <ff_wtoupper+0xfa>
 80104ba:	a201      	add	r2, pc, #4	; (adr r2, 80104c0 <ff_wtoupper+0x60>)
 80104bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c0:	080104e5 	.word	0x080104e5
 80104c4:	080104f7 	.word	0x080104f7
 80104c8:	0801050d 	.word	0x0801050d
 80104cc:	08010515 	.word	0x08010515
 80104d0:	0801051d 	.word	0x0801051d
 80104d4:	08010525 	.word	0x08010525
 80104d8:	0801052d 	.word	0x0801052d
 80104dc:	08010535 	.word	0x08010535
 80104e0:	0801053d 	.word	0x0801053d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80104e4:	88fa      	ldrh	r2, [r7, #6]
 80104e6:	8a7b      	ldrh	r3, [r7, #18]
 80104e8:	1ad3      	subs	r3, r2, r3
 80104ea:	005b      	lsls	r3, r3, #1
 80104ec:	697a      	ldr	r2, [r7, #20]
 80104ee:	4413      	add	r3, r2
 80104f0:	881b      	ldrh	r3, [r3, #0]
 80104f2:	80fb      	strh	r3, [r7, #6]
 80104f4:	e027      	b.n	8010546 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80104f6:	88fa      	ldrh	r2, [r7, #6]
 80104f8:	8a7b      	ldrh	r3, [r7, #18]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	b29b      	uxth	r3, r3
 8010504:	88fa      	ldrh	r2, [r7, #6]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	80fb      	strh	r3, [r7, #6]
 801050a:	e01c      	b.n	8010546 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801050c:	88fb      	ldrh	r3, [r7, #6]
 801050e:	3b10      	subs	r3, #16
 8010510:	80fb      	strh	r3, [r7, #6]
 8010512:	e018      	b.n	8010546 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010514:	88fb      	ldrh	r3, [r7, #6]
 8010516:	3b20      	subs	r3, #32
 8010518:	80fb      	strh	r3, [r7, #6]
 801051a:	e014      	b.n	8010546 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801051c:	88fb      	ldrh	r3, [r7, #6]
 801051e:	3b30      	subs	r3, #48	; 0x30
 8010520:	80fb      	strh	r3, [r7, #6]
 8010522:	e010      	b.n	8010546 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010524:	88fb      	ldrh	r3, [r7, #6]
 8010526:	3b1a      	subs	r3, #26
 8010528:	80fb      	strh	r3, [r7, #6]
 801052a:	e00c      	b.n	8010546 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801052c:	88fb      	ldrh	r3, [r7, #6]
 801052e:	3308      	adds	r3, #8
 8010530:	80fb      	strh	r3, [r7, #6]
 8010532:	e008      	b.n	8010546 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010534:	88fb      	ldrh	r3, [r7, #6]
 8010536:	3b50      	subs	r3, #80	; 0x50
 8010538:	80fb      	strh	r3, [r7, #6]
 801053a:	e004      	b.n	8010546 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801053c:	88fb      	ldrh	r3, [r7, #6]
 801053e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010542:	80fb      	strh	r3, [r7, #6]
 8010544:	bf00      	nop
			}
			break;
 8010546:	e008      	b.n	801055a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010548:	89fb      	ldrh	r3, [r7, #14]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d195      	bne.n	801047a <ff_wtoupper+0x1a>
 801054e:	8a3b      	ldrh	r3, [r7, #16]
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	4413      	add	r3, r2
 8010556:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010558:	e78f      	b.n	801047a <ff_wtoupper+0x1a>
			break;
 801055a:	bf00      	nop
	}

	return chr;
 801055c:	88fb      	ldrh	r3, [r7, #6]
}
 801055e:	4618      	mov	r0, r3
 8010560:	371c      	adds	r7, #28
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	08013da0 	.word	0x08013da0
 8010570:	08013f94 	.word	0x08013f94

08010574 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010578:	2201      	movs	r2, #1
 801057a:	490e      	ldr	r1, [pc, #56]	; (80105b4 <MX_USB_HOST_Init+0x40>)
 801057c:	480e      	ldr	r0, [pc, #56]	; (80105b8 <MX_USB_HOST_Init+0x44>)
 801057e:	f7f9 fe5d 	bl	800a23c <USBH_Init>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010588:	f7f0 fd04 	bl	8000f94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801058c:	490b      	ldr	r1, [pc, #44]	; (80105bc <MX_USB_HOST_Init+0x48>)
 801058e:	480a      	ldr	r0, [pc, #40]	; (80105b8 <MX_USB_HOST_Init+0x44>)
 8010590:	f7f9 fee2 	bl	800a358 <USBH_RegisterClass>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801059a:	f7f0 fcfb 	bl	8000f94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801059e:	4806      	ldr	r0, [pc, #24]	; (80105b8 <MX_USB_HOST_Init+0x44>)
 80105a0:	f7f9 ff66 	bl	800a470 <USBH_Start>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d001      	beq.n	80105ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80105aa:	f7f0 fcf3 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80105ae:	bf00      	nop
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	080105d5 	.word	0x080105d5
 80105b8:	200058e8 	.word	0x200058e8
 80105bc:	20000024 	.word	0x20000024

080105c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80105c4:	4802      	ldr	r0, [pc, #8]	; (80105d0 <MX_USB_HOST_Process+0x10>)
 80105c6:	f7f9 ff63 	bl	800a490 <USBH_Process>
}
 80105ca:	bf00      	nop
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	200058e8 	.word	0x200058e8

080105d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	460b      	mov	r3, r1
 80105de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	2b04      	cmp	r3, #4
 80105e6:	d81b      	bhi.n	8010620 <USBH_UserProcess+0x4c>
 80105e8:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <USBH_UserProcess+0x1c>)
 80105ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ee:	bf00      	nop
 80105f0:	08010621 	.word	0x08010621
 80105f4:	0801060d 	.word	0x0801060d
 80105f8:	08010621 	.word	0x08010621
 80105fc:	08010619 	.word	0x08010619
 8010600:	08010605 	.word	0x08010605
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010604:	4b09      	ldr	r3, [pc, #36]	; (801062c <USBH_UserProcess+0x58>)
 8010606:	2203      	movs	r2, #3
 8010608:	701a      	strb	r2, [r3, #0]
  break;
 801060a:	e00a      	b.n	8010622 <USBH_UserProcess+0x4e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801060c:	4b07      	ldr	r3, [pc, #28]	; (801062c <USBH_UserProcess+0x58>)
 801060e:	2202      	movs	r2, #2
 8010610:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 8010612:	f7ef ff85 	bl	8000520 <Mount_USB>
//  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
//  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
//
//  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");

  break;
 8010616:	e004      	b.n	8010622 <USBH_UserProcess+0x4e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010618:	4b04      	ldr	r3, [pc, #16]	; (801062c <USBH_UserProcess+0x58>)
 801061a:	2201      	movs	r2, #1
 801061c:	701a      	strb	r2, [r3, #0]
  break;
 801061e:	e000      	b.n	8010622 <USBH_UserProcess+0x4e>

  default:
  break;
 8010620:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	2000050c 	.word	0x2000050c

08010630 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b08a      	sub	sp, #40	; 0x28
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010638:	f107 0314 	add.w	r3, r7, #20
 801063c:	2200      	movs	r2, #0
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	605a      	str	r2, [r3, #4]
 8010642:	609a      	str	r2, [r3, #8]
 8010644:	60da      	str	r2, [r3, #12]
 8010646:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010650:	d13a      	bne.n	80106c8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010652:	2300      	movs	r3, #0
 8010654:	613b      	str	r3, [r7, #16]
 8010656:	4b1e      	ldr	r3, [pc, #120]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 8010658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065a:	4a1d      	ldr	r2, [pc, #116]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 801065c:	f043 0301 	orr.w	r3, r3, #1
 8010660:	6313      	str	r3, [r2, #48]	; 0x30
 8010662:	4b1b      	ldr	r3, [pc, #108]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 8010664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	613b      	str	r3, [r7, #16]
 801066c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801066e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010674:	2302      	movs	r3, #2
 8010676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010678:	2300      	movs	r3, #0
 801067a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801067c:	2303      	movs	r3, #3
 801067e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010680:	230a      	movs	r3, #10
 8010682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010684:	f107 0314 	add.w	r3, r7, #20
 8010688:	4619      	mov	r1, r3
 801068a:	4812      	ldr	r0, [pc, #72]	; (80106d4 <HAL_HCD_MspInit+0xa4>)
 801068c:	f7f1 ff52 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 8010692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010694:	4a0e      	ldr	r2, [pc, #56]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 8010696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801069a:	6353      	str	r3, [r2, #52]	; 0x34
 801069c:	2300      	movs	r3, #0
 801069e:	60fb      	str	r3, [r7, #12]
 80106a0:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 80106a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a4:	4a0a      	ldr	r2, [pc, #40]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 80106a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80106aa:	6453      	str	r3, [r2, #68]	; 0x44
 80106ac:	4b08      	ldr	r3, [pc, #32]	; (80106d0 <HAL_HCD_MspInit+0xa0>)
 80106ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106b4:	60fb      	str	r3, [r7, #12]
 80106b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80106b8:	2200      	movs	r2, #0
 80106ba:	2100      	movs	r1, #0
 80106bc:	2043      	movs	r0, #67	; 0x43
 80106be:	f7f1 fb2f 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80106c2:	2043      	movs	r0, #67	; 0x43
 80106c4:	f7f1 fb48 	bl	8001d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80106c8:	bf00      	nop
 80106ca:	3728      	adds	r7, #40	; 0x28
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	40023800 	.word	0x40023800
 80106d4:	40020000 	.word	0x40020000

080106d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fa faa5 	bl	800ac36 <USBH_LL_IncTimer>
}
 80106ec:	bf00      	nop
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010702:	4618      	mov	r0, r3
 8010704:	f7fa fadd 	bl	800acc2 <USBH_LL_Connect>
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801071e:	4618      	mov	r0, r3
 8010720:	f7fa fae6 	bl	800acf0 <USBH_LL_Disconnect>
}
 8010724:	bf00      	nop
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
 8010738:	4613      	mov	r3, r2
 801073a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010756:	4618      	mov	r0, r3
 8010758:	f7fa fa97 	bl	800ac8a <USBH_LL_PortEnabled>
}
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010772:	4618      	mov	r0, r3
 8010774:	f7fa fa97 	bl	800aca6 <USBH_LL_PortDisabled>
}
 8010778:	bf00      	nop
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801078e:	2b01      	cmp	r3, #1
 8010790:	d12a      	bne.n	80107e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010792:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <USBH_LL_Init+0x74>)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4a15      	ldr	r2, [pc, #84]	; (80107f4 <USBH_LL_Init+0x74>)
 801079e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80107a2:	4b14      	ldr	r3, [pc, #80]	; (80107f4 <USBH_LL_Init+0x74>)
 80107a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80107a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80107aa:	4b12      	ldr	r3, [pc, #72]	; (80107f4 <USBH_LL_Init+0x74>)
 80107ac:	2208      	movs	r2, #8
 80107ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80107b0:	4b10      	ldr	r3, [pc, #64]	; (80107f4 <USBH_LL_Init+0x74>)
 80107b2:	2201      	movs	r2, #1
 80107b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80107b6:	4b0f      	ldr	r3, [pc, #60]	; (80107f4 <USBH_LL_Init+0x74>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80107bc:	4b0d      	ldr	r3, [pc, #52]	; (80107f4 <USBH_LL_Init+0x74>)
 80107be:	2202      	movs	r2, #2
 80107c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80107c2:	4b0c      	ldr	r3, [pc, #48]	; (80107f4 <USBH_LL_Init+0x74>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80107c8:	480a      	ldr	r0, [pc, #40]	; (80107f4 <USBH_LL_Init+0x74>)
 80107ca:	f7f2 f8a9 	bl	8002920 <HAL_HCD_Init>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d001      	beq.n	80107d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80107d4:	f7f0 fbde 	bl	8000f94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80107d8:	4806      	ldr	r0, [pc, #24]	; (80107f4 <USBH_LL_Init+0x74>)
 80107da:	f7f2 fc85 	bl	80030e8 <HAL_HCD_GetCurrentFrame>
 80107de:	4603      	mov	r3, r0
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7fa fa18 	bl	800ac18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	20005cc0 	.word	0x20005cc0

080107f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801080e:	4618      	mov	r0, r3
 8010810:	f7f2 fbf4 	bl	8002ffc <HAL_HCD_Start>
 8010814:	4603      	mov	r3, r0
 8010816:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010818:	7bfb      	ldrb	r3, [r7, #15]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f98c 	bl	8010b38 <USBH_Get_USB_Status>
 8010820:	4603      	mov	r3, r0
 8010822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010824:	7bbb      	ldrb	r3, [r7, #14]
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b084      	sub	sp, #16
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801083a:	2300      	movs	r3, #0
 801083c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010844:	4618      	mov	r0, r3
 8010846:	f7f2 fbfc 	bl	8003042 <HAL_HCD_Stop>
 801084a:	4603      	mov	r3, r0
 801084c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801084e:	7bfb      	ldrb	r3, [r7, #15]
 8010850:	4618      	mov	r0, r3
 8010852:	f000 f971 	bl	8010b38 <USBH_Get_USB_Status>
 8010856:	4603      	mov	r3, r0
 8010858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801085a:	7bbb      	ldrb	r3, [r7, #14]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801086c:	2301      	movs	r3, #1
 801086e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010876:	4618      	mov	r0, r3
 8010878:	f7f2 fc44 	bl	8003104 <HAL_HCD_GetCurrentSpeed>
 801087c:	4603      	mov	r3, r0
 801087e:	2b02      	cmp	r3, #2
 8010880:	d00c      	beq.n	801089c <USBH_LL_GetSpeed+0x38>
 8010882:	2b02      	cmp	r3, #2
 8010884:	d80d      	bhi.n	80108a2 <USBH_LL_GetSpeed+0x3e>
 8010886:	2b00      	cmp	r3, #0
 8010888:	d002      	beq.n	8010890 <USBH_LL_GetSpeed+0x2c>
 801088a:	2b01      	cmp	r3, #1
 801088c:	d003      	beq.n	8010896 <USBH_LL_GetSpeed+0x32>
 801088e:	e008      	b.n	80108a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010890:	2300      	movs	r3, #0
 8010892:	73fb      	strb	r3, [r7, #15]
    break;
 8010894:	e008      	b.n	80108a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010896:	2301      	movs	r3, #1
 8010898:	73fb      	strb	r3, [r7, #15]
    break;
 801089a:	e005      	b.n	80108a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801089c:	2302      	movs	r3, #2
 801089e:	73fb      	strb	r3, [r7, #15]
    break;
 80108a0:	e002      	b.n	80108a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80108a2:	2301      	movs	r3, #1
 80108a4:	73fb      	strb	r3, [r7, #15]
    break;
 80108a6:	bf00      	nop
  }
  return  speed;
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7f2 fbd7 	bl	800307c <HAL_HCD_ResetPort>
 80108ce:	4603      	mov	r3, r0
 80108d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80108d2:	7bfb      	ldrb	r3, [r7, #15]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 f92f 	bl	8010b38 <USBH_Get_USB_Status>
 80108da:	4603      	mov	r3, r0
 80108dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108de:	7bbb      	ldrb	r3, [r7, #14]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108fa:	78fa      	ldrb	r2, [r7, #3]
 80108fc:	4611      	mov	r1, r2
 80108fe:	4618      	mov	r0, r3
 8010900:	f7f2 fbde 	bl	80030c0 <HAL_HCD_HC_GetXferCount>
 8010904:	4603      	mov	r3, r0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801090e:	b590      	push	{r4, r7, lr}
 8010910:	b089      	sub	sp, #36	; 0x24
 8010912:	af04      	add	r7, sp, #16
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	4608      	mov	r0, r1
 8010918:	4611      	mov	r1, r2
 801091a:	461a      	mov	r2, r3
 801091c:	4603      	mov	r3, r0
 801091e:	70fb      	strb	r3, [r7, #3]
 8010920:	460b      	mov	r3, r1
 8010922:	70bb      	strb	r3, [r7, #2]
 8010924:	4613      	mov	r3, r2
 8010926:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010928:	2300      	movs	r3, #0
 801092a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801092c:	2300      	movs	r3, #0
 801092e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010936:	787c      	ldrb	r4, [r7, #1]
 8010938:	78ba      	ldrb	r2, [r7, #2]
 801093a:	78f9      	ldrb	r1, [r7, #3]
 801093c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	f897 3020 	ldrb.w	r3, [r7, #32]
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	4623      	mov	r3, r4
 801094e:	f7f2 f849 	bl	80029e4 <HAL_HCD_HC_Init>
 8010952:	4603      	mov	r3, r0
 8010954:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010956:	7bfb      	ldrb	r3, [r7, #15]
 8010958:	4618      	mov	r0, r3
 801095a:	f000 f8ed 	bl	8010b38 <USBH_Get_USB_Status>
 801095e:	4603      	mov	r3, r0
 8010960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010962:	7bbb      	ldrb	r3, [r7, #14]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	bd90      	pop	{r4, r7, pc}

0801096c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	460b      	mov	r3, r1
 8010976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801097c:	2300      	movs	r3, #0
 801097e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010986:	78fa      	ldrb	r2, [r7, #3]
 8010988:	4611      	mov	r1, r2
 801098a:	4618      	mov	r0, r3
 801098c:	f7f2 f8b9 	bl	8002b02 <HAL_HCD_HC_Halt>
 8010990:	4603      	mov	r3, r0
 8010992:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010994:	7bfb      	ldrb	r3, [r7, #15]
 8010996:	4618      	mov	r0, r3
 8010998:	f000 f8ce 	bl	8010b38 <USBH_Get_USB_Status>
 801099c:	4603      	mov	r3, r0
 801099e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80109aa:	b590      	push	{r4, r7, lr}
 80109ac:	b089      	sub	sp, #36	; 0x24
 80109ae:	af04      	add	r7, sp, #16
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	4608      	mov	r0, r1
 80109b4:	4611      	mov	r1, r2
 80109b6:	461a      	mov	r2, r3
 80109b8:	4603      	mov	r3, r0
 80109ba:	70fb      	strb	r3, [r7, #3]
 80109bc:	460b      	mov	r3, r1
 80109be:	70bb      	strb	r3, [r7, #2]
 80109c0:	4613      	mov	r3, r2
 80109c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80109d2:	787c      	ldrb	r4, [r7, #1]
 80109d4:	78ba      	ldrb	r2, [r7, #2]
 80109d6:	78f9      	ldrb	r1, [r7, #3]
 80109d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80109e0:	9302      	str	r3, [sp, #8]
 80109e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	4623      	mov	r3, r4
 80109ee:	f7f2 f8ab 	bl	8002b48 <HAL_HCD_HC_SubmitRequest>
 80109f2:	4603      	mov	r3, r0
 80109f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 f89d 	bl	8010b38 <USBH_Get_USB_Status>
 80109fe:	4603      	mov	r3, r0
 8010a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd90      	pop	{r4, r7, pc}

08010a0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a1e:	78fa      	ldrb	r2, [r7, #3]
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f2 fb38 	bl	8003098 <HAL_HCD_HC_GetURBState>
 8010a28:	4603      	mov	r3, r0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}

08010a32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010a32:	b580      	push	{r7, lr}
 8010a34:	b082      	sub	sp, #8
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d103      	bne.n	8010a50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010a48:	78fb      	ldrb	r3, [r7, #3]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 f8a0 	bl	8010b90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010a50:	20c8      	movs	r0, #200	; 0xc8
 8010a52:	f7f1 f889 	bl	8001b68 <HAL_Delay>
  return USBH_OK;
 8010a56:	2300      	movs	r3, #0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	460b      	mov	r3, r1
 8010a6a:	70fb      	strb	r3, [r7, #3]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010a78:	78fb      	ldrb	r3, [r7, #3]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	212c      	movs	r1, #44	; 0x2c
 8010a7e:	fb01 f303 	mul.w	r3, r1, r3
 8010a82:	4413      	add	r3, r2
 8010a84:	333b      	adds	r3, #59	; 0x3b
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d009      	beq.n	8010aa0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010a8c:	78fb      	ldrb	r3, [r7, #3]
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	212c      	movs	r1, #44	; 0x2c
 8010a92:	fb01 f303 	mul.w	r3, r1, r3
 8010a96:	4413      	add	r3, r2
 8010a98:	3354      	adds	r3, #84	; 0x54
 8010a9a:	78ba      	ldrb	r2, [r7, #2]
 8010a9c:	701a      	strb	r2, [r3, #0]
 8010a9e:	e008      	b.n	8010ab2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010aa0:	78fb      	ldrb	r3, [r7, #3]
 8010aa2:	68fa      	ldr	r2, [r7, #12]
 8010aa4:	212c      	movs	r1, #44	; 0x2c
 8010aa6:	fb01 f303 	mul.w	r3, r1, r3
 8010aaa:	4413      	add	r3, r2
 8010aac:	3355      	adds	r3, #85	; 0x55
 8010aae:	78ba      	ldrb	r2, [r7, #2]
 8010ab0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ad6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010ad8:	78fb      	ldrb	r3, [r7, #3]
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	212c      	movs	r1, #44	; 0x2c
 8010ade:	fb01 f303 	mul.w	r3, r1, r3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	333b      	adds	r3, #59	; 0x3b
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d009      	beq.n	8010b00 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010aec:	78fb      	ldrb	r3, [r7, #3]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	212c      	movs	r1, #44	; 0x2c
 8010af2:	fb01 f303 	mul.w	r3, r1, r3
 8010af6:	4413      	add	r3, r2
 8010af8:	3354      	adds	r3, #84	; 0x54
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	73fb      	strb	r3, [r7, #15]
 8010afe:	e008      	b.n	8010b12 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	68ba      	ldr	r2, [r7, #8]
 8010b04:	212c      	movs	r1, #44	; 0x2c
 8010b06:	fb01 f303 	mul.w	r3, r1, r3
 8010b0a:	4413      	add	r3, r2
 8010b0c:	3355      	adds	r3, #85	; 0x55
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7f1 f81d 	bl	8001b68 <HAL_Delay>
}
 8010b2e:	bf00      	nop
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
	...

08010b38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b46:	79fb      	ldrb	r3, [r7, #7]
 8010b48:	2b03      	cmp	r3, #3
 8010b4a:	d817      	bhi.n	8010b7c <USBH_Get_USB_Status+0x44>
 8010b4c:	a201      	add	r2, pc, #4	; (adr r2, 8010b54 <USBH_Get_USB_Status+0x1c>)
 8010b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b52:	bf00      	nop
 8010b54:	08010b65 	.word	0x08010b65
 8010b58:	08010b6b 	.word	0x08010b6b
 8010b5c:	08010b71 	.word	0x08010b71
 8010b60:	08010b77 	.word	0x08010b77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	73fb      	strb	r3, [r7, #15]
    break;
 8010b68:	e00b      	b.n	8010b82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6e:	e008      	b.n	8010b82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010b70:	2301      	movs	r3, #1
 8010b72:	73fb      	strb	r3, [r7, #15]
    break;
 8010b74:	e005      	b.n	8010b82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010b76:	2302      	movs	r3, #2
 8010b78:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7a:	e002      	b.n	8010b82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b80:	bf00      	nop
  }
  return usb_status;
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	4603      	mov	r3, r0
 8010b98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d102      	bne.n	8010baa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	73fb      	strb	r3, [r7, #15]
 8010ba8:	e001      	b.n	8010bae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010baa:	2300      	movs	r3, #0
 8010bac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,(GPIO_PinState)data);
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	2102      	movs	r1, #2
 8010bb4:	4803      	ldr	r0, [pc, #12]	; (8010bc4 <MX_DriverVbusFS+0x34>)
 8010bb6:	f7f1 fe81 	bl	80028bc <HAL_GPIO_WritePin>
}
 8010bba:	bf00      	nop
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	40020800 	.word	0x40020800

08010bc8 <__errno>:
 8010bc8:	4b01      	ldr	r3, [pc, #4]	; (8010bd0 <__errno+0x8>)
 8010bca:	6818      	ldr	r0, [r3, #0]
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	20000044 	.word	0x20000044

08010bd4 <__libc_init_array>:
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	4d0d      	ldr	r5, [pc, #52]	; (8010c0c <__libc_init_array+0x38>)
 8010bd8:	4c0d      	ldr	r4, [pc, #52]	; (8010c10 <__libc_init_array+0x3c>)
 8010bda:	1b64      	subs	r4, r4, r5
 8010bdc:	10a4      	asrs	r4, r4, #2
 8010bde:	2600      	movs	r6, #0
 8010be0:	42a6      	cmp	r6, r4
 8010be2:	d109      	bne.n	8010bf8 <__libc_init_array+0x24>
 8010be4:	4d0b      	ldr	r5, [pc, #44]	; (8010c14 <__libc_init_array+0x40>)
 8010be6:	4c0c      	ldr	r4, [pc, #48]	; (8010c18 <__libc_init_array+0x44>)
 8010be8:	f000 f944 	bl	8010e74 <_init>
 8010bec:	1b64      	subs	r4, r4, r5
 8010bee:	10a4      	asrs	r4, r4, #2
 8010bf0:	2600      	movs	r6, #0
 8010bf2:	42a6      	cmp	r6, r4
 8010bf4:	d105      	bne.n	8010c02 <__libc_init_array+0x2e>
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}
 8010bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bfc:	4798      	blx	r3
 8010bfe:	3601      	adds	r6, #1
 8010c00:	e7ee      	b.n	8010be0 <__libc_init_array+0xc>
 8010c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c06:	4798      	blx	r3
 8010c08:	3601      	adds	r6, #1
 8010c0a:	e7f2      	b.n	8010bf2 <__libc_init_array+0x1e>
 8010c0c:	08014058 	.word	0x08014058
 8010c10:	08014058 	.word	0x08014058
 8010c14:	08014058 	.word	0x08014058
 8010c18:	0801405c 	.word	0x0801405c

08010c1c <malloc>:
 8010c1c:	4b02      	ldr	r3, [pc, #8]	; (8010c28 <malloc+0xc>)
 8010c1e:	4601      	mov	r1, r0
 8010c20:	6818      	ldr	r0, [r3, #0]
 8010c22:	f000 b871 	b.w	8010d08 <_malloc_r>
 8010c26:	bf00      	nop
 8010c28:	20000044 	.word	0x20000044

08010c2c <free>:
 8010c2c:	4b02      	ldr	r3, [pc, #8]	; (8010c38 <free+0xc>)
 8010c2e:	4601      	mov	r1, r0
 8010c30:	6818      	ldr	r0, [r3, #0]
 8010c32:	f000 b819 	b.w	8010c68 <_free_r>
 8010c36:	bf00      	nop
 8010c38:	20000044 	.word	0x20000044

08010c3c <memcpy>:
 8010c3c:	440a      	add	r2, r1
 8010c3e:	4291      	cmp	r1, r2
 8010c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c44:	d100      	bne.n	8010c48 <memcpy+0xc>
 8010c46:	4770      	bx	lr
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c52:	4291      	cmp	r1, r2
 8010c54:	d1f9      	bne.n	8010c4a <memcpy+0xe>
 8010c56:	bd10      	pop	{r4, pc}

08010c58 <memset>:
 8010c58:	4402      	add	r2, r0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d100      	bne.n	8010c62 <memset+0xa>
 8010c60:	4770      	bx	lr
 8010c62:	f803 1b01 	strb.w	r1, [r3], #1
 8010c66:	e7f9      	b.n	8010c5c <memset+0x4>

08010c68 <_free_r>:
 8010c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	d048      	beq.n	8010d00 <_free_r+0x98>
 8010c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c72:	9001      	str	r0, [sp, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f1a1 0404 	sub.w	r4, r1, #4
 8010c7a:	bfb8      	it	lt
 8010c7c:	18e4      	addlt	r4, r4, r3
 8010c7e:	f000 f8bd 	bl	8010dfc <__malloc_lock>
 8010c82:	4a20      	ldr	r2, [pc, #128]	; (8010d04 <_free_r+0x9c>)
 8010c84:	9801      	ldr	r0, [sp, #4]
 8010c86:	6813      	ldr	r3, [r2, #0]
 8010c88:	4615      	mov	r5, r2
 8010c8a:	b933      	cbnz	r3, 8010c9a <_free_r+0x32>
 8010c8c:	6063      	str	r3, [r4, #4]
 8010c8e:	6014      	str	r4, [r2, #0]
 8010c90:	b003      	add	sp, #12
 8010c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c96:	f000 b8b7 	b.w	8010e08 <__malloc_unlock>
 8010c9a:	42a3      	cmp	r3, r4
 8010c9c:	d90b      	bls.n	8010cb6 <_free_r+0x4e>
 8010c9e:	6821      	ldr	r1, [r4, #0]
 8010ca0:	1862      	adds	r2, r4, r1
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	bf04      	itt	eq
 8010ca6:	681a      	ldreq	r2, [r3, #0]
 8010ca8:	685b      	ldreq	r3, [r3, #4]
 8010caa:	6063      	str	r3, [r4, #4]
 8010cac:	bf04      	itt	eq
 8010cae:	1852      	addeq	r2, r2, r1
 8010cb0:	6022      	streq	r2, [r4, #0]
 8010cb2:	602c      	str	r4, [r5, #0]
 8010cb4:	e7ec      	b.n	8010c90 <_free_r+0x28>
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	b10b      	cbz	r3, 8010cc0 <_free_r+0x58>
 8010cbc:	42a3      	cmp	r3, r4
 8010cbe:	d9fa      	bls.n	8010cb6 <_free_r+0x4e>
 8010cc0:	6811      	ldr	r1, [r2, #0]
 8010cc2:	1855      	adds	r5, r2, r1
 8010cc4:	42a5      	cmp	r5, r4
 8010cc6:	d10b      	bne.n	8010ce0 <_free_r+0x78>
 8010cc8:	6824      	ldr	r4, [r4, #0]
 8010cca:	4421      	add	r1, r4
 8010ccc:	1854      	adds	r4, r2, r1
 8010cce:	42a3      	cmp	r3, r4
 8010cd0:	6011      	str	r1, [r2, #0]
 8010cd2:	d1dd      	bne.n	8010c90 <_free_r+0x28>
 8010cd4:	681c      	ldr	r4, [r3, #0]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	6053      	str	r3, [r2, #4]
 8010cda:	4421      	add	r1, r4
 8010cdc:	6011      	str	r1, [r2, #0]
 8010cde:	e7d7      	b.n	8010c90 <_free_r+0x28>
 8010ce0:	d902      	bls.n	8010ce8 <_free_r+0x80>
 8010ce2:	230c      	movs	r3, #12
 8010ce4:	6003      	str	r3, [r0, #0]
 8010ce6:	e7d3      	b.n	8010c90 <_free_r+0x28>
 8010ce8:	6825      	ldr	r5, [r4, #0]
 8010cea:	1961      	adds	r1, r4, r5
 8010cec:	428b      	cmp	r3, r1
 8010cee:	bf04      	itt	eq
 8010cf0:	6819      	ldreq	r1, [r3, #0]
 8010cf2:	685b      	ldreq	r3, [r3, #4]
 8010cf4:	6063      	str	r3, [r4, #4]
 8010cf6:	bf04      	itt	eq
 8010cf8:	1949      	addeq	r1, r1, r5
 8010cfa:	6021      	streq	r1, [r4, #0]
 8010cfc:	6054      	str	r4, [r2, #4]
 8010cfe:	e7c7      	b.n	8010c90 <_free_r+0x28>
 8010d00:	b003      	add	sp, #12
 8010d02:	bd30      	pop	{r4, r5, pc}
 8010d04:	20000510 	.word	0x20000510

08010d08 <_malloc_r>:
 8010d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0a:	1ccd      	adds	r5, r1, #3
 8010d0c:	f025 0503 	bic.w	r5, r5, #3
 8010d10:	3508      	adds	r5, #8
 8010d12:	2d0c      	cmp	r5, #12
 8010d14:	bf38      	it	cc
 8010d16:	250c      	movcc	r5, #12
 8010d18:	2d00      	cmp	r5, #0
 8010d1a:	4606      	mov	r6, r0
 8010d1c:	db01      	blt.n	8010d22 <_malloc_r+0x1a>
 8010d1e:	42a9      	cmp	r1, r5
 8010d20:	d903      	bls.n	8010d2a <_malloc_r+0x22>
 8010d22:	230c      	movs	r3, #12
 8010d24:	6033      	str	r3, [r6, #0]
 8010d26:	2000      	movs	r0, #0
 8010d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2a:	f000 f867 	bl	8010dfc <__malloc_lock>
 8010d2e:	4921      	ldr	r1, [pc, #132]	; (8010db4 <_malloc_r+0xac>)
 8010d30:	680a      	ldr	r2, [r1, #0]
 8010d32:	4614      	mov	r4, r2
 8010d34:	b99c      	cbnz	r4, 8010d5e <_malloc_r+0x56>
 8010d36:	4f20      	ldr	r7, [pc, #128]	; (8010db8 <_malloc_r+0xb0>)
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	b923      	cbnz	r3, 8010d46 <_malloc_r+0x3e>
 8010d3c:	4621      	mov	r1, r4
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f000 f844 	bl	8010dcc <_sbrk_r>
 8010d44:	6038      	str	r0, [r7, #0]
 8010d46:	4629      	mov	r1, r5
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f000 f83f 	bl	8010dcc <_sbrk_r>
 8010d4e:	1c43      	adds	r3, r0, #1
 8010d50:	d123      	bne.n	8010d9a <_malloc_r+0x92>
 8010d52:	230c      	movs	r3, #12
 8010d54:	6033      	str	r3, [r6, #0]
 8010d56:	4630      	mov	r0, r6
 8010d58:	f000 f856 	bl	8010e08 <__malloc_unlock>
 8010d5c:	e7e3      	b.n	8010d26 <_malloc_r+0x1e>
 8010d5e:	6823      	ldr	r3, [r4, #0]
 8010d60:	1b5b      	subs	r3, r3, r5
 8010d62:	d417      	bmi.n	8010d94 <_malloc_r+0x8c>
 8010d64:	2b0b      	cmp	r3, #11
 8010d66:	d903      	bls.n	8010d70 <_malloc_r+0x68>
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	441c      	add	r4, r3
 8010d6c:	6025      	str	r5, [r4, #0]
 8010d6e:	e004      	b.n	8010d7a <_malloc_r+0x72>
 8010d70:	6863      	ldr	r3, [r4, #4]
 8010d72:	42a2      	cmp	r2, r4
 8010d74:	bf0c      	ite	eq
 8010d76:	600b      	streq	r3, [r1, #0]
 8010d78:	6053      	strne	r3, [r2, #4]
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	f000 f844 	bl	8010e08 <__malloc_unlock>
 8010d80:	f104 000b 	add.w	r0, r4, #11
 8010d84:	1d23      	adds	r3, r4, #4
 8010d86:	f020 0007 	bic.w	r0, r0, #7
 8010d8a:	1ac2      	subs	r2, r0, r3
 8010d8c:	d0cc      	beq.n	8010d28 <_malloc_r+0x20>
 8010d8e:	1a1b      	subs	r3, r3, r0
 8010d90:	50a3      	str	r3, [r4, r2]
 8010d92:	e7c9      	b.n	8010d28 <_malloc_r+0x20>
 8010d94:	4622      	mov	r2, r4
 8010d96:	6864      	ldr	r4, [r4, #4]
 8010d98:	e7cc      	b.n	8010d34 <_malloc_r+0x2c>
 8010d9a:	1cc4      	adds	r4, r0, #3
 8010d9c:	f024 0403 	bic.w	r4, r4, #3
 8010da0:	42a0      	cmp	r0, r4
 8010da2:	d0e3      	beq.n	8010d6c <_malloc_r+0x64>
 8010da4:	1a21      	subs	r1, r4, r0
 8010da6:	4630      	mov	r0, r6
 8010da8:	f000 f810 	bl	8010dcc <_sbrk_r>
 8010dac:	3001      	adds	r0, #1
 8010dae:	d1dd      	bne.n	8010d6c <_malloc_r+0x64>
 8010db0:	e7cf      	b.n	8010d52 <_malloc_r+0x4a>
 8010db2:	bf00      	nop
 8010db4:	20000510 	.word	0x20000510
 8010db8:	20000514 	.word	0x20000514

08010dbc <realloc>:
 8010dbc:	4b02      	ldr	r3, [pc, #8]	; (8010dc8 <realloc+0xc>)
 8010dbe:	460a      	mov	r2, r1
 8010dc0:	4601      	mov	r1, r0
 8010dc2:	6818      	ldr	r0, [r3, #0]
 8010dc4:	f000 b826 	b.w	8010e14 <_realloc_r>
 8010dc8:	20000044 	.word	0x20000044

08010dcc <_sbrk_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d06      	ldr	r5, [pc, #24]	; (8010de8 <_sbrk_r+0x1c>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	f7f0 fe12 	bl	8001a00 <_sbrk>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_sbrk_r+0x1a>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_sbrk_r+0x1a>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	20005fc4 	.word	0x20005fc4

08010dec <strcpy>:
 8010dec:	4603      	mov	r3, r0
 8010dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010df2:	f803 2b01 	strb.w	r2, [r3], #1
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	d1f9      	bne.n	8010dee <strcpy+0x2>
 8010dfa:	4770      	bx	lr

08010dfc <__malloc_lock>:
 8010dfc:	4801      	ldr	r0, [pc, #4]	; (8010e04 <__malloc_lock+0x8>)
 8010dfe:	f000 b82f 	b.w	8010e60 <__retarget_lock_acquire_recursive>
 8010e02:	bf00      	nop
 8010e04:	20005fcc 	.word	0x20005fcc

08010e08 <__malloc_unlock>:
 8010e08:	4801      	ldr	r0, [pc, #4]	; (8010e10 <__malloc_unlock+0x8>)
 8010e0a:	f000 b82a 	b.w	8010e62 <__retarget_lock_release_recursive>
 8010e0e:	bf00      	nop
 8010e10:	20005fcc 	.word	0x20005fcc

08010e14 <_realloc_r>:
 8010e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e16:	4607      	mov	r7, r0
 8010e18:	4614      	mov	r4, r2
 8010e1a:	460e      	mov	r6, r1
 8010e1c:	b921      	cbnz	r1, 8010e28 <_realloc_r+0x14>
 8010e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010e22:	4611      	mov	r1, r2
 8010e24:	f7ff bf70 	b.w	8010d08 <_malloc_r>
 8010e28:	b922      	cbnz	r2, 8010e34 <_realloc_r+0x20>
 8010e2a:	f7ff ff1d 	bl	8010c68 <_free_r>
 8010e2e:	4625      	mov	r5, r4
 8010e30:	4628      	mov	r0, r5
 8010e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e34:	f000 f816 	bl	8010e64 <_malloc_usable_size_r>
 8010e38:	42a0      	cmp	r0, r4
 8010e3a:	d20f      	bcs.n	8010e5c <_realloc_r+0x48>
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7ff ff62 	bl	8010d08 <_malloc_r>
 8010e44:	4605      	mov	r5, r0
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d0f2      	beq.n	8010e30 <_realloc_r+0x1c>
 8010e4a:	4631      	mov	r1, r6
 8010e4c:	4622      	mov	r2, r4
 8010e4e:	f7ff fef5 	bl	8010c3c <memcpy>
 8010e52:	4631      	mov	r1, r6
 8010e54:	4638      	mov	r0, r7
 8010e56:	f7ff ff07 	bl	8010c68 <_free_r>
 8010e5a:	e7e9      	b.n	8010e30 <_realloc_r+0x1c>
 8010e5c:	4635      	mov	r5, r6
 8010e5e:	e7e7      	b.n	8010e30 <_realloc_r+0x1c>

08010e60 <__retarget_lock_acquire_recursive>:
 8010e60:	4770      	bx	lr

08010e62 <__retarget_lock_release_recursive>:
 8010e62:	4770      	bx	lr

08010e64 <_malloc_usable_size_r>:
 8010e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e68:	1f18      	subs	r0, r3, #4
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	bfbc      	itt	lt
 8010e6e:	580b      	ldrlt	r3, [r1, r0]
 8010e70:	18c0      	addlt	r0, r0, r3
 8010e72:	4770      	bx	lr

08010e74 <_init>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	bf00      	nop
 8010e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7a:	bc08      	pop	{r3}
 8010e7c:	469e      	mov	lr, r3
 8010e7e:	4770      	bx	lr

08010e80 <_fini>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	bf00      	nop
 8010e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e86:	bc08      	pop	{r3}
 8010e88:	469e      	mov	lr, r3
 8010e8a:	4770      	bx	lr
